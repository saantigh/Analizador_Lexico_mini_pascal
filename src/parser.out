Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISPOSE
    EXIT
    INHERITED
    INTERRUPT
    PRIVATE
    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_header uses_clause declaration_blocks main_block
Rule 2     program_header -> PROGRAM ID SEMICOLON
Rule 3     program_header -> UNIT ID SEMICOLON
Rule 4     uses_clause -> USES id_list SEMICOLON
Rule 5     uses_clause -> empty
Rule 6     id_list -> ID
Rule 7     id_list -> id_list COMMA ID
Rule 8     declaration_blocks -> declaration_blocks declaration_block
Rule 9     declaration_blocks -> empty
Rule 10    declaration_block -> label_declaration
Rule 11    declaration_block -> const_declaration_block
Rule 12    declaration_block -> type_declaration_block
Rule 13    declaration_block -> var_declaration_block
Rule 14    declaration_block -> procedure_declaration
Rule 15    declaration_block -> function_declaration
Rule 16    declaration_block -> constructor_implementation
Rule 17    declaration_block -> destructor_implementation
Rule 18    declaration_block -> method_implementation
Rule 19    declaration_block -> implementation_block
Rule 20    declaration_block -> interface_block
Rule 21    main_block -> compound_statement DOT
Rule 22    interface_block -> INTERFACE declaration_blocks
Rule 23    implementation_block -> IMPLEMENTATION declaration_blocks
Rule 24    label_declaration -> LABEL number_list SEMICOLON
Rule 25    number_list -> NUMBER
Rule 26    number_list -> number_list COMMA NUMBER
Rule 27    const_declaration_block -> CONST const_list
Rule 28    const_list -> const_list const_declaration
Rule 29    const_list -> const_declaration
Rule 30    const_declaration -> ID EQUAL constant SEMICOLON
Rule 31    const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON
Rule 32    constant -> NUMBER
Rule 33    constant -> STRING
Rule 34    constant -> TRUE
Rule 35    constant -> FALSE
Rule 36    constant -> NIL
Rule 37    constant -> ORDINAL_CONSTANT
Rule 38    type_declaration_block -> TYPE type_list
Rule 39    type_list -> type_list type_declaration
Rule 40    type_list -> type_declaration
Rule 41    type_declaration -> ID EQUAL type_definition SEMICOLON
Rule 42    type_definition -> data_type_list
Rule 43    type_definition -> LPAREN id_list RPAREN
Rule 44    type_definition -> NUMBER DOBLEDOT NUMBER
Rule 45    type_definition -> CHAR DOBLEDOT CHAR
Rule 46    type_definition -> ID DOBLEDOT ID
Rule 47    type_definition -> record_type
Rule 48    type_definition -> array_type
Rule 49    type_definition -> set_type
Rule 50    type_definition -> pointer_type
Rule 51    type_definition -> file_type
Rule 52    type_definition -> object_type
Rule 53    type_definition -> string_type
Rule 54    string_type -> STRING
Rule 55    string_type -> STRING LBRACKET NUMBER RBRACKET
Rule 56    record_type -> RECORD record_list END
Rule 57    record_type -> PACKED RECORD record_list END
Rule 58    array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 59    array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 60    array_type -> ARRAY OF data_type_list
Rule 61    type_range_list -> type_range
Rule 62    type_range_list -> type_range_list COMMA type_range
Rule 63    type_range -> NUMBER DOBLEDOT NUMBER
Rule 64    type_range -> NUMBER DOBLEDOT ID
Rule 65    type_range -> ID DOBLEDOT NUMBER
Rule 66    type_range -> CHAR DOBLEDOT CHAR
Rule 67    type_range -> ID DOBLEDOT ID
Rule 68    type_range -> ID
Rule 69    set_type -> SET OF set_range
Rule 70    set_range -> data_type_set
Rule 71    set_range -> NUMBER DOBLEDOT NUMBER
Rule 72    set_range -> CHAR DOBLEDOT CHAR
Rule 73    set_range -> ID
Rule 74    pointer_type -> CARET ID
Rule 75    pointer_type -> CARET data_type_list
Rule 76    file_type -> FILE OF data_type_list
Rule 77    file_type -> FILE
Rule 78    object_type -> OBJECT object_heritage object_fields object_methods END
Rule 79    object_heritage -> LPAREN ID RPAREN
Rule 80    object_heritage -> empty
Rule 81    object_fields -> object_fields var_declaration
Rule 82    object_fields -> empty
Rule 83    object_methods -> object_methods method_declaration
Rule 84    object_methods -> empty
Rule 85    method_declaration -> procedure_header SEMICOLON
Rule 86    method_declaration -> function_header SEMICOLON
Rule 87    method_declaration -> constructor_declaration
Rule 88    method_declaration -> destructor_declaration
Rule 89    method_declaration -> procedure_header SEMICOLON directive
Rule 90    method_declaration -> function_header SEMICOLON directive
Rule 91    constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 92    destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 93    method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 94    method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 95    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON
Rule 96    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive
Rule 97    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON
Rule 98    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive
Rule 99    record_list -> record_list record_declaration
Rule 100   record_list -> record_declaration
Rule 101   record_declaration -> id_list COLON data_type_list SEMICOLON
Rule 102   record_declaration -> CASE ID COLON data_type_list OF variant_list
Rule 103   record_declaration -> id_list COLON data_type_list
Rule 104   variant_list -> variant_list variant
Rule 105   variant_list -> variant
Rule 106   variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON
Rule 107   variant -> constant_list COLON LPAREN RPAREN SEMICOLON
Rule 108   constant_list -> constant
Rule 109   constant_list -> constant_list COMMA constant
Rule 110   var_declaration_block -> VAR var_list
Rule 111   var_list -> var_list var_declaration
Rule 112   var_list -> var_declaration
Rule 113   var_declaration -> id_list COLON type_definition SEMICOLON
Rule 114   var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON
Rule 115   var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON
Rule 116   procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON
Rule 117   procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 118   procedure_header -> PROCEDURE ID parameters
Rule 119   directive -> FORWARD
Rule 120   directive -> EXTERNAL
Rule 121   directive -> EXTERNAL STRING
Rule 122   directive -> ASM
Rule 123   directive -> INLINE
Rule 124   directive -> VIRTUAL
Rule 125   function_declaration -> function_header SEMICOLON directive
Rule 126   function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 127   function_header -> FUNCTION ID parameters COLON data_type_list
Rule 128   parameters -> LPAREN parameter_list RPAREN
Rule 129   parameters -> empty
Rule 130   parameter_list -> parameter_list SEMICOLON parameter_group
Rule 131   parameter_list -> parameter_group
Rule 132   parameter_group -> id_list COLON data_type_list
Rule 133   parameter_group -> VAR id_list COLON data_type_list
Rule 134   parameter_group -> CONST id_list COLON data_type_list
Rule 135   parameter_group -> procedure_header
Rule 136   parameter_group -> function_header
Rule 137   data_type_list -> INTEGER
Rule 138   data_type_list -> BYTE
Rule 139   data_type_list -> LONGINT
Rule 140   data_type_list -> SHORTINT
Rule 141   data_type_list -> WORD
Rule 142   data_type_list -> REAL
Rule 143   data_type_list -> SINGLE
Rule 144   data_type_list -> DOUBLE
Rule 145   data_type_list -> EXTENDED
Rule 146   data_type_list -> SHORT
Rule 147   data_type_list -> BOOLEAN
Rule 148   data_type_list -> CHAR
Rule 149   data_type_list -> STRING
Rule 150   data_type_list -> STRING LBRACKET NUMBER RBRACKET
Rule 151   data_type_list -> ID
Rule 152   data_type_list -> ABSOLUTE ID
Rule 153   data_type_list -> FILE
Rule 154   data_type_list -> array_type
Rule 155   data_type_list -> pointer_type
Rule 156   data_type_list -> record_type
Rule 157   data_type_list -> set_type
Rule 158   data_type_list -> file_type
Rule 159   data_type_list -> object_type
Rule 160   data_type_list -> string_type
Rule 161   data_type_set -> BYTE
Rule 162   data_type_set -> SHORTINT
Rule 163   data_type_set -> WORD
Rule 164   data_type_set -> BOOLEAN
Rule 165   data_type_set -> CHAR
Rule 166   data_type_set -> ID
Rule 167   compound_statement -> BEGIN sentences_list END
Rule 168   sentences_list -> sentences_list sentence SEMICOLON
Rule 169   sentences_list -> sentence SEMICOLON
Rule 170   sentences_list -> empty
Rule 171   sentence -> assignment
Rule 172   sentence -> procedure_call
Rule 173   sentence -> compound_statement
Rule 174   sentence -> if_statement
Rule 175   sentence -> case_statement
Rule 176   sentence -> for_statement
Rule 177   sentence -> while_statement
Rule 178   sentence -> repeat_statement
Rule 179   sentence -> with_statement
Rule 180   sentence -> goto_statement
Rule 181   sentence -> labeled_sentence
Rule 182   sentence -> asm_statement
Rule 183   sentence -> empty
Rule 184   asm_statement -> ASM
Rule 185   assignment -> variable ASIGNATION expression
Rule 186   assignment -> ID ASIGNATION expression
Rule 187   procedure_call -> ID
Rule 188   procedure_call -> ID LPAREN expression_list RPAREN
Rule 189   procedure_call -> ID LPAREN RPAREN
Rule 190   procedure_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 191   procedure_call -> variable DOT ID LPAREN RPAREN
Rule 192   procedure_call -> NEW LPAREN expression_list RPAREN
Rule 193   procedure_call -> NEW LPAREN RPAREN
Rule 194   if_statement -> IF expression THEN sentence
Rule 195   if_statement -> IF expression THEN sentence ELSE sentence
Rule 196   case_statement -> CASE expression OF case_list END
Rule 197   case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END
Rule 198   case_statement -> CASE expression OF case_list ELSE sentences_list END
Rule 199   case_list -> case_list case_label COLON sentence SEMICOLON
Rule 200   case_list -> case_label COLON sentence SEMICOLON
Rule 201   case_list -> empty
Rule 202   case_label -> constant
Rule 203   case_label -> constant DOBLEDOT constant
Rule 204   case_label -> case_label COMMA constant
Rule 205   for_statement -> FOR ID ASIGNATION expression TO expression DO sentence
Rule 206   for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence
Rule 207   while_statement -> WHILE expression DO sentence
Rule 208   repeat_statement -> REPEAT sentences_list UNTIL expression
Rule 209   with_statement -> WITH variable_list DO sentence
Rule 210   variable_list -> variable
Rule 211   variable_list -> variable_list COMMA variable
Rule 212   goto_statement -> GOTO NUMBER
Rule 213   labeled_sentence -> NUMBER COLON sentence
Rule 214   empty -> <empty>
Rule 215   expression -> expression OR simple_expression
Rule 216   expression -> expression XOR simple_expression
Rule 217   expression -> simple_expression
Rule 218   simple_expression -> simple_expression AND relational_expression
Rule 219   simple_expression -> relational_expression
Rule 220   relational_expression -> relational_expression relational_operator additive_expression
Rule 221   relational_expression -> additive_expression
Rule 222   relational_operator -> EQUAL
Rule 223   relational_operator -> DISTINT
Rule 224   relational_operator -> LESS
Rule 225   relational_operator -> LESSEQUAL
Rule 226   relational_operator -> GREATER
Rule 227   relational_operator -> GREATEREQUAL
Rule 228   relational_operator -> IN
Rule 229   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 230   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 231   additive_expression -> multiplicative_expression
Rule 232   multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 233   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 234   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 235   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 236   multiplicative_expression -> multiplicative_expression SHL unary_expression
Rule 237   multiplicative_expression -> multiplicative_expression SHR unary_expression
Rule 238   multiplicative_expression -> unary_expression
Rule 239   unary_expression -> NOT unary_expression
Rule 240   unary_expression -> MINUS unary_expression
Rule 241   unary_expression -> PLUS unary_expression
Rule 242   unary_expression -> ADDRESS_OF unary_expression
Rule 243   unary_expression -> primary_expression
Rule 244   primary_expression -> variable
Rule 245   primary_expression -> NUMBER
Rule 246   primary_expression -> STRING
Rule 247   primary_expression -> TRUE
Rule 248   primary_expression -> FALSE
Rule 249   primary_expression -> NIL
Rule 250   primary_expression -> LPAREN expression RPAREN
Rule 251   primary_expression -> function_call
Rule 252   primary_expression -> set_constructor
Rule 253   set_item -> expression
Rule 254   set_item -> expression DOBLEDOT expression
Rule 255   set_item_list -> set_item
Rule 256   set_item_list -> set_item_list COMMA set_item
Rule 257   set_constructor -> LBRACKET set_item_list RBRACKET
Rule 258   set_constructor -> LBRACKET RBRACKET
Rule 259   variable -> ID
Rule 260   variable -> variable DOT ID
Rule 261   variable -> variable LBRACKET expression_list RBRACKET
Rule 262   variable -> variable CARET
Rule 263   variable -> LPAREN variable RPAREN CARET
Rule 264   function_call -> ID LPAREN expression_list RPAREN
Rule 265   function_call -> ID LPAREN RPAREN
Rule 266   function_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 267   function_call -> variable DOT ID LPAREN RPAREN
Rule 268   expression_list -> expression
Rule 269   expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

ABSOLUTE             : 115 152
ADDRESS_OF           : 242
AND                  : 218
ARRAY                : 58 59 60
ASIGNATION           : 185 186 205 206
ASM                  : 122 184
BEGIN                : 167
BOOLEAN              : 147 164
BYTE                 : 138 161
CARET                : 74 75 262 263
CASE                 : 102 196 197 198
CHAR                 : 45 45 66 66 72 72 148 165
COLON                : 31 94 101 102 103 106 107 113 114 115 127 132 133 134 199 200 213
COMMA                : 7 26 62 109 204 211 256 269
CONST                : 27 134
CONSTRUCTOR          : 91 95 96
DESTRUCTOR           : 92 97 98
DISPOSE              : 
DISTINT              : 223
DIV                  : 234
DIVIDE               : 233
DO                   : 205 206 207 209
DOBLEDOT             : 44 45 46 63 64 65 66 67 71 72 203 254
DOT                  : 21 91 92 93 94 190 191 260 266 267
DOUBLE               : 144
DOWNTO               : 206
ELSE                 : 195 197 198
END                  : 56 57 78 167 196 197 198
EQUAL                : 30 31 41 114 222
EXIT                 : 
EXTENDED             : 145
EXTERNAL             : 120 121
FALSE                : 35 248
FILE                 : 76 77 153
FOR                  : 205 206
FORWARD              : 119
FUNCTION             : 94 127
GOTO                 : 212
GREATER              : 226
GREATEREQUAL         : 227
ID                   : 2 3 6 7 30 31 41 46 46 64 65 67 67 68 73 74 79 91 91 92 92 93 93 94 94 95 96 97 98 102 115 118 127 151 152 166 186 187 188 189 190 191 205 206 259 260 264 265 266 267
IF                   : 194 195
IMPLEMENTATION       : 23
IN                   : 228
INHERITED            : 
INLINE               : 123
INTEGER              : 137
INTERFACE            : 22
INTERRUPT            : 
LABEL                : 24
LBRACKET             : 55 58 59 150 257 258 261
LESS                 : 224
LESSEQUAL            : 225
LONGINT              : 139
LPAREN               : 43 79 106 107 128 188 189 190 191 192 193 250 263 264 265 266 267
MINUS                : 230 240
MOD                  : 235
NEW                  : 192 193
NIL                  : 36 249
NOT                  : 239
NUMBER               : 25 26 32 44 44 55 63 63 64 65 71 71 150 212 213 245
OBJECT               : 78
OF                   : 58 59 60 69 76 102 196 197 198
OR                   : 215
ORDINAL_CONSTANT     : 37
PACKED               : 57 59
PLUS                 : 229 241
PRIVATE              : 
PROCEDURE            : 93 118
PROGRAM              : 2
RBRACKET             : 55 58 59 150 257 258 261
REAL                 : 142
RECORD               : 56 57
REPEAT               : 208
RPAREN               : 43 79 106 107 128 188 189 190 191 192 193 250 263 264 265 266 267
SEMICOLON            : 2 3 4 24 30 31 41 85 86 89 90 91 91 92 92 93 93 94 94 95 96 97 98 101 106 107 113 114 115 116 116 117 117 125 126 126 130 168 169 197 199 200
SET                  : 69
SHL                  : 236
SHORT                : 146
SHORTINT             : 140 162
SHR                  : 237
SINGLE               : 143
STRING               : 33 54 55 121 149 150 246
TEXT                 : 
THEN                 : 194 195
TIMES                : 232
TO                   : 205
TRUE                 : 34 247
TYPE                 : 38
UNIT                 : 3
UNTIL                : 208
USES                 : 4
VAR                  : 110 133
VIRTUAL              : 124
WHILE                : 207
WITH                 : 209
WORD                 : 141 163
XOR                  : 216
error                : 

Nonterminals, with rules where they appear

additive_expression  : 220 221 229 230
array_type           : 48 154
asm_statement        : 182
assignment           : 171
case_label           : 199 200 204
case_list            : 196 197 198 199
case_statement       : 175
compound_statement   : 21 91 92 93 94 117 126 173
const_declaration    : 28 29
const_declaration_block : 11
const_list           : 27 28
constant             : 30 31 108 109 202 203 203 204
constant_list        : 106 107 109
constructor_declaration : 87
constructor_implementation : 16
data_type_list       : 31 42 58 59 60 75 76 94 101 102 103 127 132 133 134
data_type_set        : 70
declaration_block    : 8
declaration_blocks   : 1 8 22 23 91 92 93 94 117 126
destructor_declaration : 88
destructor_implementation : 17
directive            : 89 90 96 98 116 125
empty                : 5 9 80 82 84 129 170 183 201
expression           : 114 185 186 194 195 196 197 198 205 205 206 206 207 208 215 216 250 253 254 254 268 269
expression_list      : 188 190 192 261 264 266 269
file_type            : 51 158
for_statement        : 176
function_call        : 251
function_declaration : 15
function_header      : 86 90 125 126 136
goto_statement       : 180
id_list              : 4 7 43 101 103 113 114 115 132 133 134
if_statement         : 174
implementation_block : 19
interface_block      : 20
label_declaration    : 10
labeled_sentence     : 181
main_block           : 1
method_declaration   : 83
method_implementation : 18
multiplicative_expression : 229 230 231 232 233 234 235 236 237
number_list          : 24 26
object_fields        : 78 81
object_heritage      : 78
object_methods       : 78 83
object_type          : 52 159
parameter_group      : 130 131
parameter_list       : 128 130
parameters           : 91 92 93 94 95 96 97 98 118 127
pointer_type         : 50 155
primary_expression   : 243
procedure_call       : 172
procedure_declaration : 14
procedure_header     : 85 89 116 117 135
program              : 0
program_header       : 1
record_declaration   : 99 100
record_list          : 56 57 99 106
record_type          : 47 156
relational_expression : 218 219 220
relational_operator  : 220
repeat_statement     : 178
sentence             : 168 169 194 195 195 199 200 205 206 207 209 213
sentences_list       : 167 168 197 198 208
set_constructor      : 252
set_item             : 255 256
set_item_list        : 256 257
set_range            : 69
set_type             : 49 157
simple_expression    : 215 216 217 218
string_type          : 53 160
type_declaration     : 39 40
type_declaration_block : 12
type_definition      : 41 113 114 115
type_list            : 38 39
type_range           : 61 62
type_range_list      : 58 59 62
unary_expression     : 232 233 234 235 236 237 238 239 240 241 242
uses_clause          : 1
var_declaration      : 81 111 112
var_declaration_block : 13
var_list             : 110 111
variable             : 185 190 191 210 211 244 260 261 262 263 266 267
variable_list        : 209 211
variant              : 104 105
variant_list         : 102 104
while_statement      : 177
with_statement       : 179

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_header uses_clause declaration_blocks main_block
    (2) program_header -> . PROGRAM ID SEMICOLON
    (3) program_header -> . UNIT ID SEMICOLON

    PROGRAM         shift and go to state 3
    UNIT            shift and go to state 4

    program                        shift and go to state 1
    program_header                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_header . uses_clause declaration_blocks main_block
    (4) uses_clause -> . USES id_list SEMICOLON
    (5) uses_clause -> . empty
    (214) empty -> .

    USES            shift and go to state 6
    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    uses_clause                    shift and go to state 5
    empty                          shift and go to state 7

state 3

    (2) program_header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 8


state 4

    (3) program_header -> UNIT . ID SEMICOLON

    ID              shift and go to state 9


state 5

    (1) program -> program_header uses_clause . declaration_blocks main_block
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 10
    empty                          shift and go to state 11

state 6

    (4) uses_clause -> USES . id_list SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 12

state 7

    (5) uses_clause -> empty .

    BEGIN           reduce using rule 5 (uses_clause -> empty .)
    LABEL           reduce using rule 5 (uses_clause -> empty .)
    CONST           reduce using rule 5 (uses_clause -> empty .)
    TYPE            reduce using rule 5 (uses_clause -> empty .)
    VAR             reduce using rule 5 (uses_clause -> empty .)
    CONSTRUCTOR     reduce using rule 5 (uses_clause -> empty .)
    DESTRUCTOR      reduce using rule 5 (uses_clause -> empty .)
    PROCEDURE       reduce using rule 5 (uses_clause -> empty .)
    FUNCTION        reduce using rule 5 (uses_clause -> empty .)
    IMPLEMENTATION  reduce using rule 5 (uses_clause -> empty .)
    INTERFACE       reduce using rule 5 (uses_clause -> empty .)


state 8

    (2) program_header -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (3) program_header -> UNIT ID . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (1) program -> program_header uses_clause declaration_blocks . main_block
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (21) main_block -> . compound_statement DOT
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (167) compound_statement -> . BEGIN sentences_list END
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    main_block                     shift and go to state 16
    declaration_block              shift and go to state 17
    compound_statement             shift and go to state 18
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 11

    (9) declaration_blocks -> empty .

    BEGIN           reduce using rule 9 (declaration_blocks -> empty .)
    LABEL           reduce using rule 9 (declaration_blocks -> empty .)
    CONST           reduce using rule 9 (declaration_blocks -> empty .)
    TYPE            reduce using rule 9 (declaration_blocks -> empty .)
    VAR             reduce using rule 9 (declaration_blocks -> empty .)
    CONSTRUCTOR     reduce using rule 9 (declaration_blocks -> empty .)
    DESTRUCTOR      reduce using rule 9 (declaration_blocks -> empty .)
    PROCEDURE       reduce using rule 9 (declaration_blocks -> empty .)
    FUNCTION        reduce using rule 9 (declaration_blocks -> empty .)
    IMPLEMENTATION  reduce using rule 9 (declaration_blocks -> empty .)
    INTERFACE       reduce using rule 9 (declaration_blocks -> empty .)


state 12

    (4) uses_clause -> USES id_list . SEMICOLON
    (7) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44


state 13

    (6) id_list -> ID .

    SEMICOLON       reduce using rule 6 (id_list -> ID .)
    COMMA           reduce using rule 6 (id_list -> ID .)
    COLON           reduce using rule 6 (id_list -> ID .)
    RPAREN          reduce using rule 6 (id_list -> ID .)


state 14

    (2) program_header -> PROGRAM ID SEMICOLON .

    USES            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    BEGIN           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    LABEL           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONST           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    TYPE            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    INTERFACE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)


state 15

    (3) program_header -> UNIT ID SEMICOLON .

    USES            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    BEGIN           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    LABEL           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONST           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    TYPE            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    VAR             reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    INTERFACE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)


state 16

    (1) program -> program_header uses_clause declaration_blocks main_block .

    $end            reduce using rule 1 (program -> program_header uses_clause declaration_blocks main_block .)


state 17

    (8) declaration_blocks -> declaration_blocks declaration_block .

    BEGIN           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    LABEL           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONST           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    TYPE            reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    VAR             reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONSTRUCTOR     reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    DESTRUCTOR      reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    PROCEDURE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    FUNCTION        reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    IMPLEMENTATION  reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    INTERFACE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)


state 18

    (21) main_block -> compound_statement . DOT

    DOT             shift and go to state 45


state 19

    (10) declaration_block -> label_declaration .

    BEGIN           reduce using rule 10 (declaration_block -> label_declaration .)
    LABEL           reduce using rule 10 (declaration_block -> label_declaration .)
    CONST           reduce using rule 10 (declaration_block -> label_declaration .)
    TYPE            reduce using rule 10 (declaration_block -> label_declaration .)
    VAR             reduce using rule 10 (declaration_block -> label_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_block -> label_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_block -> label_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_block -> label_declaration .)
    FUNCTION        reduce using rule 10 (declaration_block -> label_declaration .)
    IMPLEMENTATION  reduce using rule 10 (declaration_block -> label_declaration .)
    INTERFACE       reduce using rule 10 (declaration_block -> label_declaration .)


state 20

    (11) declaration_block -> const_declaration_block .

    BEGIN           reduce using rule 11 (declaration_block -> const_declaration_block .)
    LABEL           reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONST           reduce using rule 11 (declaration_block -> const_declaration_block .)
    TYPE            reduce using rule 11 (declaration_block -> const_declaration_block .)
    VAR             reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONSTRUCTOR     reduce using rule 11 (declaration_block -> const_declaration_block .)
    DESTRUCTOR      reduce using rule 11 (declaration_block -> const_declaration_block .)
    PROCEDURE       reduce using rule 11 (declaration_block -> const_declaration_block .)
    FUNCTION        reduce using rule 11 (declaration_block -> const_declaration_block .)
    IMPLEMENTATION  reduce using rule 11 (declaration_block -> const_declaration_block .)
    INTERFACE       reduce using rule 11 (declaration_block -> const_declaration_block .)


state 21

    (12) declaration_block -> type_declaration_block .

    BEGIN           reduce using rule 12 (declaration_block -> type_declaration_block .)
    LABEL           reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONST           reduce using rule 12 (declaration_block -> type_declaration_block .)
    TYPE            reduce using rule 12 (declaration_block -> type_declaration_block .)
    VAR             reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONSTRUCTOR     reduce using rule 12 (declaration_block -> type_declaration_block .)
    DESTRUCTOR      reduce using rule 12 (declaration_block -> type_declaration_block .)
    PROCEDURE       reduce using rule 12 (declaration_block -> type_declaration_block .)
    FUNCTION        reduce using rule 12 (declaration_block -> type_declaration_block .)
    IMPLEMENTATION  reduce using rule 12 (declaration_block -> type_declaration_block .)
    INTERFACE       reduce using rule 12 (declaration_block -> type_declaration_block .)


state 22

    (13) declaration_block -> var_declaration_block .

    BEGIN           reduce using rule 13 (declaration_block -> var_declaration_block .)
    LABEL           reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONST           reduce using rule 13 (declaration_block -> var_declaration_block .)
    TYPE            reduce using rule 13 (declaration_block -> var_declaration_block .)
    VAR             reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONSTRUCTOR     reduce using rule 13 (declaration_block -> var_declaration_block .)
    DESTRUCTOR      reduce using rule 13 (declaration_block -> var_declaration_block .)
    PROCEDURE       reduce using rule 13 (declaration_block -> var_declaration_block .)
    FUNCTION        reduce using rule 13 (declaration_block -> var_declaration_block .)
    IMPLEMENTATION  reduce using rule 13 (declaration_block -> var_declaration_block .)
    INTERFACE       reduce using rule 13 (declaration_block -> var_declaration_block .)


state 23

    (14) declaration_block -> procedure_declaration .

    BEGIN           reduce using rule 14 (declaration_block -> procedure_declaration .)
    LABEL           reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONST           reduce using rule 14 (declaration_block -> procedure_declaration .)
    TYPE            reduce using rule 14 (declaration_block -> procedure_declaration .)
    VAR             reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 14 (declaration_block -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 14 (declaration_block -> procedure_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_block -> procedure_declaration .)
    FUNCTION        reduce using rule 14 (declaration_block -> procedure_declaration .)
    IMPLEMENTATION  reduce using rule 14 (declaration_block -> procedure_declaration .)
    INTERFACE       reduce using rule 14 (declaration_block -> procedure_declaration .)


state 24

    (15) declaration_block -> function_declaration .

    BEGIN           reduce using rule 15 (declaration_block -> function_declaration .)
    LABEL           reduce using rule 15 (declaration_block -> function_declaration .)
    CONST           reduce using rule 15 (declaration_block -> function_declaration .)
    TYPE            reduce using rule 15 (declaration_block -> function_declaration .)
    VAR             reduce using rule 15 (declaration_block -> function_declaration .)
    CONSTRUCTOR     reduce using rule 15 (declaration_block -> function_declaration .)
    DESTRUCTOR      reduce using rule 15 (declaration_block -> function_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_block -> function_declaration .)
    FUNCTION        reduce using rule 15 (declaration_block -> function_declaration .)
    IMPLEMENTATION  reduce using rule 15 (declaration_block -> function_declaration .)
    INTERFACE       reduce using rule 15 (declaration_block -> function_declaration .)


state 25

    (16) declaration_block -> constructor_implementation .

    BEGIN           reduce using rule 16 (declaration_block -> constructor_implementation .)
    LABEL           reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONST           reduce using rule 16 (declaration_block -> constructor_implementation .)
    TYPE            reduce using rule 16 (declaration_block -> constructor_implementation .)
    VAR             reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONSTRUCTOR     reduce using rule 16 (declaration_block -> constructor_implementation .)
    DESTRUCTOR      reduce using rule 16 (declaration_block -> constructor_implementation .)
    PROCEDURE       reduce using rule 16 (declaration_block -> constructor_implementation .)
    FUNCTION        reduce using rule 16 (declaration_block -> constructor_implementation .)
    IMPLEMENTATION  reduce using rule 16 (declaration_block -> constructor_implementation .)
    INTERFACE       reduce using rule 16 (declaration_block -> constructor_implementation .)


state 26

    (17) declaration_block -> destructor_implementation .

    BEGIN           reduce using rule 17 (declaration_block -> destructor_implementation .)
    LABEL           reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONST           reduce using rule 17 (declaration_block -> destructor_implementation .)
    TYPE            reduce using rule 17 (declaration_block -> destructor_implementation .)
    VAR             reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONSTRUCTOR     reduce using rule 17 (declaration_block -> destructor_implementation .)
    DESTRUCTOR      reduce using rule 17 (declaration_block -> destructor_implementation .)
    PROCEDURE       reduce using rule 17 (declaration_block -> destructor_implementation .)
    FUNCTION        reduce using rule 17 (declaration_block -> destructor_implementation .)
    IMPLEMENTATION  reduce using rule 17 (declaration_block -> destructor_implementation .)
    INTERFACE       reduce using rule 17 (declaration_block -> destructor_implementation .)


state 27

    (18) declaration_block -> method_implementation .

    BEGIN           reduce using rule 18 (declaration_block -> method_implementation .)
    LABEL           reduce using rule 18 (declaration_block -> method_implementation .)
    CONST           reduce using rule 18 (declaration_block -> method_implementation .)
    TYPE            reduce using rule 18 (declaration_block -> method_implementation .)
    VAR             reduce using rule 18 (declaration_block -> method_implementation .)
    CONSTRUCTOR     reduce using rule 18 (declaration_block -> method_implementation .)
    DESTRUCTOR      reduce using rule 18 (declaration_block -> method_implementation .)
    PROCEDURE       reduce using rule 18 (declaration_block -> method_implementation .)
    FUNCTION        reduce using rule 18 (declaration_block -> method_implementation .)
    IMPLEMENTATION  reduce using rule 18 (declaration_block -> method_implementation .)
    INTERFACE       reduce using rule 18 (declaration_block -> method_implementation .)


state 28

    (19) declaration_block -> implementation_block .

    BEGIN           reduce using rule 19 (declaration_block -> implementation_block .)
    LABEL           reduce using rule 19 (declaration_block -> implementation_block .)
    CONST           reduce using rule 19 (declaration_block -> implementation_block .)
    TYPE            reduce using rule 19 (declaration_block -> implementation_block .)
    VAR             reduce using rule 19 (declaration_block -> implementation_block .)
    CONSTRUCTOR     reduce using rule 19 (declaration_block -> implementation_block .)
    DESTRUCTOR      reduce using rule 19 (declaration_block -> implementation_block .)
    PROCEDURE       reduce using rule 19 (declaration_block -> implementation_block .)
    FUNCTION        reduce using rule 19 (declaration_block -> implementation_block .)
    IMPLEMENTATION  reduce using rule 19 (declaration_block -> implementation_block .)
    INTERFACE       reduce using rule 19 (declaration_block -> implementation_block .)


state 29

    (20) declaration_block -> interface_block .

    BEGIN           reduce using rule 20 (declaration_block -> interface_block .)
    LABEL           reduce using rule 20 (declaration_block -> interface_block .)
    CONST           reduce using rule 20 (declaration_block -> interface_block .)
    TYPE            reduce using rule 20 (declaration_block -> interface_block .)
    VAR             reduce using rule 20 (declaration_block -> interface_block .)
    CONSTRUCTOR     reduce using rule 20 (declaration_block -> interface_block .)
    DESTRUCTOR      reduce using rule 20 (declaration_block -> interface_block .)
    PROCEDURE       reduce using rule 20 (declaration_block -> interface_block .)
    FUNCTION        reduce using rule 20 (declaration_block -> interface_block .)
    IMPLEMENTATION  reduce using rule 20 (declaration_block -> interface_block .)
    INTERFACE       reduce using rule 20 (declaration_block -> interface_block .)


state 30

    (167) compound_statement -> BEGIN . sentences_list END
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (214) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 214 (empty -> .)
    SEMICOLON       reduce using rule 214 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 214 (empty -> .) ]
  ! NEW             [ reduce using rule 214 (empty -> .) ]
  ! BEGIN           [ reduce using rule 214 (empty -> .) ]
  ! IF              [ reduce using rule 214 (empty -> .) ]
  ! CASE            [ reduce using rule 214 (empty -> .) ]
  ! FOR             [ reduce using rule 214 (empty -> .) ]
  ! WHILE           [ reduce using rule 214 (empty -> .) ]
  ! REPEAT          [ reduce using rule 214 (empty -> .) ]
  ! WITH            [ reduce using rule 214 (empty -> .) ]
  ! GOTO            [ reduce using rule 214 (empty -> .) ]
  ! NUMBER          [ reduce using rule 214 (empty -> .) ]
  ! ASM             [ reduce using rule 214 (empty -> .) ]
  ! LPAREN          [ reduce using rule 214 (empty -> .) ]

    sentences_list                 shift and go to state 46
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 31

    (24) label_declaration -> LABEL . number_list SEMICOLON
    (25) number_list -> . NUMBER
    (26) number_list -> . number_list COMMA NUMBER

    NUMBER          shift and go to state 75

    number_list                    shift and go to state 74

state 32

    (27) const_declaration_block -> CONST . const_list
    (28) const_list -> . const_list const_declaration
    (29) const_list -> . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    ID              shift and go to state 78

    const_list                     shift and go to state 76
    const_declaration              shift and go to state 77

state 33

    (38) type_declaration_block -> TYPE . type_list
    (39) type_list -> . type_list type_declaration
    (40) type_list -> . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    ID              shift and go to state 81

    type_list                      shift and go to state 79
    type_declaration               shift and go to state 80

state 34

    (110) var_declaration_block -> VAR . var_list
    (111) var_list -> . var_list var_declaration
    (112) var_list -> . var_declaration
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    var_list                       shift and go to state 82
    var_declaration                shift and go to state 83
    id_list                        shift and go to state 84

state 35

    (116) procedure_declaration -> procedure_header . SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> procedure_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 85


state 36

    (125) function_declaration -> function_header . SEMICOLON directive
    (126) function_declaration -> function_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 86


state 37

    (91) constructor_implementation -> CONSTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 87


state 38

    (92) destructor_implementation -> DESTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 88


state 39

    (93) method_implementation -> PROCEDURE . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (118) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 89


state 40

    (94) method_implementation -> FUNCTION . ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (127) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 90


state 41

    (23) implementation_block -> IMPLEMENTATION . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)
    BEGIN           reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 91
    empty                          shift and go to state 11

state 42

    (22) interface_block -> INTERFACE . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)
    BEGIN           reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 92
    empty                          shift and go to state 11

state 43

    (4) uses_clause -> USES id_list SEMICOLON .

    BEGIN           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    LABEL           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONST           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    VAR             reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    INTERFACE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)


state 44

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 93


state 45

    (21) main_block -> compound_statement DOT .

    $end            reduce using rule 21 (main_block -> compound_statement DOT .)


state 46

    (167) compound_statement -> BEGIN sentences_list . END
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    END             shift and go to state 94
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 95
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 47

    (169) sentences_list -> sentence . SEMICOLON

    SEMICOLON       shift and go to state 97


state 48

    (170) sentences_list -> empty .
    (183) sentence -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 170 (sentences_list -> empty .)
    END             reduce using rule 170 (sentences_list -> empty .)
    ID              reduce using rule 170 (sentences_list -> empty .)
    NEW             reduce using rule 170 (sentences_list -> empty .)
    BEGIN           reduce using rule 170 (sentences_list -> empty .)
    IF              reduce using rule 170 (sentences_list -> empty .)
    CASE            reduce using rule 170 (sentences_list -> empty .)
    FOR             reduce using rule 170 (sentences_list -> empty .)
    WHILE           reduce using rule 170 (sentences_list -> empty .)
    REPEAT          reduce using rule 170 (sentences_list -> empty .)
    WITH            reduce using rule 170 (sentences_list -> empty .)
    GOTO            reduce using rule 170 (sentences_list -> empty .)
    NUMBER          reduce using rule 170 (sentences_list -> empty .)
    ASM             reduce using rule 170 (sentences_list -> empty .)
    LPAREN          reduce using rule 170 (sentences_list -> empty .)
    SEMICOLON       reduce using rule 170 (sentences_list -> empty .)
    UNTIL           reduce using rule 170 (sentences_list -> empty .)

  ! SEMICOLON       [ reduce using rule 183 (sentence -> empty .) ]


state 49

    (171) sentence -> assignment .

    SEMICOLON       reduce using rule 171 (sentence -> assignment .)
    ELSE            reduce using rule 171 (sentence -> assignment .)


state 50

    (172) sentence -> procedure_call .

    SEMICOLON       reduce using rule 172 (sentence -> procedure_call .)
    ELSE            reduce using rule 172 (sentence -> procedure_call .)


state 51

    (173) sentence -> compound_statement .

    SEMICOLON       reduce using rule 173 (sentence -> compound_statement .)
    ELSE            reduce using rule 173 (sentence -> compound_statement .)


state 52

    (174) sentence -> if_statement .

    SEMICOLON       reduce using rule 174 (sentence -> if_statement .)
    ELSE            reduce using rule 174 (sentence -> if_statement .)


state 53

    (175) sentence -> case_statement .

    SEMICOLON       reduce using rule 175 (sentence -> case_statement .)
    ELSE            reduce using rule 175 (sentence -> case_statement .)


state 54

    (176) sentence -> for_statement .

    SEMICOLON       reduce using rule 176 (sentence -> for_statement .)
    ELSE            reduce using rule 176 (sentence -> for_statement .)


state 55

    (177) sentence -> while_statement .

    SEMICOLON       reduce using rule 177 (sentence -> while_statement .)
    ELSE            reduce using rule 177 (sentence -> while_statement .)


state 56

    (178) sentence -> repeat_statement .

    SEMICOLON       reduce using rule 178 (sentence -> repeat_statement .)
    ELSE            reduce using rule 178 (sentence -> repeat_statement .)


state 57

    (179) sentence -> with_statement .

    SEMICOLON       reduce using rule 179 (sentence -> with_statement .)
    ELSE            reduce using rule 179 (sentence -> with_statement .)


state 58

    (180) sentence -> goto_statement .

    SEMICOLON       reduce using rule 180 (sentence -> goto_statement .)
    ELSE            reduce using rule 180 (sentence -> goto_statement .)


state 59

    (181) sentence -> labeled_sentence .

    SEMICOLON       reduce using rule 181 (sentence -> labeled_sentence .)
    ELSE            reduce using rule 181 (sentence -> labeled_sentence .)


state 60

    (182) sentence -> asm_statement .

    SEMICOLON       reduce using rule 182 (sentence -> asm_statement .)
    ELSE            reduce using rule 182 (sentence -> asm_statement .)


state 61

    (185) assignment -> variable . ASIGNATION expression
    (190) procedure_call -> variable . DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> variable . DOT ID LPAREN RPAREN
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET

    ASIGNATION      shift and go to state 98
    DOT             shift and go to state 99
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101


state 62

    (186) assignment -> ID . ASIGNATION expression
    (187) procedure_call -> ID .
    (188) procedure_call -> ID . LPAREN expression_list RPAREN
    (189) procedure_call -> ID . LPAREN RPAREN
    (259) variable -> ID .

  ! shift/reduce conflict for ASIGNATION resolved as shift
    ASIGNATION      shift and go to state 102
    SEMICOLON       reduce using rule 187 (procedure_call -> ID .)
    ELSE            reduce using rule 187 (procedure_call -> ID .)
    LPAREN          shift and go to state 103
    DOT             reduce using rule 259 (variable -> ID .)
    LBRACKET        reduce using rule 259 (variable -> ID .)
    CARET           reduce using rule 259 (variable -> ID .)

  ! ASIGNATION      [ reduce using rule 259 (variable -> ID .) ]


state 63

    (263) variable -> LPAREN . variable RPAREN CARET
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 105
    LPAREN          shift and go to state 63

    variable                       shift and go to state 104

state 64

    (192) procedure_call -> NEW . LPAREN expression_list RPAREN
    (193) procedure_call -> NEW . LPAREN RPAREN

    LPAREN          shift and go to state 106


state 65

    (194) if_statement -> IF . expression THEN sentence
    (195) if_statement -> IF . expression THEN sentence ELSE sentence
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 107
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 66

    (196) case_statement -> CASE . expression OF case_list END
    (197) case_statement -> CASE . expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> CASE . expression OF case_list ELSE sentences_list END
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 129
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 67

    (205) for_statement -> FOR . ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> FOR . ID ASIGNATION expression DOWNTO expression DO sentence

    ID              shift and go to state 130


state 68

    (207) while_statement -> WHILE . expression DO sentence
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 131
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 69

    (208) repeat_statement -> REPEAT . sentences_list UNTIL expression
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (214) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    UNTIL           reduce using rule 214 (empty -> .)
    SEMICOLON       reduce using rule 214 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 214 (empty -> .) ]
  ! NEW             [ reduce using rule 214 (empty -> .) ]
  ! BEGIN           [ reduce using rule 214 (empty -> .) ]
  ! IF              [ reduce using rule 214 (empty -> .) ]
  ! CASE            [ reduce using rule 214 (empty -> .) ]
  ! FOR             [ reduce using rule 214 (empty -> .) ]
  ! WHILE           [ reduce using rule 214 (empty -> .) ]
  ! REPEAT          [ reduce using rule 214 (empty -> .) ]
  ! WITH            [ reduce using rule 214 (empty -> .) ]
  ! GOTO            [ reduce using rule 214 (empty -> .) ]
  ! NUMBER          [ reduce using rule 214 (empty -> .) ]
  ! ASM             [ reduce using rule 214 (empty -> .) ]
  ! LPAREN          [ reduce using rule 214 (empty -> .) ]

    sentences_list                 shift and go to state 132
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 70

    (209) with_statement -> WITH . variable_list DO sentence
    (210) variable_list -> . variable
    (211) variable_list -> . variable_list COMMA variable
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 105
    LPAREN          shift and go to state 63

    variable_list                  shift and go to state 133
    variable                       shift and go to state 134

state 71

    (212) goto_statement -> GOTO . NUMBER

    NUMBER          shift and go to state 135


state 72

    (213) labeled_sentence -> NUMBER . COLON sentence

    COLON           shift and go to state 136


state 73

    (184) asm_statement -> ASM .

    SEMICOLON       reduce using rule 184 (asm_statement -> ASM .)
    ELSE            reduce using rule 184 (asm_statement -> ASM .)


state 74

    (24) label_declaration -> LABEL number_list . SEMICOLON
    (26) number_list -> number_list . COMMA NUMBER

    SEMICOLON       shift and go to state 137
    COMMA           shift and go to state 138


state 75

    (25) number_list -> NUMBER .

    SEMICOLON       reduce using rule 25 (number_list -> NUMBER .)
    COMMA           reduce using rule 25 (number_list -> NUMBER .)


state 76

    (27) const_declaration_block -> CONST const_list .
    (28) const_list -> const_list . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    BEGIN           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    LABEL           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONST           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    TYPE            reduce using rule 27 (const_declaration_block -> CONST const_list .)
    VAR             reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONSTRUCTOR     reduce using rule 27 (const_declaration_block -> CONST const_list .)
    DESTRUCTOR      reduce using rule 27 (const_declaration_block -> CONST const_list .)
    PROCEDURE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    FUNCTION        reduce using rule 27 (const_declaration_block -> CONST const_list .)
    IMPLEMENTATION  reduce using rule 27 (const_declaration_block -> CONST const_list .)
    INTERFACE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    ID              shift and go to state 78

    const_declaration              shift and go to state 139

state 77

    (29) const_list -> const_declaration .

    ID              reduce using rule 29 (const_list -> const_declaration .)
    BEGIN           reduce using rule 29 (const_list -> const_declaration .)
    LABEL           reduce using rule 29 (const_list -> const_declaration .)
    CONST           reduce using rule 29 (const_list -> const_declaration .)
    TYPE            reduce using rule 29 (const_list -> const_declaration .)
    VAR             reduce using rule 29 (const_list -> const_declaration .)
    CONSTRUCTOR     reduce using rule 29 (const_list -> const_declaration .)
    DESTRUCTOR      reduce using rule 29 (const_list -> const_declaration .)
    PROCEDURE       reduce using rule 29 (const_list -> const_declaration .)
    FUNCTION        reduce using rule 29 (const_list -> const_declaration .)
    IMPLEMENTATION  reduce using rule 29 (const_list -> const_declaration .)
    INTERFACE       reduce using rule 29 (const_list -> const_declaration .)


state 78

    (30) const_declaration -> ID . EQUAL constant SEMICOLON
    (31) const_declaration -> ID . COLON data_type_list EQUAL constant SEMICOLON

    EQUAL           shift and go to state 140
    COLON           shift and go to state 141


state 79

    (38) type_declaration_block -> TYPE type_list .
    (39) type_list -> type_list . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    BEGIN           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    LABEL           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONST           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    TYPE            reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    VAR             reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    PROCEDURE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    FUNCTION        reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    IMPLEMENTATION  reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    INTERFACE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    ID              shift and go to state 81

    type_declaration               shift and go to state 142

state 80

    (40) type_list -> type_declaration .

    ID              reduce using rule 40 (type_list -> type_declaration .)
    BEGIN           reduce using rule 40 (type_list -> type_declaration .)
    LABEL           reduce using rule 40 (type_list -> type_declaration .)
    CONST           reduce using rule 40 (type_list -> type_declaration .)
    TYPE            reduce using rule 40 (type_list -> type_declaration .)
    VAR             reduce using rule 40 (type_list -> type_declaration .)
    CONSTRUCTOR     reduce using rule 40 (type_list -> type_declaration .)
    DESTRUCTOR      reduce using rule 40 (type_list -> type_declaration .)
    PROCEDURE       reduce using rule 40 (type_list -> type_declaration .)
    FUNCTION        reduce using rule 40 (type_list -> type_declaration .)
    IMPLEMENTATION  reduce using rule 40 (type_list -> type_declaration .)
    INTERFACE       reduce using rule 40 (type_list -> type_declaration .)


state 81

    (41) type_declaration -> ID . EQUAL type_definition SEMICOLON

    EQUAL           shift and go to state 143


state 82

    (110) var_declaration_block -> VAR var_list .
    (111) var_list -> var_list . var_declaration
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    LABEL           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    CONST           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    TYPE            reduce using rule 110 (var_declaration_block -> VAR var_list .)
    VAR             reduce using rule 110 (var_declaration_block -> VAR var_list .)
    CONSTRUCTOR     reduce using rule 110 (var_declaration_block -> VAR var_list .)
    DESTRUCTOR      reduce using rule 110 (var_declaration_block -> VAR var_list .)
    PROCEDURE       reduce using rule 110 (var_declaration_block -> VAR var_list .)
    FUNCTION        reduce using rule 110 (var_declaration_block -> VAR var_list .)
    IMPLEMENTATION  reduce using rule 110 (var_declaration_block -> VAR var_list .)
    INTERFACE       reduce using rule 110 (var_declaration_block -> VAR var_list .)
    ID              shift and go to state 13

    var_declaration                shift and go to state 144
    id_list                        shift and go to state 84

state 83

    (112) var_list -> var_declaration .

    ID              reduce using rule 112 (var_list -> var_declaration .)
    BEGIN           reduce using rule 112 (var_list -> var_declaration .)
    LABEL           reduce using rule 112 (var_list -> var_declaration .)
    CONST           reduce using rule 112 (var_list -> var_declaration .)
    TYPE            reduce using rule 112 (var_list -> var_declaration .)
    VAR             reduce using rule 112 (var_list -> var_declaration .)
    CONSTRUCTOR     reduce using rule 112 (var_list -> var_declaration .)
    DESTRUCTOR      reduce using rule 112 (var_list -> var_declaration .)
    PROCEDURE       reduce using rule 112 (var_list -> var_declaration .)
    FUNCTION        reduce using rule 112 (var_list -> var_declaration .)
    IMPLEMENTATION  reduce using rule 112 (var_list -> var_declaration .)
    INTERFACE       reduce using rule 112 (var_list -> var_declaration .)


state 84

    (113) var_declaration -> id_list . COLON type_definition SEMICOLON
    (114) var_declaration -> id_list . COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> id_list . COLON type_definition ABSOLUTE ID SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 145
    COMMA           shift and go to state 44


state 85

    (116) procedure_declaration -> procedure_header SEMICOLON . directive SEMICOLON
    (117) procedure_declaration -> procedure_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152
    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    directive                      shift and go to state 146
    declaration_blocks             shift and go to state 147
    empty                          shift and go to state 11

state 86

    (125) function_declaration -> function_header SEMICOLON . directive
    (126) function_declaration -> function_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152
    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    directive                      shift and go to state 153
    declaration_blocks             shift and go to state 154
    empty                          shift and go to state 11

state 87

    (91) constructor_implementation -> CONSTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 155


state 88

    (92) destructor_implementation -> DESTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 156


state 89

    (93) method_implementation -> PROCEDURE ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (118) procedure_header -> PROCEDURE ID . parameters
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    DOT             shift and go to state 157
    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 158
    empty                          shift and go to state 160

state 90

    (94) method_implementation -> FUNCTION ID . DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (127) function_header -> FUNCTION ID . parameters COLON data_type_list
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    DOT             shift and go to state 161
    LPAREN          shift and go to state 159
    COLON           reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 162
    empty                          shift and go to state 160

state 91

    (23) implementation_block -> IMPLEMENTATION declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONST           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! TYPE            [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! VAR             [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 92

    (22) interface_block -> INTERFACE declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONST           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! TYPE            [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! VAR             [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 93

    (7) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 7 (id_list -> id_list COMMA ID .)


state 94

    (167) compound_statement -> BEGIN sentences_list END .

    DOT             reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)
    SEMICOLON       reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)
    ELSE            reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)


state 95

    (168) sentences_list -> sentences_list sentence . SEMICOLON

    SEMICOLON       shift and go to state 163


state 96

    (183) sentence -> empty .

    SEMICOLON       reduce using rule 183 (sentence -> empty .)
    ELSE            reduce using rule 183 (sentence -> empty .)


state 97

    (169) sentences_list -> sentence SEMICOLON .

    END             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    ID              reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    NEW             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    BEGIN           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    IF              reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    CASE            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    FOR             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    WHILE           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    REPEAT          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    WITH            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    GOTO            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    NUMBER          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    ASM             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    LPAREN          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    SEMICOLON       reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    UNTIL           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)


state 98

    (185) assignment -> variable ASIGNATION . expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    variable                       shift and go to state 118
    expression                     shift and go to state 164
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 99

    (190) procedure_call -> variable DOT . ID LPAREN expression_list RPAREN
    (191) procedure_call -> variable DOT . ID LPAREN RPAREN
    (260) variable -> variable DOT . ID

    ID              shift and go to state 165


state 100

    (261) variable -> variable LBRACKET . expression_list RBRACKET
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    variable                       shift and go to state 118
    expression_list                shift and go to state 166
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 101

    (262) variable -> variable CARET .

    ASIGNATION      reduce using rule 262 (variable -> variable CARET .)
    DOT             reduce using rule 262 (variable -> variable CARET .)
    LBRACKET        reduce using rule 262 (variable -> variable CARET .)
    CARET           reduce using rule 262 (variable -> variable CARET .)
    RPAREN          reduce using rule 262 (variable -> variable CARET .)
    TIMES           reduce using rule 262 (variable -> variable CARET .)
    DIVIDE          reduce using rule 262 (variable -> variable CARET .)
    DIV             reduce using rule 262 (variable -> variable CARET .)
    MOD             reduce using rule 262 (variable -> variable CARET .)
    SHL             reduce using rule 262 (variable -> variable CARET .)
    SHR             reduce using rule 262 (variable -> variable CARET .)
    PLUS            reduce using rule 262 (variable -> variable CARET .)
    MINUS           reduce using rule 262 (variable -> variable CARET .)
    EQUAL           reduce using rule 262 (variable -> variable CARET .)
    DISTINT         reduce using rule 262 (variable -> variable CARET .)
    LESS            reduce using rule 262 (variable -> variable CARET .)
    LESSEQUAL       reduce using rule 262 (variable -> variable CARET .)
    GREATER         reduce using rule 262 (variable -> variable CARET .)
    GREATEREQUAL    reduce using rule 262 (variable -> variable CARET .)
    IN              reduce using rule 262 (variable -> variable CARET .)
    AND             reduce using rule 262 (variable -> variable CARET .)
    THEN            reduce using rule 262 (variable -> variable CARET .)
    OR              reduce using rule 262 (variable -> variable CARET .)
    XOR             reduce using rule 262 (variable -> variable CARET .)
    OF              reduce using rule 262 (variable -> variable CARET .)
    DO              reduce using rule 262 (variable -> variable CARET .)
    COMMA           reduce using rule 262 (variable -> variable CARET .)
    SEMICOLON       reduce using rule 262 (variable -> variable CARET .)
    ELSE            reduce using rule 262 (variable -> variable CARET .)
    RBRACKET        reduce using rule 262 (variable -> variable CARET .)
    DOBLEDOT        reduce using rule 262 (variable -> variable CARET .)
    TO              reduce using rule 262 (variable -> variable CARET .)
    DOWNTO          reduce using rule 262 (variable -> variable CARET .)


state 102

    (186) assignment -> ID ASIGNATION . expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 168
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 103

    (188) procedure_call -> ID LPAREN . expression_list RPAREN
    (189) procedure_call -> ID LPAREN . RPAREN
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 170
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression_list                shift and go to state 169
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 104

    (263) variable -> LPAREN variable . RPAREN CARET
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET

    RPAREN          shift and go to state 171
    DOT             shift and go to state 172
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101


state 105

    (259) variable -> ID .

    RPAREN          reduce using rule 259 (variable -> ID .)
    DOT             reduce using rule 259 (variable -> ID .)
    LBRACKET        reduce using rule 259 (variable -> ID .)
    CARET           reduce using rule 259 (variable -> ID .)
    DO              reduce using rule 259 (variable -> ID .)
    COMMA           reduce using rule 259 (variable -> ID .)


state 106

    (192) procedure_call -> NEW LPAREN . expression_list RPAREN
    (193) procedure_call -> NEW LPAREN . RPAREN
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 174
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression_list                shift and go to state 173
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 107

    (194) if_statement -> IF expression . THEN sentence
    (195) if_statement -> IF expression . THEN sentence ELSE sentence
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    THEN            shift and go to state 175
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 108

    (217) expression -> simple_expression .
    (218) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 217 (expression -> simple_expression .)
    OR              reduce using rule 217 (expression -> simple_expression .)
    XOR             reduce using rule 217 (expression -> simple_expression .)
    OF              reduce using rule 217 (expression -> simple_expression .)
    DO              reduce using rule 217 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 217 (expression -> simple_expression .)
    ELSE            reduce using rule 217 (expression -> simple_expression .)
    RBRACKET        reduce using rule 217 (expression -> simple_expression .)
    COMMA           reduce using rule 217 (expression -> simple_expression .)
    RPAREN          reduce using rule 217 (expression -> simple_expression .)
    DOBLEDOT        reduce using rule 217 (expression -> simple_expression .)
    TO              reduce using rule 217 (expression -> simple_expression .)
    DOWNTO          reduce using rule 217 (expression -> simple_expression .)
    AND             shift and go to state 178


state 109

    (219) simple_expression -> relational_expression .
    (220) relational_expression -> relational_expression . relational_operator additive_expression
    (222) relational_operator -> . EQUAL
    (223) relational_operator -> . DISTINT
    (224) relational_operator -> . LESS
    (225) relational_operator -> . LESSEQUAL
    (226) relational_operator -> . GREATER
    (227) relational_operator -> . GREATEREQUAL
    (228) relational_operator -> . IN

    AND             reduce using rule 219 (simple_expression -> relational_expression .)
    THEN            reduce using rule 219 (simple_expression -> relational_expression .)
    OR              reduce using rule 219 (simple_expression -> relational_expression .)
    XOR             reduce using rule 219 (simple_expression -> relational_expression .)
    OF              reduce using rule 219 (simple_expression -> relational_expression .)
    DO              reduce using rule 219 (simple_expression -> relational_expression .)
    SEMICOLON       reduce using rule 219 (simple_expression -> relational_expression .)
    ELSE            reduce using rule 219 (simple_expression -> relational_expression .)
    RBRACKET        reduce using rule 219 (simple_expression -> relational_expression .)
    COMMA           reduce using rule 219 (simple_expression -> relational_expression .)
    RPAREN          reduce using rule 219 (simple_expression -> relational_expression .)
    DOBLEDOT        reduce using rule 219 (simple_expression -> relational_expression .)
    TO              reduce using rule 219 (simple_expression -> relational_expression .)
    DOWNTO          reduce using rule 219 (simple_expression -> relational_expression .)
    EQUAL           shift and go to state 180
    DISTINT         shift and go to state 181
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    GREATER         shift and go to state 184
    GREATEREQUAL    shift and go to state 185
    IN              shift and go to state 186

    relational_operator            shift and go to state 179

state 110

    (221) relational_expression -> additive_expression .
    (229) additive_expression -> additive_expression . PLUS multiplicative_expression
    (230) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 221 (relational_expression -> additive_expression .)
    DISTINT         reduce using rule 221 (relational_expression -> additive_expression .)
    LESS            reduce using rule 221 (relational_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 221 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 221 (relational_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 221 (relational_expression -> additive_expression .)
    IN              reduce using rule 221 (relational_expression -> additive_expression .)
    AND             reduce using rule 221 (relational_expression -> additive_expression .)
    THEN            reduce using rule 221 (relational_expression -> additive_expression .)
    OR              reduce using rule 221 (relational_expression -> additive_expression .)
    XOR             reduce using rule 221 (relational_expression -> additive_expression .)
    OF              reduce using rule 221 (relational_expression -> additive_expression .)
    DO              reduce using rule 221 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 221 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 221 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 221 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 221 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 221 (relational_expression -> additive_expression .)
    DOBLEDOT        reduce using rule 221 (relational_expression -> additive_expression .)
    TO              reduce using rule 221 (relational_expression -> additive_expression .)
    DOWNTO          reduce using rule 221 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 187
    MINUS           shift and go to state 188


state 111

    (241) unary_expression -> PLUS . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 189
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 112

    (231) additive_expression -> multiplicative_expression .
    (232) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (233) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (234) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (235) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (236) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (237) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 231 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 231 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 231 (additive_expression -> multiplicative_expression .)
    DISTINT         reduce using rule 231 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 231 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 231 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 231 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 231 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 231 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 231 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 231 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 231 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 231 (additive_expression -> multiplicative_expression .)
    OF              reduce using rule 231 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 231 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 231 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 231 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 231 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 231 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 231 (additive_expression -> multiplicative_expression .)
    DOBLEDOT        reduce using rule 231 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 231 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 231 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    DIV             shift and go to state 192
    MOD             shift and go to state 193
    SHL             shift and go to state 194
    SHR             shift and go to state 195


state 113

    (240) unary_expression -> MINUS . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 196
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 114

    (238) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 238 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 238 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DISTINT         reduce using rule 238 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 238 (multiplicative_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 238 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 238 (multiplicative_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 238 (multiplicative_expression -> unary_expression .)
    IN              reduce using rule 238 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    THEN            reduce using rule 238 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 238 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 238 (multiplicative_expression -> unary_expression .)
    OF              reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DO              reduce using rule 238 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 238 (multiplicative_expression -> unary_expression .)
    ELSE            reduce using rule 238 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 238 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 238 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DOBLEDOT        reduce using rule 238 (multiplicative_expression -> unary_expression .)
    TO              reduce using rule 238 (multiplicative_expression -> unary_expression .)
    DOWNTO          reduce using rule 238 (multiplicative_expression -> unary_expression .)


state 115

    (239) unary_expression -> NOT . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 197
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 116

    (242) unary_expression -> ADDRESS_OF . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 198
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 117

    (243) unary_expression -> primary_expression .

    TIMES           reduce using rule 243 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 243 (unary_expression -> primary_expression .)
    DIV             reduce using rule 243 (unary_expression -> primary_expression .)
    MOD             reduce using rule 243 (unary_expression -> primary_expression .)
    SHL             reduce using rule 243 (unary_expression -> primary_expression .)
    SHR             reduce using rule 243 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 243 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 243 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 243 (unary_expression -> primary_expression .)
    DISTINT         reduce using rule 243 (unary_expression -> primary_expression .)
    LESS            reduce using rule 243 (unary_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 243 (unary_expression -> primary_expression .)
    GREATER         reduce using rule 243 (unary_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 243 (unary_expression -> primary_expression .)
    IN              reduce using rule 243 (unary_expression -> primary_expression .)
    AND             reduce using rule 243 (unary_expression -> primary_expression .)
    THEN            reduce using rule 243 (unary_expression -> primary_expression .)
    OR              reduce using rule 243 (unary_expression -> primary_expression .)
    XOR             reduce using rule 243 (unary_expression -> primary_expression .)
    OF              reduce using rule 243 (unary_expression -> primary_expression .)
    DO              reduce using rule 243 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 243 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 243 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 243 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 243 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 243 (unary_expression -> primary_expression .)
    DOBLEDOT        reduce using rule 243 (unary_expression -> primary_expression .)
    TO              reduce using rule 243 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 243 (unary_expression -> primary_expression .)


state 118

    (244) primary_expression -> variable .
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET
    (266) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (267) function_call -> variable . DOT ID LPAREN RPAREN

    TIMES           reduce using rule 244 (primary_expression -> variable .)
    DIVIDE          reduce using rule 244 (primary_expression -> variable .)
    DIV             reduce using rule 244 (primary_expression -> variable .)
    MOD             reduce using rule 244 (primary_expression -> variable .)
    SHL             reduce using rule 244 (primary_expression -> variable .)
    SHR             reduce using rule 244 (primary_expression -> variable .)
    PLUS            reduce using rule 244 (primary_expression -> variable .)
    MINUS           reduce using rule 244 (primary_expression -> variable .)
    EQUAL           reduce using rule 244 (primary_expression -> variable .)
    DISTINT         reduce using rule 244 (primary_expression -> variable .)
    LESS            reduce using rule 244 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 244 (primary_expression -> variable .)
    GREATER         reduce using rule 244 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 244 (primary_expression -> variable .)
    IN              reduce using rule 244 (primary_expression -> variable .)
    AND             reduce using rule 244 (primary_expression -> variable .)
    THEN            reduce using rule 244 (primary_expression -> variable .)
    OR              reduce using rule 244 (primary_expression -> variable .)
    XOR             reduce using rule 244 (primary_expression -> variable .)
    OF              reduce using rule 244 (primary_expression -> variable .)
    DO              reduce using rule 244 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 244 (primary_expression -> variable .)
    ELSE            reduce using rule 244 (primary_expression -> variable .)
    RBRACKET        reduce using rule 244 (primary_expression -> variable .)
    COMMA           reduce using rule 244 (primary_expression -> variable .)
    RPAREN          reduce using rule 244 (primary_expression -> variable .)
    DOBLEDOT        reduce using rule 244 (primary_expression -> variable .)
    TO              reduce using rule 244 (primary_expression -> variable .)
    DOWNTO          reduce using rule 244 (primary_expression -> variable .)
    DOT             shift and go to state 199
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101


state 119

    (245) primary_expression -> NUMBER .

    TIMES           reduce using rule 245 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 245 (primary_expression -> NUMBER .)
    DIV             reduce using rule 245 (primary_expression -> NUMBER .)
    MOD             reduce using rule 245 (primary_expression -> NUMBER .)
    SHL             reduce using rule 245 (primary_expression -> NUMBER .)
    SHR             reduce using rule 245 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 245 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 245 (primary_expression -> NUMBER .)
    EQUAL           reduce using rule 245 (primary_expression -> NUMBER .)
    DISTINT         reduce using rule 245 (primary_expression -> NUMBER .)
    LESS            reduce using rule 245 (primary_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 245 (primary_expression -> NUMBER .)
    GREATER         reduce using rule 245 (primary_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 245 (primary_expression -> NUMBER .)
    IN              reduce using rule 245 (primary_expression -> NUMBER .)
    AND             reduce using rule 245 (primary_expression -> NUMBER .)
    THEN            reduce using rule 245 (primary_expression -> NUMBER .)
    OR              reduce using rule 245 (primary_expression -> NUMBER .)
    XOR             reduce using rule 245 (primary_expression -> NUMBER .)
    OF              reduce using rule 245 (primary_expression -> NUMBER .)
    DO              reduce using rule 245 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 245 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 245 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 245 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 245 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 245 (primary_expression -> NUMBER .)
    DOBLEDOT        reduce using rule 245 (primary_expression -> NUMBER .)
    TO              reduce using rule 245 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 245 (primary_expression -> NUMBER .)


state 120

    (246) primary_expression -> STRING .

    TIMES           reduce using rule 246 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 246 (primary_expression -> STRING .)
    DIV             reduce using rule 246 (primary_expression -> STRING .)
    MOD             reduce using rule 246 (primary_expression -> STRING .)
    SHL             reduce using rule 246 (primary_expression -> STRING .)
    SHR             reduce using rule 246 (primary_expression -> STRING .)
    PLUS            reduce using rule 246 (primary_expression -> STRING .)
    MINUS           reduce using rule 246 (primary_expression -> STRING .)
    EQUAL           reduce using rule 246 (primary_expression -> STRING .)
    DISTINT         reduce using rule 246 (primary_expression -> STRING .)
    LESS            reduce using rule 246 (primary_expression -> STRING .)
    LESSEQUAL       reduce using rule 246 (primary_expression -> STRING .)
    GREATER         reduce using rule 246 (primary_expression -> STRING .)
    GREATEREQUAL    reduce using rule 246 (primary_expression -> STRING .)
    IN              reduce using rule 246 (primary_expression -> STRING .)
    AND             reduce using rule 246 (primary_expression -> STRING .)
    THEN            reduce using rule 246 (primary_expression -> STRING .)
    OR              reduce using rule 246 (primary_expression -> STRING .)
    XOR             reduce using rule 246 (primary_expression -> STRING .)
    OF              reduce using rule 246 (primary_expression -> STRING .)
    DO              reduce using rule 246 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 246 (primary_expression -> STRING .)
    ELSE            reduce using rule 246 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 246 (primary_expression -> STRING .)
    COMMA           reduce using rule 246 (primary_expression -> STRING .)
    RPAREN          reduce using rule 246 (primary_expression -> STRING .)
    DOBLEDOT        reduce using rule 246 (primary_expression -> STRING .)
    TO              reduce using rule 246 (primary_expression -> STRING .)
    DOWNTO          reduce using rule 246 (primary_expression -> STRING .)


state 121

    (247) primary_expression -> TRUE .

    TIMES           reduce using rule 247 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 247 (primary_expression -> TRUE .)
    DIV             reduce using rule 247 (primary_expression -> TRUE .)
    MOD             reduce using rule 247 (primary_expression -> TRUE .)
    SHL             reduce using rule 247 (primary_expression -> TRUE .)
    SHR             reduce using rule 247 (primary_expression -> TRUE .)
    PLUS            reduce using rule 247 (primary_expression -> TRUE .)
    MINUS           reduce using rule 247 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 247 (primary_expression -> TRUE .)
    DISTINT         reduce using rule 247 (primary_expression -> TRUE .)
    LESS            reduce using rule 247 (primary_expression -> TRUE .)
    LESSEQUAL       reduce using rule 247 (primary_expression -> TRUE .)
    GREATER         reduce using rule 247 (primary_expression -> TRUE .)
    GREATEREQUAL    reduce using rule 247 (primary_expression -> TRUE .)
    IN              reduce using rule 247 (primary_expression -> TRUE .)
    AND             reduce using rule 247 (primary_expression -> TRUE .)
    THEN            reduce using rule 247 (primary_expression -> TRUE .)
    OR              reduce using rule 247 (primary_expression -> TRUE .)
    XOR             reduce using rule 247 (primary_expression -> TRUE .)
    OF              reduce using rule 247 (primary_expression -> TRUE .)
    DO              reduce using rule 247 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 247 (primary_expression -> TRUE .)
    ELSE            reduce using rule 247 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 247 (primary_expression -> TRUE .)
    COMMA           reduce using rule 247 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 247 (primary_expression -> TRUE .)
    DOBLEDOT        reduce using rule 247 (primary_expression -> TRUE .)
    TO              reduce using rule 247 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 247 (primary_expression -> TRUE .)


state 122

    (248) primary_expression -> FALSE .

    TIMES           reduce using rule 248 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 248 (primary_expression -> FALSE .)
    DIV             reduce using rule 248 (primary_expression -> FALSE .)
    MOD             reduce using rule 248 (primary_expression -> FALSE .)
    SHL             reduce using rule 248 (primary_expression -> FALSE .)
    SHR             reduce using rule 248 (primary_expression -> FALSE .)
    PLUS            reduce using rule 248 (primary_expression -> FALSE .)
    MINUS           reduce using rule 248 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 248 (primary_expression -> FALSE .)
    DISTINT         reduce using rule 248 (primary_expression -> FALSE .)
    LESS            reduce using rule 248 (primary_expression -> FALSE .)
    LESSEQUAL       reduce using rule 248 (primary_expression -> FALSE .)
    GREATER         reduce using rule 248 (primary_expression -> FALSE .)
    GREATEREQUAL    reduce using rule 248 (primary_expression -> FALSE .)
    IN              reduce using rule 248 (primary_expression -> FALSE .)
    AND             reduce using rule 248 (primary_expression -> FALSE .)
    THEN            reduce using rule 248 (primary_expression -> FALSE .)
    OR              reduce using rule 248 (primary_expression -> FALSE .)
    XOR             reduce using rule 248 (primary_expression -> FALSE .)
    OF              reduce using rule 248 (primary_expression -> FALSE .)
    DO              reduce using rule 248 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 248 (primary_expression -> FALSE .)
    ELSE            reduce using rule 248 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 248 (primary_expression -> FALSE .)
    COMMA           reduce using rule 248 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 248 (primary_expression -> FALSE .)
    DOBLEDOT        reduce using rule 248 (primary_expression -> FALSE .)
    TO              reduce using rule 248 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 248 (primary_expression -> FALSE .)


state 123

    (249) primary_expression -> NIL .

    TIMES           reduce using rule 249 (primary_expression -> NIL .)
    DIVIDE          reduce using rule 249 (primary_expression -> NIL .)
    DIV             reduce using rule 249 (primary_expression -> NIL .)
    MOD             reduce using rule 249 (primary_expression -> NIL .)
    SHL             reduce using rule 249 (primary_expression -> NIL .)
    SHR             reduce using rule 249 (primary_expression -> NIL .)
    PLUS            reduce using rule 249 (primary_expression -> NIL .)
    MINUS           reduce using rule 249 (primary_expression -> NIL .)
    EQUAL           reduce using rule 249 (primary_expression -> NIL .)
    DISTINT         reduce using rule 249 (primary_expression -> NIL .)
    LESS            reduce using rule 249 (primary_expression -> NIL .)
    LESSEQUAL       reduce using rule 249 (primary_expression -> NIL .)
    GREATER         reduce using rule 249 (primary_expression -> NIL .)
    GREATEREQUAL    reduce using rule 249 (primary_expression -> NIL .)
    IN              reduce using rule 249 (primary_expression -> NIL .)
    AND             reduce using rule 249 (primary_expression -> NIL .)
    THEN            reduce using rule 249 (primary_expression -> NIL .)
    OR              reduce using rule 249 (primary_expression -> NIL .)
    XOR             reduce using rule 249 (primary_expression -> NIL .)
    OF              reduce using rule 249 (primary_expression -> NIL .)
    DO              reduce using rule 249 (primary_expression -> NIL .)
    SEMICOLON       reduce using rule 249 (primary_expression -> NIL .)
    ELSE            reduce using rule 249 (primary_expression -> NIL .)
    RBRACKET        reduce using rule 249 (primary_expression -> NIL .)
    COMMA           reduce using rule 249 (primary_expression -> NIL .)
    RPAREN          reduce using rule 249 (primary_expression -> NIL .)
    DOBLEDOT        reduce using rule 249 (primary_expression -> NIL .)
    TO              reduce using rule 249 (primary_expression -> NIL .)
    DOWNTO          reduce using rule 249 (primary_expression -> NIL .)


state 124

    (250) primary_expression -> LPAREN . expression RPAREN
    (263) variable -> LPAREN . variable RPAREN CARET
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 127
    LPAREN          shift and go to state 200
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 201
    variable                       shift and go to state 202
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 125

    (251) primary_expression -> function_call .

    TIMES           reduce using rule 251 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 251 (primary_expression -> function_call .)
    DIV             reduce using rule 251 (primary_expression -> function_call .)
    MOD             reduce using rule 251 (primary_expression -> function_call .)
    SHL             reduce using rule 251 (primary_expression -> function_call .)
    SHR             reduce using rule 251 (primary_expression -> function_call .)
    PLUS            reduce using rule 251 (primary_expression -> function_call .)
    MINUS           reduce using rule 251 (primary_expression -> function_call .)
    EQUAL           reduce using rule 251 (primary_expression -> function_call .)
    DISTINT         reduce using rule 251 (primary_expression -> function_call .)
    LESS            reduce using rule 251 (primary_expression -> function_call .)
    LESSEQUAL       reduce using rule 251 (primary_expression -> function_call .)
    GREATER         reduce using rule 251 (primary_expression -> function_call .)
    GREATEREQUAL    reduce using rule 251 (primary_expression -> function_call .)
    IN              reduce using rule 251 (primary_expression -> function_call .)
    AND             reduce using rule 251 (primary_expression -> function_call .)
    THEN            reduce using rule 251 (primary_expression -> function_call .)
    OR              reduce using rule 251 (primary_expression -> function_call .)
    XOR             reduce using rule 251 (primary_expression -> function_call .)
    OF              reduce using rule 251 (primary_expression -> function_call .)
    DO              reduce using rule 251 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 251 (primary_expression -> function_call .)
    ELSE            reduce using rule 251 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 251 (primary_expression -> function_call .)
    COMMA           reduce using rule 251 (primary_expression -> function_call .)
    RPAREN          reduce using rule 251 (primary_expression -> function_call .)
    DOBLEDOT        reduce using rule 251 (primary_expression -> function_call .)
    TO              reduce using rule 251 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 251 (primary_expression -> function_call .)


state 126

    (252) primary_expression -> set_constructor .

    TIMES           reduce using rule 252 (primary_expression -> set_constructor .)
    DIVIDE          reduce using rule 252 (primary_expression -> set_constructor .)
    DIV             reduce using rule 252 (primary_expression -> set_constructor .)
    MOD             reduce using rule 252 (primary_expression -> set_constructor .)
    SHL             reduce using rule 252 (primary_expression -> set_constructor .)
    SHR             reduce using rule 252 (primary_expression -> set_constructor .)
    PLUS            reduce using rule 252 (primary_expression -> set_constructor .)
    MINUS           reduce using rule 252 (primary_expression -> set_constructor .)
    EQUAL           reduce using rule 252 (primary_expression -> set_constructor .)
    DISTINT         reduce using rule 252 (primary_expression -> set_constructor .)
    LESS            reduce using rule 252 (primary_expression -> set_constructor .)
    LESSEQUAL       reduce using rule 252 (primary_expression -> set_constructor .)
    GREATER         reduce using rule 252 (primary_expression -> set_constructor .)
    GREATEREQUAL    reduce using rule 252 (primary_expression -> set_constructor .)
    IN              reduce using rule 252 (primary_expression -> set_constructor .)
    AND             reduce using rule 252 (primary_expression -> set_constructor .)
    THEN            reduce using rule 252 (primary_expression -> set_constructor .)
    OR              reduce using rule 252 (primary_expression -> set_constructor .)
    XOR             reduce using rule 252 (primary_expression -> set_constructor .)
    OF              reduce using rule 252 (primary_expression -> set_constructor .)
    DO              reduce using rule 252 (primary_expression -> set_constructor .)
    SEMICOLON       reduce using rule 252 (primary_expression -> set_constructor .)
    ELSE            reduce using rule 252 (primary_expression -> set_constructor .)
    RBRACKET        reduce using rule 252 (primary_expression -> set_constructor .)
    COMMA           reduce using rule 252 (primary_expression -> set_constructor .)
    RPAREN          reduce using rule 252 (primary_expression -> set_constructor .)
    DOBLEDOT        reduce using rule 252 (primary_expression -> set_constructor .)
    TO              reduce using rule 252 (primary_expression -> set_constructor .)
    DOWNTO          reduce using rule 252 (primary_expression -> set_constructor .)


state 127

    (259) variable -> ID .
    (264) function_call -> ID . LPAREN expression_list RPAREN
    (265) function_call -> ID . LPAREN RPAREN

    DOT             reduce using rule 259 (variable -> ID .)
    LBRACKET        reduce using rule 259 (variable -> ID .)
    CARET           reduce using rule 259 (variable -> ID .)
    TIMES           reduce using rule 259 (variable -> ID .)
    DIVIDE          reduce using rule 259 (variable -> ID .)
    DIV             reduce using rule 259 (variable -> ID .)
    MOD             reduce using rule 259 (variable -> ID .)
    SHL             reduce using rule 259 (variable -> ID .)
    SHR             reduce using rule 259 (variable -> ID .)
    PLUS            reduce using rule 259 (variable -> ID .)
    MINUS           reduce using rule 259 (variable -> ID .)
    EQUAL           reduce using rule 259 (variable -> ID .)
    DISTINT         reduce using rule 259 (variable -> ID .)
    LESS            reduce using rule 259 (variable -> ID .)
    LESSEQUAL       reduce using rule 259 (variable -> ID .)
    GREATER         reduce using rule 259 (variable -> ID .)
    GREATEREQUAL    reduce using rule 259 (variable -> ID .)
    IN              reduce using rule 259 (variable -> ID .)
    AND             reduce using rule 259 (variable -> ID .)
    THEN            reduce using rule 259 (variable -> ID .)
    OR              reduce using rule 259 (variable -> ID .)
    XOR             reduce using rule 259 (variable -> ID .)
    OF              reduce using rule 259 (variable -> ID .)
    DO              reduce using rule 259 (variable -> ID .)
    SEMICOLON       reduce using rule 259 (variable -> ID .)
    ELSE            reduce using rule 259 (variable -> ID .)
    RBRACKET        reduce using rule 259 (variable -> ID .)
    COMMA           reduce using rule 259 (variable -> ID .)
    RPAREN          reduce using rule 259 (variable -> ID .)
    DOBLEDOT        reduce using rule 259 (variable -> ID .)
    TO              reduce using rule 259 (variable -> ID .)
    DOWNTO          reduce using rule 259 (variable -> ID .)
    LPAREN          shift and go to state 203


state 128

    (257) set_constructor -> LBRACKET . set_item_list RBRACKET
    (258) set_constructor -> LBRACKET . RBRACKET
    (255) set_item_list -> . set_item
    (256) set_item_list -> . set_item_list COMMA set_item
    (253) set_item -> . expression
    (254) set_item -> . expression DOBLEDOT expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 205
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    set_item_list                  shift and go to state 204
    set_item                       shift and go to state 206
    expression                     shift and go to state 207
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 129

    (196) case_statement -> CASE expression . OF case_list END
    (197) case_statement -> CASE expression . OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> CASE expression . OF case_list ELSE sentences_list END
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    OF              shift and go to state 208
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 130

    (205) for_statement -> FOR ID . ASIGNATION expression TO expression DO sentence
    (206) for_statement -> FOR ID . ASIGNATION expression DOWNTO expression DO sentence

    ASIGNATION      shift and go to state 209


state 131

    (207) while_statement -> WHILE expression . DO sentence
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    DO              shift and go to state 210
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 132

    (208) repeat_statement -> REPEAT sentences_list . UNTIL expression
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    UNTIL           shift and go to state 211
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 95
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 133

    (209) with_statement -> WITH variable_list . DO sentence
    (211) variable_list -> variable_list . COMMA variable

    DO              shift and go to state 212
    COMMA           shift and go to state 213


state 134

    (210) variable_list -> variable .
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET

    DO              reduce using rule 210 (variable_list -> variable .)
    COMMA           reduce using rule 210 (variable_list -> variable .)
    DOT             shift and go to state 172
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101


state 135

    (212) goto_statement -> GOTO NUMBER .

    SEMICOLON       reduce using rule 212 (goto_statement -> GOTO NUMBER .)
    ELSE            reduce using rule 212 (goto_statement -> GOTO NUMBER .)


state 136

    (213) labeled_sentence -> NUMBER COLON . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 214
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 137

    (24) label_declaration -> LABEL number_list SEMICOLON .

    BEGIN           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    LABEL           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONST           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    TYPE            reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    VAR             reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    PROCEDURE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    FUNCTION        reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    INTERFACE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)


state 138

    (26) number_list -> number_list COMMA . NUMBER

    NUMBER          shift and go to state 215


state 139

    (28) const_list -> const_list const_declaration .

    ID              reduce using rule 28 (const_list -> const_list const_declaration .)
    BEGIN           reduce using rule 28 (const_list -> const_list const_declaration .)
    LABEL           reduce using rule 28 (const_list -> const_list const_declaration .)
    CONST           reduce using rule 28 (const_list -> const_list const_declaration .)
    TYPE            reduce using rule 28 (const_list -> const_list const_declaration .)
    VAR             reduce using rule 28 (const_list -> const_list const_declaration .)
    CONSTRUCTOR     reduce using rule 28 (const_list -> const_list const_declaration .)
    DESTRUCTOR      reduce using rule 28 (const_list -> const_list const_declaration .)
    PROCEDURE       reduce using rule 28 (const_list -> const_list const_declaration .)
    FUNCTION        reduce using rule 28 (const_list -> const_list const_declaration .)
    IMPLEMENTATION  reduce using rule 28 (const_list -> const_list const_declaration .)
    INTERFACE       reduce using rule 28 (const_list -> const_list const_declaration .)


state 140

    (30) const_declaration -> ID EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    constant                       shift and go to state 216

state 141

    (31) const_declaration -> ID COLON . data_type_list EQUAL constant SEMICOLON
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 224
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 142

    (39) type_list -> type_list type_declaration .

    ID              reduce using rule 39 (type_list -> type_list type_declaration .)
    BEGIN           reduce using rule 39 (type_list -> type_list type_declaration .)
    LABEL           reduce using rule 39 (type_list -> type_list type_declaration .)
    CONST           reduce using rule 39 (type_list -> type_list type_declaration .)
    TYPE            reduce using rule 39 (type_list -> type_list type_declaration .)
    VAR             reduce using rule 39 (type_list -> type_list type_declaration .)
    CONSTRUCTOR     reduce using rule 39 (type_list -> type_list type_declaration .)
    DESTRUCTOR      reduce using rule 39 (type_list -> type_list type_declaration .)
    PROCEDURE       reduce using rule 39 (type_list -> type_list type_declaration .)
    FUNCTION        reduce using rule 39 (type_list -> type_list type_declaration .)
    IMPLEMENTATION  reduce using rule 39 (type_list -> type_list type_declaration .)
    INTERFACE       reduce using rule 39 (type_list -> type_list type_declaration .)


state 143

    (41) type_declaration -> ID EQUAL . type_definition SEMICOLON
    (42) type_definition -> . data_type_list
    (43) type_definition -> . LPAREN id_list RPAREN
    (44) type_definition -> . NUMBER DOBLEDOT NUMBER
    (45) type_definition -> . CHAR DOBLEDOT CHAR
    (46) type_definition -> . ID DOBLEDOT ID
    (47) type_definition -> . record_type
    (48) type_definition -> . array_type
    (49) type_definition -> . set_type
    (50) type_definition -> . pointer_type
    (51) type_definition -> . file_type
    (52) type_definition -> . object_type
    (53) type_definition -> . string_type
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (69) set_type -> . SET OF set_range
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 256
    NUMBER          shift and go to state 257
    CHAR            shift and go to state 258
    ID              shift and go to state 253
    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    STRING          shift and go to state 237
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    RECORD          shift and go to state 250
    PACKED          shift and go to state 266
    ARRAY           shift and go to state 247
    SET             shift and go to state 251
    CARET           shift and go to state 249
    OBJECT          shift and go to state 252

    type_definition                shift and go to state 254
    data_type_list                 shift and go to state 255
    record_type                    shift and go to state 259
    array_type                     shift and go to state 260
    set_type                       shift and go to state 261
    pointer_type                   shift and go to state 262
    file_type                      shift and go to state 263
    object_type                    shift and go to state 264
    string_type                    shift and go to state 265

state 144

    (111) var_list -> var_list var_declaration .

    ID              reduce using rule 111 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 111 (var_list -> var_list var_declaration .)
    LABEL           reduce using rule 111 (var_list -> var_list var_declaration .)
    CONST           reduce using rule 111 (var_list -> var_list var_declaration .)
    TYPE            reduce using rule 111 (var_list -> var_list var_declaration .)
    VAR             reduce using rule 111 (var_list -> var_list var_declaration .)
    CONSTRUCTOR     reduce using rule 111 (var_list -> var_list var_declaration .)
    DESTRUCTOR      reduce using rule 111 (var_list -> var_list var_declaration .)
    PROCEDURE       reduce using rule 111 (var_list -> var_list var_declaration .)
    FUNCTION        reduce using rule 111 (var_list -> var_list var_declaration .)
    IMPLEMENTATION  reduce using rule 111 (var_list -> var_list var_declaration .)
    INTERFACE       reduce using rule 111 (var_list -> var_list var_declaration .)


state 145

    (113) var_declaration -> id_list COLON . type_definition SEMICOLON
    (114) var_declaration -> id_list COLON . type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> id_list COLON . type_definition ABSOLUTE ID SEMICOLON
    (42) type_definition -> . data_type_list
    (43) type_definition -> . LPAREN id_list RPAREN
    (44) type_definition -> . NUMBER DOBLEDOT NUMBER
    (45) type_definition -> . CHAR DOBLEDOT CHAR
    (46) type_definition -> . ID DOBLEDOT ID
    (47) type_definition -> . record_type
    (48) type_definition -> . array_type
    (49) type_definition -> . set_type
    (50) type_definition -> . pointer_type
    (51) type_definition -> . file_type
    (52) type_definition -> . object_type
    (53) type_definition -> . string_type
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (69) set_type -> . SET OF set_range
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 256
    NUMBER          shift and go to state 257
    CHAR            shift and go to state 258
    ID              shift and go to state 253
    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    STRING          shift and go to state 237
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    RECORD          shift and go to state 250
    PACKED          shift and go to state 266
    ARRAY           shift and go to state 247
    SET             shift and go to state 251
    CARET           shift and go to state 249
    OBJECT          shift and go to state 252

    type_definition                shift and go to state 267
    data_type_list                 shift and go to state 255
    record_type                    shift and go to state 259
    array_type                     shift and go to state 260
    set_type                       shift and go to state 261
    pointer_type                   shift and go to state 262
    file_type                      shift and go to state 263
    object_type                    shift and go to state 264
    string_type                    shift and go to state 265

state 146

    (116) procedure_declaration -> procedure_header SEMICOLON directive . SEMICOLON

    SEMICOLON       shift and go to state 268


state 147

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    procedure_header               shift and go to state 35
    compound_statement             shift and go to state 269
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    function_header                shift and go to state 36

state 148

    (119) directive -> FORWARD .

    SEMICOLON       reduce using rule 119 (directive -> FORWARD .)
    BEGIN           reduce using rule 119 (directive -> FORWARD .)
    LABEL           reduce using rule 119 (directive -> FORWARD .)
    CONST           reduce using rule 119 (directive -> FORWARD .)
    TYPE            reduce using rule 119 (directive -> FORWARD .)
    VAR             reduce using rule 119 (directive -> FORWARD .)
    CONSTRUCTOR     reduce using rule 119 (directive -> FORWARD .)
    DESTRUCTOR      reduce using rule 119 (directive -> FORWARD .)
    PROCEDURE       reduce using rule 119 (directive -> FORWARD .)
    FUNCTION        reduce using rule 119 (directive -> FORWARD .)
    IMPLEMENTATION  reduce using rule 119 (directive -> FORWARD .)
    INTERFACE       reduce using rule 119 (directive -> FORWARD .)
    END             reduce using rule 119 (directive -> FORWARD .)


state 149

    (120) directive -> EXTERNAL .
    (121) directive -> EXTERNAL . STRING

    SEMICOLON       reduce using rule 120 (directive -> EXTERNAL .)
    BEGIN           reduce using rule 120 (directive -> EXTERNAL .)
    LABEL           reduce using rule 120 (directive -> EXTERNAL .)
    CONST           reduce using rule 120 (directive -> EXTERNAL .)
    TYPE            reduce using rule 120 (directive -> EXTERNAL .)
    VAR             reduce using rule 120 (directive -> EXTERNAL .)
    CONSTRUCTOR     reduce using rule 120 (directive -> EXTERNAL .)
    DESTRUCTOR      reduce using rule 120 (directive -> EXTERNAL .)
    PROCEDURE       reduce using rule 120 (directive -> EXTERNAL .)
    FUNCTION        reduce using rule 120 (directive -> EXTERNAL .)
    IMPLEMENTATION  reduce using rule 120 (directive -> EXTERNAL .)
    INTERFACE       reduce using rule 120 (directive -> EXTERNAL .)
    END             reduce using rule 120 (directive -> EXTERNAL .)
    STRING          shift and go to state 270


state 150

    (122) directive -> ASM .

    SEMICOLON       reduce using rule 122 (directive -> ASM .)
    BEGIN           reduce using rule 122 (directive -> ASM .)
    LABEL           reduce using rule 122 (directive -> ASM .)
    CONST           reduce using rule 122 (directive -> ASM .)
    TYPE            reduce using rule 122 (directive -> ASM .)
    VAR             reduce using rule 122 (directive -> ASM .)
    CONSTRUCTOR     reduce using rule 122 (directive -> ASM .)
    DESTRUCTOR      reduce using rule 122 (directive -> ASM .)
    PROCEDURE       reduce using rule 122 (directive -> ASM .)
    FUNCTION        reduce using rule 122 (directive -> ASM .)
    IMPLEMENTATION  reduce using rule 122 (directive -> ASM .)
    INTERFACE       reduce using rule 122 (directive -> ASM .)
    END             reduce using rule 122 (directive -> ASM .)


state 151

    (123) directive -> INLINE .

    SEMICOLON       reduce using rule 123 (directive -> INLINE .)
    BEGIN           reduce using rule 123 (directive -> INLINE .)
    LABEL           reduce using rule 123 (directive -> INLINE .)
    CONST           reduce using rule 123 (directive -> INLINE .)
    TYPE            reduce using rule 123 (directive -> INLINE .)
    VAR             reduce using rule 123 (directive -> INLINE .)
    CONSTRUCTOR     reduce using rule 123 (directive -> INLINE .)
    DESTRUCTOR      reduce using rule 123 (directive -> INLINE .)
    PROCEDURE       reduce using rule 123 (directive -> INLINE .)
    FUNCTION        reduce using rule 123 (directive -> INLINE .)
    IMPLEMENTATION  reduce using rule 123 (directive -> INLINE .)
    INTERFACE       reduce using rule 123 (directive -> INLINE .)
    END             reduce using rule 123 (directive -> INLINE .)


state 152

    (124) directive -> VIRTUAL .

    SEMICOLON       reduce using rule 124 (directive -> VIRTUAL .)
    BEGIN           reduce using rule 124 (directive -> VIRTUAL .)
    LABEL           reduce using rule 124 (directive -> VIRTUAL .)
    CONST           reduce using rule 124 (directive -> VIRTUAL .)
    TYPE            reduce using rule 124 (directive -> VIRTUAL .)
    VAR             reduce using rule 124 (directive -> VIRTUAL .)
    CONSTRUCTOR     reduce using rule 124 (directive -> VIRTUAL .)
    DESTRUCTOR      reduce using rule 124 (directive -> VIRTUAL .)
    PROCEDURE       reduce using rule 124 (directive -> VIRTUAL .)
    FUNCTION        reduce using rule 124 (directive -> VIRTUAL .)
    IMPLEMENTATION  reduce using rule 124 (directive -> VIRTUAL .)
    INTERFACE       reduce using rule 124 (directive -> VIRTUAL .)
    END             reduce using rule 124 (directive -> VIRTUAL .)


state 153

    (125) function_declaration -> function_header SEMICOLON directive .

    BEGIN           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    LABEL           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    CONST           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    TYPE            reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    VAR             reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    INTERFACE       reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)


state 154

    (126) function_declaration -> function_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    function_header                shift and go to state 36
    compound_statement             shift and go to state 271
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35

state 155

    (91) constructor_implementation -> CONSTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 272


state 156

    (92) destructor_implementation -> DESTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 273


state 157

    (93) method_implementation -> PROCEDURE ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 274


state 158

    (118) procedure_header -> PROCEDURE ID parameters .

    SEMICOLON       reduce using rule 118 (procedure_header -> PROCEDURE ID parameters .)
    RPAREN          reduce using rule 118 (procedure_header -> PROCEDURE ID parameters .)


state 159

    (128) parameters -> LPAREN . parameter_list RPAREN
    (130) parameter_list -> . parameter_list SEMICOLON parameter_group
    (131) parameter_list -> . parameter_group
    (132) parameter_group -> . id_list COLON data_type_list
    (133) parameter_group -> . VAR id_list COLON data_type_list
    (134) parameter_group -> . CONST id_list COLON data_type_list
    (135) parameter_group -> . procedure_header
    (136) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 278
    CONST           shift and go to state 279
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 282
    FUNCTION        shift and go to state 283

    parameter_list                 shift and go to state 275
    parameter_group                shift and go to state 276
    id_list                        shift and go to state 277
    procedure_header               shift and go to state 280
    function_header                shift and go to state 281

state 160

    (129) parameters -> empty .

    SEMICOLON       reduce using rule 129 (parameters -> empty .)
    COLON           reduce using rule 129 (parameters -> empty .)
    RPAREN          reduce using rule 129 (parameters -> empty .)


state 161

    (94) method_implementation -> FUNCTION ID DOT . ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 284


state 162

    (127) function_header -> FUNCTION ID parameters . COLON data_type_list

    COLON           shift and go to state 285


state 163

    (168) sentences_list -> sentences_list sentence SEMICOLON .

    END             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    ID              reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    NEW             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    BEGIN           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    IF              reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    CASE            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    FOR             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    WHILE           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    REPEAT          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    WITH            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    GOTO            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    NUMBER          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    ASM             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    LPAREN          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    SEMICOLON       reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    UNTIL           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)


state 164

    (185) assignment -> variable ASIGNATION expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 185 (assignment -> variable ASIGNATION expression .)
    ELSE            reduce using rule 185 (assignment -> variable ASIGNATION expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 165

    (190) procedure_call -> variable DOT ID . LPAREN expression_list RPAREN
    (191) procedure_call -> variable DOT ID . LPAREN RPAREN
    (260) variable -> variable DOT ID .

    LPAREN          shift and go to state 286
    ASIGNATION      reduce using rule 260 (variable -> variable DOT ID .)
    DOT             reduce using rule 260 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 260 (variable -> variable DOT ID .)
    CARET           reduce using rule 260 (variable -> variable DOT ID .)


state 166

    (261) variable -> variable LBRACKET expression_list . RBRACKET
    (269) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 287
    COMMA           shift and go to state 288


state 167

    (268) expression_list -> expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 268 (expression_list -> expression .)
    COMMA           reduce using rule 268 (expression_list -> expression .)
    RPAREN          reduce using rule 268 (expression_list -> expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 168

    (186) assignment -> ID ASIGNATION expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 186 (assignment -> ID ASIGNATION expression .)
    ELSE            reduce using rule 186 (assignment -> ID ASIGNATION expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 169

    (188) procedure_call -> ID LPAREN expression_list . RPAREN
    (269) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 289
    COMMA           shift and go to state 288


state 170

    (189) procedure_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 189 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 189 (procedure_call -> ID LPAREN RPAREN .)


state 171

    (263) variable -> LPAREN variable RPAREN . CARET

    CARET           shift and go to state 290


state 172

    (260) variable -> variable DOT . ID

    ID              shift and go to state 291


state 173

    (192) procedure_call -> NEW LPAREN expression_list . RPAREN
    (269) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 292
    COMMA           shift and go to state 288


state 174

    (193) procedure_call -> NEW LPAREN RPAREN .

    SEMICOLON       reduce using rule 193 (procedure_call -> NEW LPAREN RPAREN .)
    ELSE            reduce using rule 193 (procedure_call -> NEW LPAREN RPAREN .)


state 175

    (194) if_statement -> IF expression THEN . sentence
    (195) if_statement -> IF expression THEN . sentence ELSE sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 293
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 176

    (215) expression -> expression OR . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    simple_expression              shift and go to state 294
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 177

    (216) expression -> expression XOR . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    simple_expression              shift and go to state 295
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 178

    (218) simple_expression -> simple_expression AND . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    relational_expression          shift and go to state 296
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 179

    (220) relational_expression -> relational_expression relational_operator . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    additive_expression            shift and go to state 297
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 180

    (222) relational_operator -> EQUAL .

    NOT             reduce using rule 222 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 222 (relational_operator -> EQUAL .)
    PLUS            reduce using rule 222 (relational_operator -> EQUAL .)
    ADDRESS_OF      reduce using rule 222 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 222 (relational_operator -> EQUAL .)
    STRING          reduce using rule 222 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 222 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 222 (relational_operator -> EQUAL .)
    NIL             reduce using rule 222 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 222 (relational_operator -> EQUAL .)
    ID              reduce using rule 222 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 222 (relational_operator -> EQUAL .)


state 181

    (223) relational_operator -> DISTINT .

    NOT             reduce using rule 223 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 223 (relational_operator -> DISTINT .)
    PLUS            reduce using rule 223 (relational_operator -> DISTINT .)
    ADDRESS_OF      reduce using rule 223 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 223 (relational_operator -> DISTINT .)
    STRING          reduce using rule 223 (relational_operator -> DISTINT .)
    TRUE            reduce using rule 223 (relational_operator -> DISTINT .)
    FALSE           reduce using rule 223 (relational_operator -> DISTINT .)
    NIL             reduce using rule 223 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 223 (relational_operator -> DISTINT .)
    ID              reduce using rule 223 (relational_operator -> DISTINT .)
    LBRACKET        reduce using rule 223 (relational_operator -> DISTINT .)


state 182

    (224) relational_operator -> LESS .

    NOT             reduce using rule 224 (relational_operator -> LESS .)
    MINUS           reduce using rule 224 (relational_operator -> LESS .)
    PLUS            reduce using rule 224 (relational_operator -> LESS .)
    ADDRESS_OF      reduce using rule 224 (relational_operator -> LESS .)
    NUMBER          reduce using rule 224 (relational_operator -> LESS .)
    STRING          reduce using rule 224 (relational_operator -> LESS .)
    TRUE            reduce using rule 224 (relational_operator -> LESS .)
    FALSE           reduce using rule 224 (relational_operator -> LESS .)
    NIL             reduce using rule 224 (relational_operator -> LESS .)
    LPAREN          reduce using rule 224 (relational_operator -> LESS .)
    ID              reduce using rule 224 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 224 (relational_operator -> LESS .)


state 183

    (225) relational_operator -> LESSEQUAL .

    NOT             reduce using rule 225 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 225 (relational_operator -> LESSEQUAL .)
    PLUS            reduce using rule 225 (relational_operator -> LESSEQUAL .)
    ADDRESS_OF      reduce using rule 225 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 225 (relational_operator -> LESSEQUAL .)
    STRING          reduce using rule 225 (relational_operator -> LESSEQUAL .)
    TRUE            reduce using rule 225 (relational_operator -> LESSEQUAL .)
    FALSE           reduce using rule 225 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 225 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 225 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 225 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 225 (relational_operator -> LESSEQUAL .)


state 184

    (226) relational_operator -> GREATER .

    NOT             reduce using rule 226 (relational_operator -> GREATER .)
    MINUS           reduce using rule 226 (relational_operator -> GREATER .)
    PLUS            reduce using rule 226 (relational_operator -> GREATER .)
    ADDRESS_OF      reduce using rule 226 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 226 (relational_operator -> GREATER .)
    STRING          reduce using rule 226 (relational_operator -> GREATER .)
    TRUE            reduce using rule 226 (relational_operator -> GREATER .)
    FALSE           reduce using rule 226 (relational_operator -> GREATER .)
    NIL             reduce using rule 226 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 226 (relational_operator -> GREATER .)
    ID              reduce using rule 226 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 226 (relational_operator -> GREATER .)


state 185

    (227) relational_operator -> GREATEREQUAL .

    NOT             reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    PLUS            reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    ADDRESS_OF      reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    STRING          reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    TRUE            reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    FALSE           reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 227 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 227 (relational_operator -> GREATEREQUAL .)


state 186

    (228) relational_operator -> IN .

    NOT             reduce using rule 228 (relational_operator -> IN .)
    MINUS           reduce using rule 228 (relational_operator -> IN .)
    PLUS            reduce using rule 228 (relational_operator -> IN .)
    ADDRESS_OF      reduce using rule 228 (relational_operator -> IN .)
    NUMBER          reduce using rule 228 (relational_operator -> IN .)
    STRING          reduce using rule 228 (relational_operator -> IN .)
    TRUE            reduce using rule 228 (relational_operator -> IN .)
    FALSE           reduce using rule 228 (relational_operator -> IN .)
    NIL             reduce using rule 228 (relational_operator -> IN .)
    LPAREN          reduce using rule 228 (relational_operator -> IN .)
    ID              reduce using rule 228 (relational_operator -> IN .)
    LBRACKET        reduce using rule 228 (relational_operator -> IN .)


state 187

    (229) additive_expression -> additive_expression PLUS . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    multiplicative_expression      shift and go to state 298
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 188

    (230) additive_expression -> additive_expression MINUS . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    multiplicative_expression      shift and go to state 299
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 189

    (241) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    SHL             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    SHR             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DISTINT         reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    LESSEQUAL       reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    GREATEREQUAL    reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    IN              reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    THEN            reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    OF              reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DO              reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DOBLEDOT        reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    TO              reduce using rule 241 (unary_expression -> PLUS unary_expression .)
    DOWNTO          reduce using rule 241 (unary_expression -> PLUS unary_expression .)


state 190

    (232) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 300
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 191

    (233) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 301
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 192

    (234) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 302
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 193

    (235) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 303
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 194

    (236) multiplicative_expression -> multiplicative_expression SHL . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 304
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 195

    (237) multiplicative_expression -> multiplicative_expression SHR . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    unary_expression               shift and go to state 305
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 196

    (240) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    SHL             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    SHR             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DISTINT         reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    LESSEQUAL       reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    GREATEREQUAL    reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    IN              reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    THEN            reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    OF              reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DO              reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DOBLEDOT        reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    TO              reduce using rule 240 (unary_expression -> MINUS unary_expression .)
    DOWNTO          reduce using rule 240 (unary_expression -> MINUS unary_expression .)


state 197

    (239) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    SHL             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    SHR             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 239 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 239 (unary_expression -> NOT unary_expression .)
    EQUAL           reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DISTINT         reduce using rule 239 (unary_expression -> NOT unary_expression .)
    LESS            reduce using rule 239 (unary_expression -> NOT unary_expression .)
    LESSEQUAL       reduce using rule 239 (unary_expression -> NOT unary_expression .)
    GREATER         reduce using rule 239 (unary_expression -> NOT unary_expression .)
    GREATEREQUAL    reduce using rule 239 (unary_expression -> NOT unary_expression .)
    IN              reduce using rule 239 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    THEN            reduce using rule 239 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 239 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 239 (unary_expression -> NOT unary_expression .)
    OF              reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DO              reduce using rule 239 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 239 (unary_expression -> NOT unary_expression .)
    ELSE            reduce using rule 239 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 239 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 239 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DOBLEDOT        reduce using rule 239 (unary_expression -> NOT unary_expression .)
    TO              reduce using rule 239 (unary_expression -> NOT unary_expression .)
    DOWNTO          reduce using rule 239 (unary_expression -> NOT unary_expression .)


state 198

    (242) unary_expression -> ADDRESS_OF unary_expression .

    TIMES           reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DIVIDE          reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DIV             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    MOD             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    SHL             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    SHR             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    PLUS            reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    MINUS           reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    EQUAL           reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DISTINT         reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    LESS            reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    LESSEQUAL       reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATER         reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATEREQUAL    reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    IN              reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    AND             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    THEN            reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    OR              reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    XOR             reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    OF              reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DO              reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    SEMICOLON       reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    ELSE            reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    RBRACKET        reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    COMMA           reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    RPAREN          reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DOBLEDOT        reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    TO              reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)
    DOWNTO          reduce using rule 242 (unary_expression -> ADDRESS_OF unary_expression .)


state 199

    (260) variable -> variable DOT . ID
    (266) function_call -> variable DOT . ID LPAREN expression_list RPAREN
    (267) function_call -> variable DOT . ID LPAREN RPAREN

    ID              shift and go to state 306


state 200

    (263) variable -> LPAREN . variable RPAREN CARET
    (250) primary_expression -> LPAREN . expression RPAREN
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 127
    LPAREN          shift and go to state 200
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LBRACKET        shift and go to state 128

    variable                       shift and go to state 202
    expression                     shift and go to state 201
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 201

    (250) primary_expression -> LPAREN expression . RPAREN
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    RPAREN          shift and go to state 307
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 202

    (263) variable -> LPAREN variable . RPAREN CARET
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET
    (244) primary_expression -> variable .
    (266) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (267) function_call -> variable . DOT ID LPAREN RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 171
    DOT             shift and go to state 199
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101
    TIMES           reduce using rule 244 (primary_expression -> variable .)
    DIVIDE          reduce using rule 244 (primary_expression -> variable .)
    DIV             reduce using rule 244 (primary_expression -> variable .)
    MOD             reduce using rule 244 (primary_expression -> variable .)
    SHL             reduce using rule 244 (primary_expression -> variable .)
    SHR             reduce using rule 244 (primary_expression -> variable .)
    PLUS            reduce using rule 244 (primary_expression -> variable .)
    MINUS           reduce using rule 244 (primary_expression -> variable .)
    EQUAL           reduce using rule 244 (primary_expression -> variable .)
    DISTINT         reduce using rule 244 (primary_expression -> variable .)
    LESS            reduce using rule 244 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 244 (primary_expression -> variable .)
    GREATER         reduce using rule 244 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 244 (primary_expression -> variable .)
    IN              reduce using rule 244 (primary_expression -> variable .)
    AND             reduce using rule 244 (primary_expression -> variable .)
    OR              reduce using rule 244 (primary_expression -> variable .)
    XOR             reduce using rule 244 (primary_expression -> variable .)

  ! RPAREN          [ reduce using rule 244 (primary_expression -> variable .) ]


state 203

    (264) function_call -> ID LPAREN . expression_list RPAREN
    (265) function_call -> ID LPAREN . RPAREN
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 309
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression_list                shift and go to state 308
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 204

    (257) set_constructor -> LBRACKET set_item_list . RBRACKET
    (256) set_item_list -> set_item_list . COMMA set_item

    RBRACKET        shift and go to state 310
    COMMA           shift and go to state 311


state 205

    (258) set_constructor -> LBRACKET RBRACKET .

    TIMES           reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DIV             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    MOD             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    SHL             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    SHR             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DISTINT         reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    LESS            reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    IN              reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    AND             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    THEN            reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    OR              reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    XOR             reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    OF              reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DO              reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DOBLEDOT        reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    TO              reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)
    DOWNTO          reduce using rule 258 (set_constructor -> LBRACKET RBRACKET .)


state 206

    (255) set_item_list -> set_item .

    RBRACKET        reduce using rule 255 (set_item_list -> set_item .)
    COMMA           reduce using rule 255 (set_item_list -> set_item .)


state 207

    (253) set_item -> expression .
    (254) set_item -> expression . DOBLEDOT expression
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 253 (set_item -> expression .)
    COMMA           reduce using rule 253 (set_item -> expression .)
    DOBLEDOT        shift and go to state 312
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 208

    (196) case_statement -> CASE expression OF . case_list END
    (197) case_statement -> CASE expression OF . case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> CASE expression OF . case_list ELSE sentences_list END
    (199) case_list -> . case_list case_label COLON sentence SEMICOLON
    (200) case_list -> . case_label COLON sentence SEMICOLON
    (201) case_list -> . empty
    (202) case_label -> . constant
    (203) case_label -> . constant DOBLEDOT constant
    (204) case_label -> . case_label COMMA constant
    (214) empty -> .
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for ORDINAL_CONSTANT resolved as shift
    END             reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

  ! NUMBER          [ reduce using rule 214 (empty -> .) ]
  ! STRING          [ reduce using rule 214 (empty -> .) ]
  ! TRUE            [ reduce using rule 214 (empty -> .) ]
  ! FALSE           [ reduce using rule 214 (empty -> .) ]
  ! NIL             [ reduce using rule 214 (empty -> .) ]
  ! ORDINAL_CONSTANT [ reduce using rule 214 (empty -> .) ]

    case_list                      shift and go to state 313
    case_label                     shift and go to state 314
    empty                          shift and go to state 315
    constant                       shift and go to state 316

state 209

    (205) for_statement -> FOR ID ASIGNATION . expression TO expression DO sentence
    (206) for_statement -> FOR ID ASIGNATION . expression DOWNTO expression DO sentence
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 317
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 210

    (207) while_statement -> WHILE expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 318
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 211

    (208) repeat_statement -> REPEAT sentences_list UNTIL . expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 319
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 212

    (209) with_statement -> WITH variable_list DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 320
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 213

    (211) variable_list -> variable_list COMMA . variable
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 105
    LPAREN          shift and go to state 63

    variable                       shift and go to state 321

state 214

    (213) labeled_sentence -> NUMBER COLON sentence .

    SEMICOLON       reduce using rule 213 (labeled_sentence -> NUMBER COLON sentence .)
    ELSE            reduce using rule 213 (labeled_sentence -> NUMBER COLON sentence .)


state 215

    (26) number_list -> number_list COMMA NUMBER .

    SEMICOLON       reduce using rule 26 (number_list -> number_list COMMA NUMBER .)
    COMMA           reduce using rule 26 (number_list -> number_list COMMA NUMBER .)


state 216

    (30) const_declaration -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 322


state 217

    (32) constant -> NUMBER .

    SEMICOLON       reduce using rule 32 (constant -> NUMBER .)
    DOBLEDOT        reduce using rule 32 (constant -> NUMBER .)
    COLON           reduce using rule 32 (constant -> NUMBER .)
    COMMA           reduce using rule 32 (constant -> NUMBER .)


state 218

    (33) constant -> STRING .

    SEMICOLON       reduce using rule 33 (constant -> STRING .)
    DOBLEDOT        reduce using rule 33 (constant -> STRING .)
    COLON           reduce using rule 33 (constant -> STRING .)
    COMMA           reduce using rule 33 (constant -> STRING .)


state 219

    (34) constant -> TRUE .

    SEMICOLON       reduce using rule 34 (constant -> TRUE .)
    DOBLEDOT        reduce using rule 34 (constant -> TRUE .)
    COLON           reduce using rule 34 (constant -> TRUE .)
    COMMA           reduce using rule 34 (constant -> TRUE .)


state 220

    (35) constant -> FALSE .

    SEMICOLON       reduce using rule 35 (constant -> FALSE .)
    DOBLEDOT        reduce using rule 35 (constant -> FALSE .)
    COLON           reduce using rule 35 (constant -> FALSE .)
    COMMA           reduce using rule 35 (constant -> FALSE .)


state 221

    (36) constant -> NIL .

    SEMICOLON       reduce using rule 36 (constant -> NIL .)
    DOBLEDOT        reduce using rule 36 (constant -> NIL .)
    COLON           reduce using rule 36 (constant -> NIL .)
    COMMA           reduce using rule 36 (constant -> NIL .)


state 222

    (37) constant -> ORDINAL_CONSTANT .

    SEMICOLON       reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    DOBLEDOT        reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COLON           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COMMA           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)


state 223

    (151) data_type_list -> ID .

    EQUAL           reduce using rule 151 (data_type_list -> ID .)
    SEMICOLON       reduce using rule 151 (data_type_list -> ID .)
    RPAREN          reduce using rule 151 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 151 (data_type_list -> ID .)
    END             reduce using rule 151 (data_type_list -> ID .)
    CASE            reduce using rule 151 (data_type_list -> ID .)
    ID              reduce using rule 151 (data_type_list -> ID .)
    OF              reduce using rule 151 (data_type_list -> ID .)


state 224

    (31) const_declaration -> ID COLON data_type_list . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 323


state 225

    (137) data_type_list -> INTEGER .

    EQUAL           reduce using rule 137 (data_type_list -> INTEGER .)
    SEMICOLON       reduce using rule 137 (data_type_list -> INTEGER .)
    ABSOLUTE        reduce using rule 137 (data_type_list -> INTEGER .)
    RPAREN          reduce using rule 137 (data_type_list -> INTEGER .)
    END             reduce using rule 137 (data_type_list -> INTEGER .)
    CASE            reduce using rule 137 (data_type_list -> INTEGER .)
    ID              reduce using rule 137 (data_type_list -> INTEGER .)
    OF              reduce using rule 137 (data_type_list -> INTEGER .)


state 226

    (138) data_type_list -> BYTE .

    EQUAL           reduce using rule 138 (data_type_list -> BYTE .)
    SEMICOLON       reduce using rule 138 (data_type_list -> BYTE .)
    ABSOLUTE        reduce using rule 138 (data_type_list -> BYTE .)
    RPAREN          reduce using rule 138 (data_type_list -> BYTE .)
    END             reduce using rule 138 (data_type_list -> BYTE .)
    CASE            reduce using rule 138 (data_type_list -> BYTE .)
    ID              reduce using rule 138 (data_type_list -> BYTE .)
    OF              reduce using rule 138 (data_type_list -> BYTE .)


state 227

    (139) data_type_list -> LONGINT .

    EQUAL           reduce using rule 139 (data_type_list -> LONGINT .)
    SEMICOLON       reduce using rule 139 (data_type_list -> LONGINT .)
    ABSOLUTE        reduce using rule 139 (data_type_list -> LONGINT .)
    RPAREN          reduce using rule 139 (data_type_list -> LONGINT .)
    END             reduce using rule 139 (data_type_list -> LONGINT .)
    CASE            reduce using rule 139 (data_type_list -> LONGINT .)
    ID              reduce using rule 139 (data_type_list -> LONGINT .)
    OF              reduce using rule 139 (data_type_list -> LONGINT .)


state 228

    (140) data_type_list -> SHORTINT .

    EQUAL           reduce using rule 140 (data_type_list -> SHORTINT .)
    SEMICOLON       reduce using rule 140 (data_type_list -> SHORTINT .)
    ABSOLUTE        reduce using rule 140 (data_type_list -> SHORTINT .)
    RPAREN          reduce using rule 140 (data_type_list -> SHORTINT .)
    END             reduce using rule 140 (data_type_list -> SHORTINT .)
    CASE            reduce using rule 140 (data_type_list -> SHORTINT .)
    ID              reduce using rule 140 (data_type_list -> SHORTINT .)
    OF              reduce using rule 140 (data_type_list -> SHORTINT .)


state 229

    (141) data_type_list -> WORD .

    EQUAL           reduce using rule 141 (data_type_list -> WORD .)
    SEMICOLON       reduce using rule 141 (data_type_list -> WORD .)
    ABSOLUTE        reduce using rule 141 (data_type_list -> WORD .)
    RPAREN          reduce using rule 141 (data_type_list -> WORD .)
    END             reduce using rule 141 (data_type_list -> WORD .)
    CASE            reduce using rule 141 (data_type_list -> WORD .)
    ID              reduce using rule 141 (data_type_list -> WORD .)
    OF              reduce using rule 141 (data_type_list -> WORD .)


state 230

    (142) data_type_list -> REAL .

    EQUAL           reduce using rule 142 (data_type_list -> REAL .)
    SEMICOLON       reduce using rule 142 (data_type_list -> REAL .)
    ABSOLUTE        reduce using rule 142 (data_type_list -> REAL .)
    RPAREN          reduce using rule 142 (data_type_list -> REAL .)
    END             reduce using rule 142 (data_type_list -> REAL .)
    CASE            reduce using rule 142 (data_type_list -> REAL .)
    ID              reduce using rule 142 (data_type_list -> REAL .)
    OF              reduce using rule 142 (data_type_list -> REAL .)


state 231

    (143) data_type_list -> SINGLE .

    EQUAL           reduce using rule 143 (data_type_list -> SINGLE .)
    SEMICOLON       reduce using rule 143 (data_type_list -> SINGLE .)
    ABSOLUTE        reduce using rule 143 (data_type_list -> SINGLE .)
    RPAREN          reduce using rule 143 (data_type_list -> SINGLE .)
    END             reduce using rule 143 (data_type_list -> SINGLE .)
    CASE            reduce using rule 143 (data_type_list -> SINGLE .)
    ID              reduce using rule 143 (data_type_list -> SINGLE .)
    OF              reduce using rule 143 (data_type_list -> SINGLE .)


state 232

    (144) data_type_list -> DOUBLE .

    EQUAL           reduce using rule 144 (data_type_list -> DOUBLE .)
    SEMICOLON       reduce using rule 144 (data_type_list -> DOUBLE .)
    ABSOLUTE        reduce using rule 144 (data_type_list -> DOUBLE .)
    RPAREN          reduce using rule 144 (data_type_list -> DOUBLE .)
    END             reduce using rule 144 (data_type_list -> DOUBLE .)
    CASE            reduce using rule 144 (data_type_list -> DOUBLE .)
    ID              reduce using rule 144 (data_type_list -> DOUBLE .)
    OF              reduce using rule 144 (data_type_list -> DOUBLE .)


state 233

    (145) data_type_list -> EXTENDED .

    EQUAL           reduce using rule 145 (data_type_list -> EXTENDED .)
    SEMICOLON       reduce using rule 145 (data_type_list -> EXTENDED .)
    ABSOLUTE        reduce using rule 145 (data_type_list -> EXTENDED .)
    RPAREN          reduce using rule 145 (data_type_list -> EXTENDED .)
    END             reduce using rule 145 (data_type_list -> EXTENDED .)
    CASE            reduce using rule 145 (data_type_list -> EXTENDED .)
    ID              reduce using rule 145 (data_type_list -> EXTENDED .)
    OF              reduce using rule 145 (data_type_list -> EXTENDED .)


state 234

    (146) data_type_list -> SHORT .

    EQUAL           reduce using rule 146 (data_type_list -> SHORT .)
    SEMICOLON       reduce using rule 146 (data_type_list -> SHORT .)
    ABSOLUTE        reduce using rule 146 (data_type_list -> SHORT .)
    RPAREN          reduce using rule 146 (data_type_list -> SHORT .)
    END             reduce using rule 146 (data_type_list -> SHORT .)
    CASE            reduce using rule 146 (data_type_list -> SHORT .)
    ID              reduce using rule 146 (data_type_list -> SHORT .)
    OF              reduce using rule 146 (data_type_list -> SHORT .)


state 235

    (147) data_type_list -> BOOLEAN .

    EQUAL           reduce using rule 147 (data_type_list -> BOOLEAN .)
    SEMICOLON       reduce using rule 147 (data_type_list -> BOOLEAN .)
    ABSOLUTE        reduce using rule 147 (data_type_list -> BOOLEAN .)
    RPAREN          reduce using rule 147 (data_type_list -> BOOLEAN .)
    END             reduce using rule 147 (data_type_list -> BOOLEAN .)
    CASE            reduce using rule 147 (data_type_list -> BOOLEAN .)
    ID              reduce using rule 147 (data_type_list -> BOOLEAN .)
    OF              reduce using rule 147 (data_type_list -> BOOLEAN .)


state 236

    (148) data_type_list -> CHAR .

    EQUAL           reduce using rule 148 (data_type_list -> CHAR .)
    SEMICOLON       reduce using rule 148 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> CHAR .)
    RPAREN          reduce using rule 148 (data_type_list -> CHAR .)
    END             reduce using rule 148 (data_type_list -> CHAR .)
    CASE            reduce using rule 148 (data_type_list -> CHAR .)
    ID              reduce using rule 148 (data_type_list -> CHAR .)
    OF              reduce using rule 148 (data_type_list -> CHAR .)


state 237

    (149) data_type_list -> STRING .
    (150) data_type_list -> STRING . LBRACKET NUMBER RBRACKET
    (54) string_type -> STRING .
    (55) string_type -> STRING . LBRACKET NUMBER RBRACKET

  ! reduce/reduce conflict for EQUAL resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for CASE resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for OF resolved using rule 54 (string_type -> STRING .)
    LBRACKET        shift and go to state 324
    EQUAL           reduce using rule 54 (string_type -> STRING .)
    SEMICOLON       reduce using rule 54 (string_type -> STRING .)
    ABSOLUTE        reduce using rule 54 (string_type -> STRING .)
    RPAREN          reduce using rule 54 (string_type -> STRING .)
    END             reduce using rule 54 (string_type -> STRING .)
    CASE            reduce using rule 54 (string_type -> STRING .)
    ID              reduce using rule 54 (string_type -> STRING .)
    OF              reduce using rule 54 (string_type -> STRING .)

  ! EQUAL           [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! ABSOLUTE        [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! RPAREN          [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! END             [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! CASE            [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! ID              [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! OF              [ reduce using rule 149 (data_type_list -> STRING .) ]


state 238

    (152) data_type_list -> ABSOLUTE . ID

    ID              shift and go to state 325


state 239

    (153) data_type_list -> FILE .
    (76) file_type -> FILE . OF data_type_list
    (77) file_type -> FILE .

  ! shift/reduce conflict for OF resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for END resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for CASE resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for ID resolved using rule 77 (file_type -> FILE .)
  ! shift/reduce conflict for OF resolved as shift
    OF              shift and go to state 326
    EQUAL           reduce using rule 77 (file_type -> FILE .)
    SEMICOLON       reduce using rule 77 (file_type -> FILE .)
    ABSOLUTE        reduce using rule 77 (file_type -> FILE .)
    RPAREN          reduce using rule 77 (file_type -> FILE .)
    END             reduce using rule 77 (file_type -> FILE .)
    CASE            reduce using rule 77 (file_type -> FILE .)
    ID              reduce using rule 77 (file_type -> FILE .)

  ! EQUAL           [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! SEMICOLON       [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! ABSOLUTE        [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! RPAREN          [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! END             [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! CASE            [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! ID              [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 77 (file_type -> FILE .) ]


state 240

    (154) data_type_list -> array_type .

    EQUAL           reduce using rule 154 (data_type_list -> array_type .)
    SEMICOLON       reduce using rule 154 (data_type_list -> array_type .)
    ABSOLUTE        reduce using rule 154 (data_type_list -> array_type .)
    RPAREN          reduce using rule 154 (data_type_list -> array_type .)
    END             reduce using rule 154 (data_type_list -> array_type .)
    CASE            reduce using rule 154 (data_type_list -> array_type .)
    ID              reduce using rule 154 (data_type_list -> array_type .)
    OF              reduce using rule 154 (data_type_list -> array_type .)


state 241

    (155) data_type_list -> pointer_type .

    EQUAL           reduce using rule 155 (data_type_list -> pointer_type .)
    SEMICOLON       reduce using rule 155 (data_type_list -> pointer_type .)
    ABSOLUTE        reduce using rule 155 (data_type_list -> pointer_type .)
    RPAREN          reduce using rule 155 (data_type_list -> pointer_type .)
    END             reduce using rule 155 (data_type_list -> pointer_type .)
    CASE            reduce using rule 155 (data_type_list -> pointer_type .)
    ID              reduce using rule 155 (data_type_list -> pointer_type .)
    OF              reduce using rule 155 (data_type_list -> pointer_type .)


state 242

    (156) data_type_list -> record_type .

    EQUAL           reduce using rule 156 (data_type_list -> record_type .)
    SEMICOLON       reduce using rule 156 (data_type_list -> record_type .)
    ABSOLUTE        reduce using rule 156 (data_type_list -> record_type .)
    RPAREN          reduce using rule 156 (data_type_list -> record_type .)
    END             reduce using rule 156 (data_type_list -> record_type .)
    CASE            reduce using rule 156 (data_type_list -> record_type .)
    ID              reduce using rule 156 (data_type_list -> record_type .)
    OF              reduce using rule 156 (data_type_list -> record_type .)


state 243

    (157) data_type_list -> set_type .

    EQUAL           reduce using rule 157 (data_type_list -> set_type .)
    SEMICOLON       reduce using rule 157 (data_type_list -> set_type .)
    ABSOLUTE        reduce using rule 157 (data_type_list -> set_type .)
    RPAREN          reduce using rule 157 (data_type_list -> set_type .)
    END             reduce using rule 157 (data_type_list -> set_type .)
    CASE            reduce using rule 157 (data_type_list -> set_type .)
    ID              reduce using rule 157 (data_type_list -> set_type .)
    OF              reduce using rule 157 (data_type_list -> set_type .)


state 244

    (158) data_type_list -> file_type .

    EQUAL           reduce using rule 158 (data_type_list -> file_type .)
    SEMICOLON       reduce using rule 158 (data_type_list -> file_type .)
    ABSOLUTE        reduce using rule 158 (data_type_list -> file_type .)
    RPAREN          reduce using rule 158 (data_type_list -> file_type .)
    END             reduce using rule 158 (data_type_list -> file_type .)
    CASE            reduce using rule 158 (data_type_list -> file_type .)
    ID              reduce using rule 158 (data_type_list -> file_type .)
    OF              reduce using rule 158 (data_type_list -> file_type .)


state 245

    (159) data_type_list -> object_type .

    EQUAL           reduce using rule 159 (data_type_list -> object_type .)
    SEMICOLON       reduce using rule 159 (data_type_list -> object_type .)
    ABSOLUTE        reduce using rule 159 (data_type_list -> object_type .)
    RPAREN          reduce using rule 159 (data_type_list -> object_type .)
    END             reduce using rule 159 (data_type_list -> object_type .)
    CASE            reduce using rule 159 (data_type_list -> object_type .)
    ID              reduce using rule 159 (data_type_list -> object_type .)
    OF              reduce using rule 159 (data_type_list -> object_type .)


state 246

    (160) data_type_list -> string_type .

    EQUAL           reduce using rule 160 (data_type_list -> string_type .)
    SEMICOLON       reduce using rule 160 (data_type_list -> string_type .)
    ABSOLUTE        reduce using rule 160 (data_type_list -> string_type .)
    RPAREN          reduce using rule 160 (data_type_list -> string_type .)
    END             reduce using rule 160 (data_type_list -> string_type .)
    CASE            reduce using rule 160 (data_type_list -> string_type .)
    ID              reduce using rule 160 (data_type_list -> string_type .)
    OF              reduce using rule 160 (data_type_list -> string_type .)


state 247

    (58) array_type -> ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> ARRAY . OF data_type_list

    LBRACKET        shift and go to state 327
    OF              shift and go to state 328


state 248

    (59) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (57) record_type -> PACKED . RECORD record_list END

    ARRAY           shift and go to state 329
    RECORD          shift and go to state 330


state 249

    (74) pointer_type -> CARET . ID
    (75) pointer_type -> CARET . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    ID              shift and go to state 331
    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 332
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 250

    (56) record_type -> RECORD . record_list END
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_list                    shift and go to state 333
    record_declaration             shift and go to state 334
    id_list                        shift and go to state 335

state 251

    (69) set_type -> SET . OF set_range

    OF              shift and go to state 337


state 252

    (78) object_type -> OBJECT . object_heritage object_fields object_methods END
    (79) object_heritage -> . LPAREN ID RPAREN
    (80) object_heritage -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 339
    ID              reduce using rule 214 (empty -> .)
    END             reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)

    object_heritage                shift and go to state 338
    empty                          shift and go to state 340

state 253

    (46) type_definition -> ID . DOBLEDOT ID
    (151) data_type_list -> ID .

    DOBLEDOT        shift and go to state 341
    SEMICOLON       reduce using rule 151 (data_type_list -> ID .)
    EQUAL           reduce using rule 151 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 151 (data_type_list -> ID .)


state 254

    (41) type_declaration -> ID EQUAL type_definition . SEMICOLON

    SEMICOLON       shift and go to state 342


state 255

    (42) type_definition -> data_type_list .

    SEMICOLON       reduce using rule 42 (type_definition -> data_type_list .)
    EQUAL           reduce using rule 42 (type_definition -> data_type_list .)
    ABSOLUTE        reduce using rule 42 (type_definition -> data_type_list .)


state 256

    (43) type_definition -> LPAREN . id_list RPAREN
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 343

state 257

    (44) type_definition -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 344


state 258

    (45) type_definition -> CHAR . DOBLEDOT CHAR
    (148) data_type_list -> CHAR .

    DOBLEDOT        shift and go to state 345
    SEMICOLON       reduce using rule 148 (data_type_list -> CHAR .)
    EQUAL           reduce using rule 148 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> CHAR .)


state 259

    (47) type_definition -> record_type .
    (156) data_type_list -> record_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (type_definition -> record_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 47 (type_definition -> record_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 47 (type_definition -> record_type .)
    SEMICOLON       reduce using rule 47 (type_definition -> record_type .)
    EQUAL           reduce using rule 47 (type_definition -> record_type .)
    ABSOLUTE        reduce using rule 47 (type_definition -> record_type .)

  ! SEMICOLON       [ reduce using rule 156 (data_type_list -> record_type .) ]
  ! EQUAL           [ reduce using rule 156 (data_type_list -> record_type .) ]
  ! ABSOLUTE        [ reduce using rule 156 (data_type_list -> record_type .) ]


state 260

    (48) type_definition -> array_type .
    (154) data_type_list -> array_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (type_definition -> array_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 48 (type_definition -> array_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 48 (type_definition -> array_type .)
    SEMICOLON       reduce using rule 48 (type_definition -> array_type .)
    EQUAL           reduce using rule 48 (type_definition -> array_type .)
    ABSOLUTE        reduce using rule 48 (type_definition -> array_type .)

  ! SEMICOLON       [ reduce using rule 154 (data_type_list -> array_type .) ]
  ! EQUAL           [ reduce using rule 154 (data_type_list -> array_type .) ]
  ! ABSOLUTE        [ reduce using rule 154 (data_type_list -> array_type .) ]


state 261

    (49) type_definition -> set_type .
    (157) data_type_list -> set_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (type_definition -> set_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 49 (type_definition -> set_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 49 (type_definition -> set_type .)
    SEMICOLON       reduce using rule 49 (type_definition -> set_type .)
    EQUAL           reduce using rule 49 (type_definition -> set_type .)
    ABSOLUTE        reduce using rule 49 (type_definition -> set_type .)

  ! SEMICOLON       [ reduce using rule 157 (data_type_list -> set_type .) ]
  ! EQUAL           [ reduce using rule 157 (data_type_list -> set_type .) ]
  ! ABSOLUTE        [ reduce using rule 157 (data_type_list -> set_type .) ]


state 262

    (50) type_definition -> pointer_type .
    (155) data_type_list -> pointer_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 50 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 50 (type_definition -> pointer_type .)
    SEMICOLON       reduce using rule 50 (type_definition -> pointer_type .)
    EQUAL           reduce using rule 50 (type_definition -> pointer_type .)
    ABSOLUTE        reduce using rule 50 (type_definition -> pointer_type .)

  ! SEMICOLON       [ reduce using rule 155 (data_type_list -> pointer_type .) ]
  ! EQUAL           [ reduce using rule 155 (data_type_list -> pointer_type .) ]
  ! ABSOLUTE        [ reduce using rule 155 (data_type_list -> pointer_type .) ]


state 263

    (51) type_definition -> file_type .
    (158) data_type_list -> file_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (type_definition -> file_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 51 (type_definition -> file_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 51 (type_definition -> file_type .)
    SEMICOLON       reduce using rule 51 (type_definition -> file_type .)
    EQUAL           reduce using rule 51 (type_definition -> file_type .)
    ABSOLUTE        reduce using rule 51 (type_definition -> file_type .)

  ! SEMICOLON       [ reduce using rule 158 (data_type_list -> file_type .) ]
  ! EQUAL           [ reduce using rule 158 (data_type_list -> file_type .) ]
  ! ABSOLUTE        [ reduce using rule 158 (data_type_list -> file_type .) ]


state 264

    (52) type_definition -> object_type .
    (159) data_type_list -> object_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (type_definition -> object_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 52 (type_definition -> object_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 52 (type_definition -> object_type .)
    SEMICOLON       reduce using rule 52 (type_definition -> object_type .)
    EQUAL           reduce using rule 52 (type_definition -> object_type .)
    ABSOLUTE        reduce using rule 52 (type_definition -> object_type .)

  ! SEMICOLON       [ reduce using rule 159 (data_type_list -> object_type .) ]
  ! EQUAL           [ reduce using rule 159 (data_type_list -> object_type .) ]
  ! ABSOLUTE        [ reduce using rule 159 (data_type_list -> object_type .) ]


state 265

    (53) type_definition -> string_type .
    (160) data_type_list -> string_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (type_definition -> string_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 53 (type_definition -> string_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 53 (type_definition -> string_type .)
    SEMICOLON       reduce using rule 53 (type_definition -> string_type .)
    EQUAL           reduce using rule 53 (type_definition -> string_type .)
    ABSOLUTE        reduce using rule 53 (type_definition -> string_type .)

  ! SEMICOLON       [ reduce using rule 160 (data_type_list -> string_type .) ]
  ! EQUAL           [ reduce using rule 160 (data_type_list -> string_type .) ]
  ! ABSOLUTE        [ reduce using rule 160 (data_type_list -> string_type .) ]


state 266

    (57) record_type -> PACKED . RECORD record_list END
    (59) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list

    RECORD          shift and go to state 330
    ARRAY           shift and go to state 329


state 267

    (113) var_declaration -> id_list COLON type_definition . SEMICOLON
    (114) var_declaration -> id_list COLON type_definition . EQUAL expression SEMICOLON
    (115) var_declaration -> id_list COLON type_definition . ABSOLUTE ID SEMICOLON

    SEMICOLON       shift and go to state 346
    EQUAL           shift and go to state 347
    ABSOLUTE        shift and go to state 348


state 268

    (116) procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .

    BEGIN           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    LABEL           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONST           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    TYPE            reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    VAR             reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONSTRUCTOR     reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    DESTRUCTOR      reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    PROCEDURE       reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    FUNCTION        reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    IMPLEMENTATION  reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    INTERFACE       reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)


state 269

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 349


state 270

    (121) directive -> EXTERNAL STRING .

    SEMICOLON       reduce using rule 121 (directive -> EXTERNAL STRING .)
    BEGIN           reduce using rule 121 (directive -> EXTERNAL STRING .)
    LABEL           reduce using rule 121 (directive -> EXTERNAL STRING .)
    CONST           reduce using rule 121 (directive -> EXTERNAL STRING .)
    TYPE            reduce using rule 121 (directive -> EXTERNAL STRING .)
    VAR             reduce using rule 121 (directive -> EXTERNAL STRING .)
    CONSTRUCTOR     reduce using rule 121 (directive -> EXTERNAL STRING .)
    DESTRUCTOR      reduce using rule 121 (directive -> EXTERNAL STRING .)
    PROCEDURE       reduce using rule 121 (directive -> EXTERNAL STRING .)
    FUNCTION        reduce using rule 121 (directive -> EXTERNAL STRING .)
    IMPLEMENTATION  reduce using rule 121 (directive -> EXTERNAL STRING .)
    INTERFACE       reduce using rule 121 (directive -> EXTERNAL STRING .)
    END             reduce using rule 121 (directive -> EXTERNAL STRING .)


state 271

    (126) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 350


state 272

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 351
    empty                          shift and go to state 160

state 273

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 352
    empty                          shift and go to state 160

state 274

    (93) method_implementation -> PROCEDURE ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 353
    empty                          shift and go to state 160

state 275

    (128) parameters -> LPAREN parameter_list . RPAREN
    (130) parameter_list -> parameter_list . SEMICOLON parameter_group

    RPAREN          shift and go to state 354
    SEMICOLON       shift and go to state 355


state 276

    (131) parameter_list -> parameter_group .

    RPAREN          reduce using rule 131 (parameter_list -> parameter_group .)
    SEMICOLON       reduce using rule 131 (parameter_list -> parameter_group .)


state 277

    (132) parameter_group -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 356
    COMMA           shift and go to state 44


state 278

    (133) parameter_group -> VAR . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 357

state 279

    (134) parameter_group -> CONST . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 358

state 280

    (135) parameter_group -> procedure_header .

    RPAREN          reduce using rule 135 (parameter_group -> procedure_header .)
    SEMICOLON       reduce using rule 135 (parameter_group -> procedure_header .)


state 281

    (136) parameter_group -> function_header .

    RPAREN          reduce using rule 136 (parameter_group -> function_header .)
    SEMICOLON       reduce using rule 136 (parameter_group -> function_header .)


state 282

    (118) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 359


state 283

    (127) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 360


state 284

    (94) method_implementation -> FUNCTION ID DOT ID . parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    COLON           reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 361
    empty                          shift and go to state 160

state 285

    (127) function_header -> FUNCTION ID parameters COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 362
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 286

    (190) procedure_call -> variable DOT ID LPAREN . expression_list RPAREN
    (191) procedure_call -> variable DOT ID LPAREN . RPAREN
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 364
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    variable                       shift and go to state 118
    expression_list                shift and go to state 363
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 287

    (261) variable -> variable LBRACKET expression_list RBRACKET .

    ASIGNATION      reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    CARET           reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DISTINT         reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOBLEDOT        reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 261 (variable -> variable LBRACKET expression_list RBRACKET .)


state 288

    (269) expression_list -> expression_list COMMA . expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 365
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 289

    (188) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 188 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 188 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 290

    (263) variable -> LPAREN variable RPAREN CARET .

    ASIGNATION      reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DOT             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    LBRACKET        reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    CARET           reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    RPAREN          reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    TIMES           reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE          reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DIV             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    MOD             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    SHL             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    SHR             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    PLUS            reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    MINUS           reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    EQUAL           reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DISTINT         reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    LESS            reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    LESSEQUAL       reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    GREATER         reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    GREATEREQUAL    reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    IN              reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    AND             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    THEN            reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    OR              reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    XOR             reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    OF              reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DO              reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    COMMA           reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    SEMICOLON       reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    ELSE            reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    RBRACKET        reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DOBLEDOT        reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    TO              reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)
    DOWNTO          reduce using rule 263 (variable -> LPAREN variable RPAREN CARET .)


state 291

    (260) variable -> variable DOT ID .

    RPAREN          reduce using rule 260 (variable -> variable DOT ID .)
    DOT             reduce using rule 260 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 260 (variable -> variable DOT ID .)
    CARET           reduce using rule 260 (variable -> variable DOT ID .)
    DO              reduce using rule 260 (variable -> variable DOT ID .)
    COMMA           reduce using rule 260 (variable -> variable DOT ID .)


state 292

    (192) procedure_call -> NEW LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 192 (procedure_call -> NEW LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 192 (procedure_call -> NEW LPAREN expression_list RPAREN .)


state 293

    (194) if_statement -> IF expression THEN sentence .
    (195) if_statement -> IF expression THEN sentence . ELSE sentence

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 194 (if_statement -> IF expression THEN sentence .)
    ELSE            shift and go to state 366

  ! ELSE            [ reduce using rule 194 (if_statement -> IF expression THEN sentence .) ]


state 294

    (215) expression -> expression OR simple_expression .
    (218) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 215 (expression -> expression OR simple_expression .)
    OR              reduce using rule 215 (expression -> expression OR simple_expression .)
    XOR             reduce using rule 215 (expression -> expression OR simple_expression .)
    OF              reduce using rule 215 (expression -> expression OR simple_expression .)
    DO              reduce using rule 215 (expression -> expression OR simple_expression .)
    SEMICOLON       reduce using rule 215 (expression -> expression OR simple_expression .)
    ELSE            reduce using rule 215 (expression -> expression OR simple_expression .)
    RBRACKET        reduce using rule 215 (expression -> expression OR simple_expression .)
    COMMA           reduce using rule 215 (expression -> expression OR simple_expression .)
    RPAREN          reduce using rule 215 (expression -> expression OR simple_expression .)
    DOBLEDOT        reduce using rule 215 (expression -> expression OR simple_expression .)
    TO              reduce using rule 215 (expression -> expression OR simple_expression .)
    DOWNTO          reduce using rule 215 (expression -> expression OR simple_expression .)
    AND             shift and go to state 178


state 295

    (216) expression -> expression XOR simple_expression .
    (218) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 216 (expression -> expression XOR simple_expression .)
    OR              reduce using rule 216 (expression -> expression XOR simple_expression .)
    XOR             reduce using rule 216 (expression -> expression XOR simple_expression .)
    OF              reduce using rule 216 (expression -> expression XOR simple_expression .)
    DO              reduce using rule 216 (expression -> expression XOR simple_expression .)
    SEMICOLON       reduce using rule 216 (expression -> expression XOR simple_expression .)
    ELSE            reduce using rule 216 (expression -> expression XOR simple_expression .)
    RBRACKET        reduce using rule 216 (expression -> expression XOR simple_expression .)
    COMMA           reduce using rule 216 (expression -> expression XOR simple_expression .)
    RPAREN          reduce using rule 216 (expression -> expression XOR simple_expression .)
    DOBLEDOT        reduce using rule 216 (expression -> expression XOR simple_expression .)
    TO              reduce using rule 216 (expression -> expression XOR simple_expression .)
    DOWNTO          reduce using rule 216 (expression -> expression XOR simple_expression .)
    AND             shift and go to state 178


state 296

    (218) simple_expression -> simple_expression AND relational_expression .
    (220) relational_expression -> relational_expression . relational_operator additive_expression
    (222) relational_operator -> . EQUAL
    (223) relational_operator -> . DISTINT
    (224) relational_operator -> . LESS
    (225) relational_operator -> . LESSEQUAL
    (226) relational_operator -> . GREATER
    (227) relational_operator -> . GREATEREQUAL
    (228) relational_operator -> . IN

    AND             reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    THEN            reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    OR              reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    XOR             reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    OF              reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    DO              reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    SEMICOLON       reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    ELSE            reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    RBRACKET        reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    COMMA           reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    RPAREN          reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    DOBLEDOT        reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    TO              reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    DOWNTO          reduce using rule 218 (simple_expression -> simple_expression AND relational_expression .)
    EQUAL           shift and go to state 180
    DISTINT         shift and go to state 181
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    GREATER         shift and go to state 184
    GREATEREQUAL    shift and go to state 185
    IN              shift and go to state 186

    relational_operator            shift and go to state 179

state 297

    (220) relational_expression -> relational_expression relational_operator additive_expression .
    (229) additive_expression -> additive_expression . PLUS multiplicative_expression
    (230) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    DISTINT         reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESS            reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESSEQUAL       reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATER         reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATEREQUAL    reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    IN              reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    AND             reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    THEN            reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    OR              reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    XOR             reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    OF              reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    DO              reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    SEMICOLON       reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    ELSE            reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    RBRACKET        reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    COMMA           reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    RPAREN          reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOBLEDOT        reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    TO              reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOWNTO          reduce using rule 220 (relational_expression -> relational_expression relational_operator additive_expression .)
    PLUS            shift and go to state 187
    MINUS           shift and go to state 188


state 298

    (229) additive_expression -> additive_expression PLUS multiplicative_expression .
    (232) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (233) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (234) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (235) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (236) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (237) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DISTINT         reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OF              reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 229 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    DIV             shift and go to state 192
    MOD             shift and go to state 193
    SHL             shift and go to state 194
    SHR             shift and go to state 195


state 299

    (230) additive_expression -> additive_expression MINUS multiplicative_expression .
    (232) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (233) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (234) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (235) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (236) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (237) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DISTINT         reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OF              reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 230 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 190
    DIVIDE          shift and go to state 191
    DIV             shift and go to state 192
    MOD             shift and go to state 193
    SHL             shift and go to state 194
    SHR             shift and go to state 195


state 300

    (232) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHL             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHR             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DISTINT         reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESSEQUAL       reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATEREQUAL    reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IN              reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    THEN            reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OF              reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DO              reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    ELSE            reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOBLEDOT        reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TO              reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOWNTO          reduce using rule 232 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 301

    (233) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIV             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHL             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHR             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DISTINT         reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESSEQUAL       reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATEREQUAL    reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IN              reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THEN            reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OF              reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DO              reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ELSE            reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOBLEDOT        reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TO              reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOWNTO          reduce using rule 233 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 302

    (234) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVIDE          reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHL             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHR             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUAL           reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DISTINT         reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS            reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESSEQUAL       reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER         reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATEREQUAL    reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    IN              reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    THEN            reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    XOR             reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OF              reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DO              reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ELSE            reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOBLEDOT        reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    TO              reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOWNTO          reduce using rule 234 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 303

    (235) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHL             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHR             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUAL           reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DISTINT         reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS            reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESSEQUAL       reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER         reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATEREQUAL    reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IN              reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    THEN            reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OF              reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DO              reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    ELSE            reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOBLEDOT        reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    TO              reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOWNTO          reduce using rule 235 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 304

    (236) multiplicative_expression -> multiplicative_expression SHL unary_expression .

    TIMES           reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIVIDE          reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIV             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MOD             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHL             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHR             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    PLUS            reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MINUS           reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    EQUAL           reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DISTINT         reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESS            reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESSEQUAL       reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATER         reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATEREQUAL    reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    IN              reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    AND             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    THEN            reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OR              reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    XOR             reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OF              reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DO              reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SEMICOLON       reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    ELSE            reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RBRACKET        reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COMMA           reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RPAREN          reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOBLEDOT        reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    TO              reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOWNTO          reduce using rule 236 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)


state 305

    (237) multiplicative_expression -> multiplicative_expression SHR unary_expression .

    TIMES           reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIVIDE          reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIV             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MOD             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHL             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHR             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    PLUS            reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MINUS           reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    EQUAL           reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DISTINT         reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESS            reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESSEQUAL       reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATER         reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATEREQUAL    reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    IN              reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    AND             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    THEN            reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OR              reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    XOR             reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OF              reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DO              reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SEMICOLON       reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    ELSE            reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RBRACKET        reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COMMA           reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RPAREN          reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOBLEDOT        reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    TO              reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOWNTO          reduce using rule 237 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)


state 306

    (260) variable -> variable DOT ID .
    (266) function_call -> variable DOT ID . LPAREN expression_list RPAREN
    (267) function_call -> variable DOT ID . LPAREN RPAREN

    DOT             reduce using rule 260 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 260 (variable -> variable DOT ID .)
    CARET           reduce using rule 260 (variable -> variable DOT ID .)
    TIMES           reduce using rule 260 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 260 (variable -> variable DOT ID .)
    DIV             reduce using rule 260 (variable -> variable DOT ID .)
    MOD             reduce using rule 260 (variable -> variable DOT ID .)
    SHL             reduce using rule 260 (variable -> variable DOT ID .)
    SHR             reduce using rule 260 (variable -> variable DOT ID .)
    PLUS            reduce using rule 260 (variable -> variable DOT ID .)
    MINUS           reduce using rule 260 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 260 (variable -> variable DOT ID .)
    DISTINT         reduce using rule 260 (variable -> variable DOT ID .)
    LESS            reduce using rule 260 (variable -> variable DOT ID .)
    LESSEQUAL       reduce using rule 260 (variable -> variable DOT ID .)
    GREATER         reduce using rule 260 (variable -> variable DOT ID .)
    GREATEREQUAL    reduce using rule 260 (variable -> variable DOT ID .)
    IN              reduce using rule 260 (variable -> variable DOT ID .)
    AND             reduce using rule 260 (variable -> variable DOT ID .)
    THEN            reduce using rule 260 (variable -> variable DOT ID .)
    OR              reduce using rule 260 (variable -> variable DOT ID .)
    XOR             reduce using rule 260 (variable -> variable DOT ID .)
    OF              reduce using rule 260 (variable -> variable DOT ID .)
    DO              reduce using rule 260 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 260 (variable -> variable DOT ID .)
    ELSE            reduce using rule 260 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 260 (variable -> variable DOT ID .)
    COMMA           reduce using rule 260 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 260 (variable -> variable DOT ID .)
    DOBLEDOT        reduce using rule 260 (variable -> variable DOT ID .)
    TO              reduce using rule 260 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 260 (variable -> variable DOT ID .)
    LPAREN          shift and go to state 367


state 307

    (250) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DOBLEDOT        reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 250 (primary_expression -> LPAREN expression RPAREN .)


state 308

    (264) function_call -> ID LPAREN expression_list . RPAREN
    (269) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 368
    COMMA           shift and go to state 288


state 309

    (265) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    SHL             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    SHR             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DISTINT         reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    OF              reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 265 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 265 (function_call -> ID LPAREN RPAREN .)


state 310

    (257) set_constructor -> LBRACKET set_item_list RBRACKET .

    TIMES           reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIVIDE          reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIV             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MOD             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHL             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHR             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    PLUS            reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MINUS           reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    EQUAL           reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DISTINT         reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESS            reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESSEQUAL       reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATER         reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATEREQUAL    reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    IN              reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    AND             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    THEN            reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OR              reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    XOR             reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OF              reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DO              reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SEMICOLON       reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    ELSE            reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RBRACKET        reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COMMA           reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RPAREN          reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOBLEDOT        reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    TO              reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOWNTO          reduce using rule 257 (set_constructor -> LBRACKET set_item_list RBRACKET .)


state 311

    (256) set_item_list -> set_item_list COMMA . set_item
    (253) set_item -> . expression
    (254) set_item -> . expression DOBLEDOT expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    set_item                       shift and go to state 369
    expression                     shift and go to state 207
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 312

    (254) set_item -> expression DOBLEDOT . expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 370
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 313

    (196) case_statement -> CASE expression OF case_list . END
    (197) case_statement -> CASE expression OF case_list . ELSE sentences_list SEMICOLON END
    (198) case_statement -> CASE expression OF case_list . ELSE sentences_list END
    (199) case_list -> case_list . case_label COLON sentence SEMICOLON
    (202) case_label -> . constant
    (203) case_label -> . constant DOBLEDOT constant
    (204) case_label -> . case_label COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             shift and go to state 371
    ELSE            shift and go to state 372
    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    case_label                     shift and go to state 373
    constant                       shift and go to state 316

state 314

    (200) case_list -> case_label . COLON sentence SEMICOLON
    (204) case_label -> case_label . COMMA constant

    COLON           shift and go to state 374
    COMMA           shift and go to state 375


state 315

    (201) case_list -> empty .

    END             reduce using rule 201 (case_list -> empty .)
    ELSE            reduce using rule 201 (case_list -> empty .)
    NUMBER          reduce using rule 201 (case_list -> empty .)
    STRING          reduce using rule 201 (case_list -> empty .)
    TRUE            reduce using rule 201 (case_list -> empty .)
    FALSE           reduce using rule 201 (case_list -> empty .)
    NIL             reduce using rule 201 (case_list -> empty .)
    ORDINAL_CONSTANT reduce using rule 201 (case_list -> empty .)


state 316

    (202) case_label -> constant .
    (203) case_label -> constant . DOBLEDOT constant

    COLON           reduce using rule 202 (case_label -> constant .)
    COMMA           reduce using rule 202 (case_label -> constant .)
    DOBLEDOT        shift and go to state 376


state 317

    (205) for_statement -> FOR ID ASIGNATION expression . TO expression DO sentence
    (206) for_statement -> FOR ID ASIGNATION expression . DOWNTO expression DO sentence
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    TO              shift and go to state 377
    DOWNTO          shift and go to state 378
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 318

    (207) while_statement -> WHILE expression DO sentence .

    SEMICOLON       reduce using rule 207 (while_statement -> WHILE expression DO sentence .)
    ELSE            reduce using rule 207 (while_statement -> WHILE expression DO sentence .)


state 319

    (208) repeat_statement -> REPEAT sentences_list UNTIL expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 208 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    ELSE            reduce using rule 208 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 320

    (209) with_statement -> WITH variable_list DO sentence .

    SEMICOLON       reduce using rule 209 (with_statement -> WITH variable_list DO sentence .)
    ELSE            reduce using rule 209 (with_statement -> WITH variable_list DO sentence .)


state 321

    (211) variable_list -> variable_list COMMA variable .
    (260) variable -> variable . DOT ID
    (261) variable -> variable . LBRACKET expression_list RBRACKET
    (262) variable -> variable . CARET

    DO              reduce using rule 211 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 211 (variable_list -> variable_list COMMA variable .)
    DOT             shift and go to state 172
    LBRACKET        shift and go to state 100
    CARET           shift and go to state 101


state 322

    (30) const_declaration -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)


state 323

    (31) const_declaration -> ID COLON data_type_list EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    constant                       shift and go to state 379

state 324

    (150) data_type_list -> STRING LBRACKET . NUMBER RBRACKET
    (55) string_type -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 380


state 325

    (152) data_type_list -> ABSOLUTE ID .

    EQUAL           reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    SEMICOLON       reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    ABSOLUTE        reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    RPAREN          reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    END             reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    CASE            reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    ID              reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    OF              reduce using rule 152 (data_type_list -> ABSOLUTE ID .)


state 326

    (76) file_type -> FILE OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 381
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 327

    (58) array_type -> ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (61) type_range_list -> . type_range
    (62) type_range_list -> . type_range_list COMMA type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 384
    ID              shift and go to state 385
    CHAR            shift and go to state 386

    type_range_list                shift and go to state 382
    type_range                     shift and go to state 383

state 328

    (60) array_type -> ARRAY OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 387
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 329

    (59) array_type -> PACKED ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 388


state 330

    (57) record_type -> PACKED RECORD . record_list END
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_list                    shift and go to state 389
    record_declaration             shift and go to state 334
    id_list                        shift and go to state 335

state 331

    (74) pointer_type -> CARET ID .
    (151) data_type_list -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for END resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ID resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for OF resolved using rule 74 (pointer_type -> CARET ID .)
    EQUAL           reduce using rule 74 (pointer_type -> CARET ID .)
    SEMICOLON       reduce using rule 74 (pointer_type -> CARET ID .)
    ABSOLUTE        reduce using rule 74 (pointer_type -> CARET ID .)
    RPAREN          reduce using rule 74 (pointer_type -> CARET ID .)
    END             reduce using rule 74 (pointer_type -> CARET ID .)
    CASE            reduce using rule 74 (pointer_type -> CARET ID .)
    ID              reduce using rule 74 (pointer_type -> CARET ID .)
    OF              reduce using rule 74 (pointer_type -> CARET ID .)

  ! EQUAL           [ reduce using rule 151 (data_type_list -> ID .) ]
  ! SEMICOLON       [ reduce using rule 151 (data_type_list -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 151 (data_type_list -> ID .) ]
  ! RPAREN          [ reduce using rule 151 (data_type_list -> ID .) ]
  ! END             [ reduce using rule 151 (data_type_list -> ID .) ]
  ! CASE            [ reduce using rule 151 (data_type_list -> ID .) ]
  ! ID              [ reduce using rule 151 (data_type_list -> ID .) ]
  ! OF              [ reduce using rule 151 (data_type_list -> ID .) ]


state 332

    (75) pointer_type -> CARET data_type_list .

    EQUAL           reduce using rule 75 (pointer_type -> CARET data_type_list .)
    SEMICOLON       reduce using rule 75 (pointer_type -> CARET data_type_list .)
    ABSOLUTE        reduce using rule 75 (pointer_type -> CARET data_type_list .)
    RPAREN          reduce using rule 75 (pointer_type -> CARET data_type_list .)
    END             reduce using rule 75 (pointer_type -> CARET data_type_list .)
    CASE            reduce using rule 75 (pointer_type -> CARET data_type_list .)
    ID              reduce using rule 75 (pointer_type -> CARET data_type_list .)
    OF              reduce using rule 75 (pointer_type -> CARET data_type_list .)


state 333

    (56) record_type -> RECORD record_list . END
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 390
    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_declaration             shift and go to state 391
    id_list                        shift and go to state 335

state 334

    (100) record_list -> record_declaration .

    END             reduce using rule 100 (record_list -> record_declaration .)
    CASE            reduce using rule 100 (record_list -> record_declaration .)
    ID              reduce using rule 100 (record_list -> record_declaration .)
    RPAREN          reduce using rule 100 (record_list -> record_declaration .)


state 335

    (101) record_declaration -> id_list . COLON data_type_list SEMICOLON
    (103) record_declaration -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 392
    COMMA           shift and go to state 44


state 336

    (102) record_declaration -> CASE . ID COLON data_type_list OF variant_list

    ID              shift and go to state 393


state 337

    (69) set_type -> SET OF . set_range
    (70) set_range -> . data_type_set
    (71) set_range -> . NUMBER DOBLEDOT NUMBER
    (72) set_range -> . CHAR DOBLEDOT CHAR
    (73) set_range -> . ID
    (161) data_type_set -> . BYTE
    (162) data_type_set -> . SHORTINT
    (163) data_type_set -> . WORD
    (164) data_type_set -> . BOOLEAN
    (165) data_type_set -> . CHAR
    (166) data_type_set -> . ID

    NUMBER          shift and go to state 396
    CHAR            shift and go to state 397
    ID              shift and go to state 398
    BYTE            shift and go to state 399
    SHORTINT        shift and go to state 400
    WORD            shift and go to state 401
    BOOLEAN         shift and go to state 402

    set_range                      shift and go to state 394
    data_type_set                  shift and go to state 395

state 338

    (78) object_type -> OBJECT object_heritage . object_fields object_methods END
    (81) object_fields -> . object_fields var_declaration
    (82) object_fields -> . empty
    (214) empty -> .

    ID              reduce using rule 214 (empty -> .)
    END             reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)

    object_fields                  shift and go to state 403
    empty                          shift and go to state 404

state 339

    (79) object_heritage -> LPAREN . ID RPAREN

    ID              shift and go to state 405


state 340

    (80) object_heritage -> empty .

    ID              reduce using rule 80 (object_heritage -> empty .)
    END             reduce using rule 80 (object_heritage -> empty .)
    PROCEDURE       reduce using rule 80 (object_heritage -> empty .)
    FUNCTION        reduce using rule 80 (object_heritage -> empty .)
    CONSTRUCTOR     reduce using rule 80 (object_heritage -> empty .)
    DESTRUCTOR      reduce using rule 80 (object_heritage -> empty .)


state 341

    (46) type_definition -> ID DOBLEDOT . ID

    ID              shift and go to state 406


state 342

    (41) type_declaration -> ID EQUAL type_definition SEMICOLON .

    ID              reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    BEGIN           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    LABEL           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONST           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    TYPE            reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    VAR             reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    FUNCTION        reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    INTERFACE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)


state 343

    (43) type_definition -> LPAREN id_list . RPAREN
    (7) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 407
    COMMA           shift and go to state 44


state 344

    (44) type_definition -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 408


state 345

    (45) type_definition -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 409


state 346

    (113) var_declaration -> id_list COLON type_definition SEMICOLON .

    ID              reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    BEGIN           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    LABEL           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONST           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    TYPE            reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    VAR             reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    FUNCTION        reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    INTERFACE       reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    END             reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)


state 347

    (114) var_declaration -> id_list COLON type_definition EQUAL . expression SEMICOLON
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 410
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 348

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE . ID SEMICOLON

    ID              shift and go to state 411


state 349

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 350

    (126) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 351

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 412


state 352

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 413


state 353

    (93) method_implementation -> PROCEDURE ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 414


state 354

    (128) parameters -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)


state 355

    (130) parameter_list -> parameter_list SEMICOLON . parameter_group
    (132) parameter_group -> . id_list COLON data_type_list
    (133) parameter_group -> . VAR id_list COLON data_type_list
    (134) parameter_group -> . CONST id_list COLON data_type_list
    (135) parameter_group -> . procedure_header
    (136) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 278
    CONST           shift and go to state 279
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 282
    FUNCTION        shift and go to state 283

    parameter_group                shift and go to state 415
    id_list                        shift and go to state 277
    procedure_header               shift and go to state 280
    function_header                shift and go to state 281

state 356

    (132) parameter_group -> id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 416
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 357

    (133) parameter_group -> VAR id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 417
    COMMA           shift and go to state 44


state 358

    (134) parameter_group -> CONST id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 418
    COMMA           shift and go to state 44


state 359

    (118) procedure_header -> PROCEDURE ID . parameters
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    RPAREN          reduce using rule 214 (empty -> .)
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 158
    empty                          shift and go to state 160

state 360

    (127) function_header -> FUNCTION ID . parameters COLON data_type_list
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    COLON           reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 162
    empty                          shift and go to state 160

state 361

    (94) method_implementation -> FUNCTION ID DOT ID parameters . COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    COLON           shift and go to state 419


state 362

    (127) function_header -> FUNCTION ID parameters COLON data_type_list .

    SEMICOLON       reduce using rule 127 (function_header -> FUNCTION ID parameters COLON data_type_list .)
    RPAREN          reduce using rule 127 (function_header -> FUNCTION ID parameters COLON data_type_list .)


state 363

    (190) procedure_call -> variable DOT ID LPAREN expression_list . RPAREN
    (269) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 420
    COMMA           shift and go to state 288


state 364

    (191) procedure_call -> variable DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 191 (procedure_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 191 (procedure_call -> variable DOT ID LPAREN RPAREN .)


state 365

    (269) expression_list -> expression_list COMMA expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 269 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 269 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 269 (expression_list -> expression_list COMMA expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 366

    (195) if_statement -> IF expression THEN sentence ELSE . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 421
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 367

    (266) function_call -> variable DOT ID LPAREN . expression_list RPAREN
    (267) function_call -> variable DOT ID LPAREN . RPAREN
    (268) expression_list -> . expression
    (269) expression_list -> . expression_list COMMA expression
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 423
    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    variable                       shift and go to state 118
    expression_list                shift and go to state 422
    expression                     shift and go to state 167
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 368

    (264) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 264 (function_call -> ID LPAREN expression_list RPAREN .)


state 369

    (256) set_item_list -> set_item_list COMMA set_item .

    RBRACKET        reduce using rule 256 (set_item_list -> set_item_list COMMA set_item .)
    COMMA           reduce using rule 256 (set_item_list -> set_item_list COMMA set_item .)


state 370

    (254) set_item -> expression DOBLEDOT expression .
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 254 (set_item -> expression DOBLEDOT expression .)
    COMMA           reduce using rule 254 (set_item -> expression DOBLEDOT expression .)
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 371

    (196) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 196 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 196 (case_statement -> CASE expression OF case_list END .)


state 372

    (197) case_statement -> CASE expression OF case_list ELSE . sentences_list SEMICOLON END
    (198) case_statement -> CASE expression OF case_list ELSE . sentences_list END
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (214) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMICOLON       reduce using rule 214 (empty -> .)
    END             reduce using rule 214 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 214 (empty -> .) ]
  ! NEW             [ reduce using rule 214 (empty -> .) ]
  ! BEGIN           [ reduce using rule 214 (empty -> .) ]
  ! IF              [ reduce using rule 214 (empty -> .) ]
  ! CASE            [ reduce using rule 214 (empty -> .) ]
  ! FOR             [ reduce using rule 214 (empty -> .) ]
  ! WHILE           [ reduce using rule 214 (empty -> .) ]
  ! REPEAT          [ reduce using rule 214 (empty -> .) ]
  ! WITH            [ reduce using rule 214 (empty -> .) ]
  ! GOTO            [ reduce using rule 214 (empty -> .) ]
  ! NUMBER          [ reduce using rule 214 (empty -> .) ]
  ! ASM             [ reduce using rule 214 (empty -> .) ]
  ! LPAREN          [ reduce using rule 214 (empty -> .) ]

    sentences_list                 shift and go to state 424
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 373

    (199) case_list -> case_list case_label . COLON sentence SEMICOLON
    (204) case_label -> case_label . COMMA constant

    COLON           shift and go to state 425
    COMMA           shift and go to state 375


state 374

    (200) case_list -> case_label COLON . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 426
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 375

    (204) case_label -> case_label COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    constant                       shift and go to state 427

state 376

    (203) case_label -> constant DOBLEDOT . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    constant                       shift and go to state 428

state 377

    (205) for_statement -> FOR ID ASIGNATION expression TO . expression DO sentence
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 429
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 378

    (206) for_statement -> FOR ID ASIGNATION expression DOWNTO . expression DO sentence
    (215) expression -> . expression OR simple_expression
    (216) expression -> . expression XOR simple_expression
    (217) expression -> . simple_expression
    (218) simple_expression -> . simple_expression AND relational_expression
    (219) simple_expression -> . relational_expression
    (220) relational_expression -> . relational_expression relational_operator additive_expression
    (221) relational_expression -> . additive_expression
    (229) additive_expression -> . additive_expression PLUS multiplicative_expression
    (230) additive_expression -> . additive_expression MINUS multiplicative_expression
    (231) additive_expression -> . multiplicative_expression
    (232) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (233) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (234) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (235) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (236) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (237) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (238) multiplicative_expression -> . unary_expression
    (239) unary_expression -> . NOT unary_expression
    (240) unary_expression -> . MINUS unary_expression
    (241) unary_expression -> . PLUS unary_expression
    (242) unary_expression -> . ADDRESS_OF unary_expression
    (243) unary_expression -> . primary_expression
    (244) primary_expression -> . variable
    (245) primary_expression -> . NUMBER
    (246) primary_expression -> . STRING
    (247) primary_expression -> . TRUE
    (248) primary_expression -> . FALSE
    (249) primary_expression -> . NIL
    (250) primary_expression -> . LPAREN expression RPAREN
    (251) primary_expression -> . function_call
    (252) primary_expression -> . set_constructor
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET
    (264) function_call -> . ID LPAREN expression_list RPAREN
    (265) function_call -> . ID LPAREN RPAREN
    (266) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (267) function_call -> . variable DOT ID LPAREN RPAREN
    (257) set_constructor -> . LBRACKET set_item_list RBRACKET
    (258) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 115
    MINUS           shift and go to state 113
    PLUS            shift and go to state 111
    ADDRESS_OF      shift and go to state 116
    NUMBER          shift and go to state 119
    STRING          shift and go to state 120
    TRUE            shift and go to state 121
    FALSE           shift and go to state 122
    NIL             shift and go to state 123
    LPAREN          shift and go to state 124
    ID              shift and go to state 127
    LBRACKET        shift and go to state 128

    expression                     shift and go to state 430
    simple_expression              shift and go to state 108
    relational_expression          shift and go to state 109
    additive_expression            shift and go to state 110
    multiplicative_expression      shift and go to state 112
    unary_expression               shift and go to state 114
    primary_expression             shift and go to state 117
    variable                       shift and go to state 118
    function_call                  shift and go to state 125
    set_constructor                shift and go to state 126

state 379

    (31) const_declaration -> ID COLON data_type_list EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 431


state 380

    (150) data_type_list -> STRING LBRACKET NUMBER . RBRACKET
    (55) string_type -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 432


state 381

    (76) file_type -> FILE OF data_type_list .

    EQUAL           reduce using rule 76 (file_type -> FILE OF data_type_list .)
    SEMICOLON       reduce using rule 76 (file_type -> FILE OF data_type_list .)
    ABSOLUTE        reduce using rule 76 (file_type -> FILE OF data_type_list .)
    RPAREN          reduce using rule 76 (file_type -> FILE OF data_type_list .)
    END             reduce using rule 76 (file_type -> FILE OF data_type_list .)
    CASE            reduce using rule 76 (file_type -> FILE OF data_type_list .)
    ID              reduce using rule 76 (file_type -> FILE OF data_type_list .)
    OF              reduce using rule 76 (file_type -> FILE OF data_type_list .)


state 382

    (58) array_type -> ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (62) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 433
    COMMA           shift and go to state 434


state 383

    (61) type_range_list -> type_range .

    RBRACKET        reduce using rule 61 (type_range_list -> type_range .)
    COMMA           reduce using rule 61 (type_range_list -> type_range .)


state 384

    (63) type_range -> NUMBER . DOBLEDOT NUMBER
    (64) type_range -> NUMBER . DOBLEDOT ID

    DOBLEDOT        shift and go to state 435


state 385

    (65) type_range -> ID . DOBLEDOT NUMBER
    (67) type_range -> ID . DOBLEDOT ID
    (68) type_range -> ID .

    DOBLEDOT        shift and go to state 436
    RBRACKET        reduce using rule 68 (type_range -> ID .)
    COMMA           reduce using rule 68 (type_range -> ID .)


state 386

    (66) type_range -> CHAR . DOBLEDOT CHAR

    DOBLEDOT        shift and go to state 437


state 387

    (60) array_type -> ARRAY OF data_type_list .

    EQUAL           reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    SEMICOLON       reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    ABSOLUTE        reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    RPAREN          reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    END             reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    CASE            reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    ID              reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    OF              reduce using rule 60 (array_type -> ARRAY OF data_type_list .)


state 388

    (59) array_type -> PACKED ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (61) type_range_list -> . type_range
    (62) type_range_list -> . type_range_list COMMA type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 384
    ID              shift and go to state 385
    CHAR            shift and go to state 386

    type_range_list                shift and go to state 438
    type_range                     shift and go to state 383

state 389

    (57) record_type -> PACKED RECORD record_list . END
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 439
    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_declaration             shift and go to state 391
    id_list                        shift and go to state 335

state 390

    (56) record_type -> RECORD record_list END .

    EQUAL           reduce using rule 56 (record_type -> RECORD record_list END .)
    SEMICOLON       reduce using rule 56 (record_type -> RECORD record_list END .)
    ABSOLUTE        reduce using rule 56 (record_type -> RECORD record_list END .)
    RPAREN          reduce using rule 56 (record_type -> RECORD record_list END .)
    END             reduce using rule 56 (record_type -> RECORD record_list END .)
    CASE            reduce using rule 56 (record_type -> RECORD record_list END .)
    ID              reduce using rule 56 (record_type -> RECORD record_list END .)
    OF              reduce using rule 56 (record_type -> RECORD record_list END .)


state 391

    (99) record_list -> record_list record_declaration .

    END             reduce using rule 99 (record_list -> record_list record_declaration .)
    CASE            reduce using rule 99 (record_list -> record_list record_declaration .)
    ID              reduce using rule 99 (record_list -> record_list record_declaration .)
    RPAREN          reduce using rule 99 (record_list -> record_list record_declaration .)


state 392

    (101) record_declaration -> id_list COLON . data_type_list SEMICOLON
    (103) record_declaration -> id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 440
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 393

    (102) record_declaration -> CASE ID . COLON data_type_list OF variant_list

    COLON           shift and go to state 441


state 394

    (69) set_type -> SET OF set_range .

    EQUAL           reduce using rule 69 (set_type -> SET OF set_range .)
    SEMICOLON       reduce using rule 69 (set_type -> SET OF set_range .)
    ABSOLUTE        reduce using rule 69 (set_type -> SET OF set_range .)
    RPAREN          reduce using rule 69 (set_type -> SET OF set_range .)
    END             reduce using rule 69 (set_type -> SET OF set_range .)
    CASE            reduce using rule 69 (set_type -> SET OF set_range .)
    ID              reduce using rule 69 (set_type -> SET OF set_range .)
    OF              reduce using rule 69 (set_type -> SET OF set_range .)


state 395

    (70) set_range -> data_type_set .

    EQUAL           reduce using rule 70 (set_range -> data_type_set .)
    SEMICOLON       reduce using rule 70 (set_range -> data_type_set .)
    ABSOLUTE        reduce using rule 70 (set_range -> data_type_set .)
    RPAREN          reduce using rule 70 (set_range -> data_type_set .)
    END             reduce using rule 70 (set_range -> data_type_set .)
    CASE            reduce using rule 70 (set_range -> data_type_set .)
    ID              reduce using rule 70 (set_range -> data_type_set .)
    OF              reduce using rule 70 (set_range -> data_type_set .)


state 396

    (71) set_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 442


state 397

    (72) set_range -> CHAR . DOBLEDOT CHAR
    (165) data_type_set -> CHAR .

    DOBLEDOT        shift and go to state 443
    EQUAL           reduce using rule 165 (data_type_set -> CHAR .)
    SEMICOLON       reduce using rule 165 (data_type_set -> CHAR .)
    ABSOLUTE        reduce using rule 165 (data_type_set -> CHAR .)
    RPAREN          reduce using rule 165 (data_type_set -> CHAR .)
    END             reduce using rule 165 (data_type_set -> CHAR .)
    CASE            reduce using rule 165 (data_type_set -> CHAR .)
    ID              reduce using rule 165 (data_type_set -> CHAR .)
    OF              reduce using rule 165 (data_type_set -> CHAR .)


state 398

    (73) set_range -> ID .
    (166) data_type_set -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for END resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 73 (set_range -> ID .)
    EQUAL           reduce using rule 73 (set_range -> ID .)
    SEMICOLON       reduce using rule 73 (set_range -> ID .)
    ABSOLUTE        reduce using rule 73 (set_range -> ID .)
    RPAREN          reduce using rule 73 (set_range -> ID .)
    END             reduce using rule 73 (set_range -> ID .)
    CASE            reduce using rule 73 (set_range -> ID .)
    ID              reduce using rule 73 (set_range -> ID .)
    OF              reduce using rule 73 (set_range -> ID .)

  ! EQUAL           [ reduce using rule 166 (data_type_set -> ID .) ]
  ! SEMICOLON       [ reduce using rule 166 (data_type_set -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 166 (data_type_set -> ID .) ]
  ! RPAREN          [ reduce using rule 166 (data_type_set -> ID .) ]
  ! END             [ reduce using rule 166 (data_type_set -> ID .) ]
  ! CASE            [ reduce using rule 166 (data_type_set -> ID .) ]
  ! ID              [ reduce using rule 166 (data_type_set -> ID .) ]
  ! OF              [ reduce using rule 166 (data_type_set -> ID .) ]


state 399

    (161) data_type_set -> BYTE .

    EQUAL           reduce using rule 161 (data_type_set -> BYTE .)
    SEMICOLON       reduce using rule 161 (data_type_set -> BYTE .)
    ABSOLUTE        reduce using rule 161 (data_type_set -> BYTE .)
    RPAREN          reduce using rule 161 (data_type_set -> BYTE .)
    END             reduce using rule 161 (data_type_set -> BYTE .)
    CASE            reduce using rule 161 (data_type_set -> BYTE .)
    ID              reduce using rule 161 (data_type_set -> BYTE .)
    OF              reduce using rule 161 (data_type_set -> BYTE .)


state 400

    (162) data_type_set -> SHORTINT .

    EQUAL           reduce using rule 162 (data_type_set -> SHORTINT .)
    SEMICOLON       reduce using rule 162 (data_type_set -> SHORTINT .)
    ABSOLUTE        reduce using rule 162 (data_type_set -> SHORTINT .)
    RPAREN          reduce using rule 162 (data_type_set -> SHORTINT .)
    END             reduce using rule 162 (data_type_set -> SHORTINT .)
    CASE            reduce using rule 162 (data_type_set -> SHORTINT .)
    ID              reduce using rule 162 (data_type_set -> SHORTINT .)
    OF              reduce using rule 162 (data_type_set -> SHORTINT .)


state 401

    (163) data_type_set -> WORD .

    EQUAL           reduce using rule 163 (data_type_set -> WORD .)
    SEMICOLON       reduce using rule 163 (data_type_set -> WORD .)
    ABSOLUTE        reduce using rule 163 (data_type_set -> WORD .)
    RPAREN          reduce using rule 163 (data_type_set -> WORD .)
    END             reduce using rule 163 (data_type_set -> WORD .)
    CASE            reduce using rule 163 (data_type_set -> WORD .)
    ID              reduce using rule 163 (data_type_set -> WORD .)
    OF              reduce using rule 163 (data_type_set -> WORD .)


state 402

    (164) data_type_set -> BOOLEAN .

    EQUAL           reduce using rule 164 (data_type_set -> BOOLEAN .)
    SEMICOLON       reduce using rule 164 (data_type_set -> BOOLEAN .)
    ABSOLUTE        reduce using rule 164 (data_type_set -> BOOLEAN .)
    RPAREN          reduce using rule 164 (data_type_set -> BOOLEAN .)
    END             reduce using rule 164 (data_type_set -> BOOLEAN .)
    CASE            reduce using rule 164 (data_type_set -> BOOLEAN .)
    ID              reduce using rule 164 (data_type_set -> BOOLEAN .)
    OF              reduce using rule 164 (data_type_set -> BOOLEAN .)


state 403

    (78) object_type -> OBJECT object_heritage object_fields . object_methods END
    (81) object_fields -> object_fields . var_declaration
    (83) object_methods -> . object_methods method_declaration
    (84) object_methods -> . empty
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (214) empty -> .
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    ID              shift and go to state 13

    object_methods                 shift and go to state 444
    var_declaration                shift and go to state 445
    empty                          shift and go to state 446
    id_list                        shift and go to state 84

state 404

    (82) object_fields -> empty .

    ID              reduce using rule 82 (object_fields -> empty .)
    END             reduce using rule 82 (object_fields -> empty .)
    PROCEDURE       reduce using rule 82 (object_fields -> empty .)
    FUNCTION        reduce using rule 82 (object_fields -> empty .)
    CONSTRUCTOR     reduce using rule 82 (object_fields -> empty .)
    DESTRUCTOR      reduce using rule 82 (object_fields -> empty .)


state 405

    (79) object_heritage -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 447


state 406

    (46) type_definition -> ID DOBLEDOT ID .

    SEMICOLON       reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)
    EQUAL           reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)
    ABSOLUTE        reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)


state 407

    (43) type_definition -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)
    EQUAL           reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)
    ABSOLUTE        reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)


state 408

    (44) type_definition -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    EQUAL           reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)


state 409

    (45) type_definition -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)
    EQUAL           reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)


state 410

    (114) var_declaration -> id_list COLON type_definition EQUAL expression . SEMICOLON
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    SEMICOLON       shift and go to state 448
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 411

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE ID . SEMICOLON

    SEMICOLON       shift and go to state 449


state 412

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 450
    empty                          shift and go to state 11

state 413

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 451
    empty                          shift and go to state 11

state 414

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 452
    empty                          shift and go to state 11

state 415

    (130) parameter_list -> parameter_list SEMICOLON parameter_group .

    RPAREN          reduce using rule 130 (parameter_list -> parameter_list SEMICOLON parameter_group .)
    SEMICOLON       reduce using rule 130 (parameter_list -> parameter_list SEMICOLON parameter_group .)


state 416

    (132) parameter_group -> id_list COLON data_type_list .

    RPAREN          reduce using rule 132 (parameter_group -> id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 132 (parameter_group -> id_list COLON data_type_list .)


state 417

    (133) parameter_group -> VAR id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 453
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 418

    (134) parameter_group -> CONST id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 454
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 419

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON . data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 455
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 420

    (190) procedure_call -> variable DOT ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 190 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 190 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 421

    (195) if_statement -> IF expression THEN sentence ELSE sentence .

    SEMICOLON       reduce using rule 195 (if_statement -> IF expression THEN sentence ELSE sentence .)
    ELSE            reduce using rule 195 (if_statement -> IF expression THEN sentence ELSE sentence .)


state 422

    (266) function_call -> variable DOT ID LPAREN expression_list . RPAREN
    (269) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 456
    COMMA           shift and go to state 288


state 423

    (267) function_call -> variable DOT ID LPAREN RPAREN .

    TIMES           reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIV             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    MOD             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHL             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHR             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    PLUS            reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    MINUS           reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    EQUAL           reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DISTINT         reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESS            reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATER         reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    IN              reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    AND             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    THEN            reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    OR              reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    XOR             reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    OF              reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DO              reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    COMMA           reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    TO              reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 267 (function_call -> variable DOT ID LPAREN RPAREN .)


state 424

    (197) case_statement -> CASE expression OF case_list ELSE sentences_list . SEMICOLON END
    (198) case_statement -> CASE expression OF case_list ELSE sentences_list . END
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 457
    END             shift and go to state 458
    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    LPAREN          shift and go to state 63

  ! SEMICOLON       [ reduce using rule 214 (empty -> .) ]

    sentence                       shift and go to state 95
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 425

    (199) case_list -> case_list case_label COLON . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 459
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 426

    (200) case_list -> case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 460


state 427

    (204) case_label -> case_label COMMA constant .

    COLON           reduce using rule 204 (case_label -> case_label COMMA constant .)
    COMMA           reduce using rule 204 (case_label -> case_label COMMA constant .)


state 428

    (203) case_label -> constant DOBLEDOT constant .

    COLON           reduce using rule 203 (case_label -> constant DOBLEDOT constant .)
    COMMA           reduce using rule 203 (case_label -> constant DOBLEDOT constant .)


state 429

    (205) for_statement -> FOR ID ASIGNATION expression TO expression . DO sentence
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    DO              shift and go to state 461
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 430

    (206) for_statement -> FOR ID ASIGNATION expression DOWNTO expression . DO sentence
    (215) expression -> expression . OR simple_expression
    (216) expression -> expression . XOR simple_expression

    DO              shift and go to state 462
    OR              shift and go to state 176
    XOR             shift and go to state 177


state 431

    (31) const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .

    ID              reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONST           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    VAR             reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)


state 432

    (150) data_type_list -> STRING LBRACKET NUMBER RBRACKET .
    (55) string_type -> STRING LBRACKET NUMBER RBRACKET .

  ! reduce/reduce conflict for EQUAL resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for OF resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ABSOLUTE        reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)

  ! EQUAL           [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ABSOLUTE        [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! END             [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ID              [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! OF              [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]


state 433

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 463


state 434

    (62) type_range_list -> type_range_list COMMA . type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 384
    ID              shift and go to state 385
    CHAR            shift and go to state 386

    type_range                     shift and go to state 464

state 435

    (63) type_range -> NUMBER DOBLEDOT . NUMBER
    (64) type_range -> NUMBER DOBLEDOT . ID

    NUMBER          shift and go to state 465
    ID              shift and go to state 466


state 436

    (65) type_range -> ID DOBLEDOT . NUMBER
    (67) type_range -> ID DOBLEDOT . ID

    NUMBER          shift and go to state 468
    ID              shift and go to state 467


state 437

    (66) type_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 469


state 438

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (62) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 470
    COMMA           shift and go to state 434


state 439

    (57) record_type -> PACKED RECORD record_list END .

    EQUAL           reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    SEMICOLON       reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    ABSOLUTE        reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    RPAREN          reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    END             reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    CASE            reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    ID              reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    OF              reduce using rule 57 (record_type -> PACKED RECORD record_list END .)


state 440

    (101) record_declaration -> id_list COLON data_type_list . SEMICOLON
    (103) record_declaration -> id_list COLON data_type_list .

    SEMICOLON       shift and go to state 471
    END             reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    CASE            reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    ID              reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    RPAREN          reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)


state 441

    (102) record_declaration -> CASE ID COLON . data_type_list OF variant_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 472
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 442

    (71) set_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 473


state 443

    (72) set_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 474


state 444

    (78) object_type -> OBJECT object_heritage object_fields object_methods . END
    (83) object_methods -> object_methods . method_declaration
    (85) method_declaration -> . procedure_header SEMICOLON
    (86) method_declaration -> . function_header SEMICOLON
    (87) method_declaration -> . constructor_declaration
    (88) method_declaration -> . destructor_declaration
    (89) method_declaration -> . procedure_header SEMICOLON directive
    (90) method_declaration -> . function_header SEMICOLON directive
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list
    (95) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON
    (96) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON directive
    (97) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON
    (98) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON directive

    END             shift and go to state 475
    PROCEDURE       shift and go to state 282
    FUNCTION        shift and go to state 283
    CONSTRUCTOR     shift and go to state 481
    DESTRUCTOR      shift and go to state 482

    method_declaration             shift and go to state 476
    procedure_header               shift and go to state 477
    function_header                shift and go to state 478
    constructor_declaration        shift and go to state 479
    destructor_declaration         shift and go to state 480

state 445

    (81) object_fields -> object_fields var_declaration .

    ID              reduce using rule 81 (object_fields -> object_fields var_declaration .)
    END             reduce using rule 81 (object_fields -> object_fields var_declaration .)
    PROCEDURE       reduce using rule 81 (object_fields -> object_fields var_declaration .)
    FUNCTION        reduce using rule 81 (object_fields -> object_fields var_declaration .)
    CONSTRUCTOR     reduce using rule 81 (object_fields -> object_fields var_declaration .)
    DESTRUCTOR      reduce using rule 81 (object_fields -> object_fields var_declaration .)


state 446

    (84) object_methods -> empty .

    END             reduce using rule 84 (object_methods -> empty .)
    PROCEDURE       reduce using rule 84 (object_methods -> empty .)
    FUNCTION        reduce using rule 84 (object_methods -> empty .)
    CONSTRUCTOR     reduce using rule 84 (object_methods -> empty .)
    DESTRUCTOR      reduce using rule 84 (object_methods -> empty .)


state 447

    (79) object_heritage -> LPAREN ID RPAREN .

    ID              reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    END             reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    PROCEDURE       reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    FUNCTION        reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    CONSTRUCTOR     reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    DESTRUCTOR      reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)


state 448

    (114) var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .

    ID              reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    LABEL           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONST           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    TYPE            reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    VAR             reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    PROCEDURE       reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    IMPLEMENTATION  reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    END             reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)


state 449

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .

    ID              reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    BEGIN           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    LABEL           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONST           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    TYPE            reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    VAR             reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    PROCEDURE       reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    FUNCTION        reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    INTERFACE       reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    END             reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)


state 450

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 483
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 451

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 484
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 452

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 485
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 453

    (133) parameter_group -> VAR id_list COLON data_type_list .

    RPAREN          reduce using rule 133 (parameter_group -> VAR id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 133 (parameter_group -> VAR id_list COLON data_type_list .)


state 454

    (134) parameter_group -> CONST id_list COLON data_type_list .

    RPAREN          reduce using rule 134 (parameter_group -> CONST id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 134 (parameter_group -> CONST id_list COLON data_type_list .)


state 455

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 486


state 456

    (266) function_call -> variable DOT ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 266 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 457

    (197) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON . END

    END             shift and go to state 487


state 458

    (198) case_statement -> CASE expression OF case_list ELSE sentences_list END .

    SEMICOLON       reduce using rule 198 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)
    ELSE            reduce using rule 198 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)


state 459

    (199) case_list -> case_list case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 488


state 460

    (200) case_list -> case_label COLON sentence SEMICOLON .

    END             reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 200 (case_list -> case_label COLON sentence SEMICOLON .)


state 461

    (205) for_statement -> FOR ID ASIGNATION expression TO expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 489
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 462

    (206) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (194) if_statement -> . IF expression THEN sentence
    (195) if_statement -> . IF expression THEN sentence ELSE sentence
    (196) case_statement -> . CASE expression OF case_list END
    (197) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (198) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (205) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (206) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (207) while_statement -> . WHILE expression DO sentence
    (208) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (209) with_statement -> . WITH variable_list DO sentence
    (212) goto_statement -> . GOTO NUMBER
    (213) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (214) empty -> .
    (259) variable -> . ID
    (260) variable -> . variable DOT ID
    (261) variable -> . variable LBRACKET expression_list RBRACKET
    (262) variable -> . variable CARET
    (263) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    BEGIN           shift and go to state 30
    IF              shift and go to state 65
    CASE            shift and go to state 66
    FOR             shift and go to state 67
    WHILE           shift and go to state 68
    REPEAT          shift and go to state 69
    WITH            shift and go to state 70
    GOTO            shift and go to state 71
    NUMBER          shift and go to state 72
    ASM             shift and go to state 73
    SEMICOLON       reduce using rule 214 (empty -> .)
    ELSE            reduce using rule 214 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 490
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 96
    variable                       shift and go to state 61

state 463

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 491
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 464

    (62) type_range_list -> type_range_list COMMA type_range .

    RBRACKET        reduce using rule 62 (type_range_list -> type_range_list COMMA type_range .)
    COMMA           reduce using rule 62 (type_range_list -> type_range_list COMMA type_range .)


state 465

    (63) type_range -> NUMBER DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 63 (type_range -> NUMBER DOBLEDOT NUMBER .)
    COMMA           reduce using rule 63 (type_range -> NUMBER DOBLEDOT NUMBER .)


state 466

    (64) type_range -> NUMBER DOBLEDOT ID .

    RBRACKET        reduce using rule 64 (type_range -> NUMBER DOBLEDOT ID .)
    COMMA           reduce using rule 64 (type_range -> NUMBER DOBLEDOT ID .)


state 467

    (67) type_range -> ID DOBLEDOT ID .

    RBRACKET        reduce using rule 67 (type_range -> ID DOBLEDOT ID .)
    COMMA           reduce using rule 67 (type_range -> ID DOBLEDOT ID .)


state 468

    (65) type_range -> ID DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 65 (type_range -> ID DOBLEDOT NUMBER .)
    COMMA           reduce using rule 65 (type_range -> ID DOBLEDOT NUMBER .)


state 469

    (66) type_range -> CHAR DOBLEDOT CHAR .

    RBRACKET        reduce using rule 66 (type_range -> CHAR DOBLEDOT CHAR .)
    COMMA           reduce using rule 66 (type_range -> CHAR DOBLEDOT CHAR .)


state 470

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 492


state 471

    (101) record_declaration -> id_list COLON data_type_list SEMICOLON .

    END             reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    CASE            reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    ID              reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    RPAREN          reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)


state 472

    (102) record_declaration -> CASE ID COLON data_type_list . OF variant_list

    OF              shift and go to state 493


state 473

    (71) set_range -> NUMBER DOBLEDOT NUMBER .

    EQUAL           reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    SEMICOLON       reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    RPAREN          reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    END             reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    CASE            reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ID              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    OF              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)


state 474

    (72) set_range -> CHAR DOBLEDOT CHAR .

    EQUAL           reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    SEMICOLON       reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    RPAREN          reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    END             reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    CASE            reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ID              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    OF              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)


state 475

    (78) object_type -> OBJECT object_heritage object_fields object_methods END .

    EQUAL           reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    SEMICOLON       reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ABSOLUTE        reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    RPAREN          reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    END             reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    CASE            reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ID              reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    OF              reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)


state 476

    (83) object_methods -> object_methods method_declaration .

    END             reduce using rule 83 (object_methods -> object_methods method_declaration .)
    PROCEDURE       reduce using rule 83 (object_methods -> object_methods method_declaration .)
    FUNCTION        reduce using rule 83 (object_methods -> object_methods method_declaration .)
    CONSTRUCTOR     reduce using rule 83 (object_methods -> object_methods method_declaration .)
    DESTRUCTOR      reduce using rule 83 (object_methods -> object_methods method_declaration .)


state 477

    (85) method_declaration -> procedure_header . SEMICOLON
    (89) method_declaration -> procedure_header . SEMICOLON directive

    SEMICOLON       shift and go to state 494


state 478

    (86) method_declaration -> function_header . SEMICOLON
    (90) method_declaration -> function_header . SEMICOLON directive

    SEMICOLON       shift and go to state 495


state 479

    (87) method_declaration -> constructor_declaration .

    END             reduce using rule 87 (method_declaration -> constructor_declaration .)
    PROCEDURE       reduce using rule 87 (method_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 87 (method_declaration -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 87 (method_declaration -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 87 (method_declaration -> constructor_declaration .)


state 480

    (88) method_declaration -> destructor_declaration .

    END             reduce using rule 88 (method_declaration -> destructor_declaration .)
    PROCEDURE       reduce using rule 88 (method_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 88 (method_declaration -> destructor_declaration .)
    CONSTRUCTOR     reduce using rule 88 (method_declaration -> destructor_declaration .)
    DESTRUCTOR      reduce using rule 88 (method_declaration -> destructor_declaration .)


state 481

    (95) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 496


state 482

    (97) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 497


state 483

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 498


state 484

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 499


state 485

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 500


state 486

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (214) empty -> .

    BEGIN           reduce using rule 214 (empty -> .)
    LABEL           reduce using rule 214 (empty -> .)
    CONST           reduce using rule 214 (empty -> .)
    TYPE            reduce using rule 214 (empty -> .)
    VAR             reduce using rule 214 (empty -> .)
    CONSTRUCTOR     reduce using rule 214 (empty -> .)
    DESTRUCTOR      reduce using rule 214 (empty -> .)
    PROCEDURE       reduce using rule 214 (empty -> .)
    FUNCTION        reduce using rule 214 (empty -> .)
    IMPLEMENTATION  reduce using rule 214 (empty -> .)
    INTERFACE       reduce using rule 214 (empty -> .)

    declaration_blocks             shift and go to state 501
    empty                          shift and go to state 11

state 487

    (197) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .

    SEMICOLON       reduce using rule 197 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)
    ELSE            reduce using rule 197 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)


state 488

    (199) case_list -> case_list case_label COLON sentence SEMICOLON .

    END             reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 199 (case_list -> case_list case_label COLON sentence SEMICOLON .)


state 489

    (205) for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .

    SEMICOLON       reduce using rule 205 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)
    ELSE            reduce using rule 205 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)


state 490

    (206) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .

    SEMICOLON       reduce using rule 206 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)
    ELSE            reduce using rule 206 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)


state 491

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 492

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 225
    BYTE            shift and go to state 226
    LONGINT         shift and go to state 227
    SHORTINT        shift and go to state 228
    WORD            shift and go to state 229
    REAL            shift and go to state 230
    SINGLE          shift and go to state 231
    DOUBLE          shift and go to state 232
    EXTENDED        shift and go to state 233
    SHORT           shift and go to state 234
    BOOLEAN         shift and go to state 235
    CHAR            shift and go to state 236
    STRING          shift and go to state 237
    ID              shift and go to state 223
    ABSOLUTE        shift and go to state 238
    FILE            shift and go to state 239
    ARRAY           shift and go to state 247
    PACKED          shift and go to state 248
    CARET           shift and go to state 249
    RECORD          shift and go to state 250
    SET             shift and go to state 251
    OBJECT          shift and go to state 252

    data_type_list                 shift and go to state 502
    array_type                     shift and go to state 240
    pointer_type                   shift and go to state 241
    record_type                    shift and go to state 242
    set_type                       shift and go to state 243
    file_type                      shift and go to state 244
    object_type                    shift and go to state 245
    string_type                    shift and go to state 246

state 493

    (102) record_declaration -> CASE ID COLON data_type_list OF . variant_list
    (104) variant_list -> . variant_list variant
    (105) variant_list -> . variant
    (106) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (108) constant_list -> . constant
    (109) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    variant_list                   shift and go to state 503
    variant                        shift and go to state 504
    constant_list                  shift and go to state 505
    constant                       shift and go to state 506

state 494

    (85) method_declaration -> procedure_header SEMICOLON .
    (89) method_declaration -> procedure_header SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    PROCEDURE       reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    FUNCTION        reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152

    directive                      shift and go to state 507

state 495

    (86) method_declaration -> function_header SEMICOLON .
    (90) method_declaration -> function_header SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    PROCEDURE       reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    FUNCTION        reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152

    directive                      shift and go to state 508

state 496

    (95) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON directive
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 509
    empty                          shift and go to state 160

state 497

    (97) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON directive
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (214) empty -> .

    LPAREN          shift and go to state 159
    SEMICOLON       reduce using rule 214 (empty -> .)

    parameters                     shift and go to state 510
    empty                          shift and go to state 160

state 498

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 499

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 500

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 501

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 511
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 502

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 503

    (102) record_declaration -> CASE ID COLON data_type_list OF variant_list .
    (104) variant_list -> variant_list . variant
    (106) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (108) constant_list -> . constant
    (109) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    CASE            reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    ID              reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    RPAREN          reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    variant                        shift and go to state 512
    constant_list                  shift and go to state 505
    constant                       shift and go to state 506

state 504

    (105) variant_list -> variant .

    NUMBER          reduce using rule 105 (variant_list -> variant .)
    STRING          reduce using rule 105 (variant_list -> variant .)
    TRUE            reduce using rule 105 (variant_list -> variant .)
    FALSE           reduce using rule 105 (variant_list -> variant .)
    NIL             reduce using rule 105 (variant_list -> variant .)
    ORDINAL_CONSTANT reduce using rule 105 (variant_list -> variant .)
    END             reduce using rule 105 (variant_list -> variant .)
    CASE            reduce using rule 105 (variant_list -> variant .)
    ID              reduce using rule 105 (variant_list -> variant .)
    RPAREN          reduce using rule 105 (variant_list -> variant .)


state 505

    (106) variant -> constant_list . COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> constant_list . COLON LPAREN RPAREN SEMICOLON
    (109) constant_list -> constant_list . COMMA constant

    COLON           shift and go to state 513
    COMMA           shift and go to state 514


state 506

    (108) constant_list -> constant .

    COLON           reduce using rule 108 (constant_list -> constant .)
    COMMA           reduce using rule 108 (constant_list -> constant .)


state 507

    (89) method_declaration -> procedure_header SEMICOLON directive .

    END             reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)


state 508

    (90) method_declaration -> function_header SEMICOLON directive .

    END             reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)


state 509

    (95) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 515


state 510

    (97) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 516


state 511

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 517


state 512

    (104) variant_list -> variant_list variant .

    NUMBER          reduce using rule 104 (variant_list -> variant_list variant .)
    STRING          reduce using rule 104 (variant_list -> variant_list variant .)
    TRUE            reduce using rule 104 (variant_list -> variant_list variant .)
    FALSE           reduce using rule 104 (variant_list -> variant_list variant .)
    NIL             reduce using rule 104 (variant_list -> variant_list variant .)
    ORDINAL_CONSTANT reduce using rule 104 (variant_list -> variant_list variant .)
    END             reduce using rule 104 (variant_list -> variant_list variant .)
    CASE            reduce using rule 104 (variant_list -> variant_list variant .)
    ID              reduce using rule 104 (variant_list -> variant_list variant .)
    RPAREN          reduce using rule 104 (variant_list -> variant_list variant .)


state 513

    (106) variant -> constant_list COLON . LPAREN record_list RPAREN SEMICOLON
    (107) variant -> constant_list COLON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 518


state 514

    (109) constant_list -> constant_list COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 217
    STRING          shift and go to state 218
    TRUE            shift and go to state 219
    FALSE           shift and go to state 220
    NIL             shift and go to state 221
    ORDINAL_CONSTANT shift and go to state 222

    constant                       shift and go to state 519

state 515

    (95) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .
    (96) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152

    directive                      shift and go to state 520

state 516

    (97) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .
    (98) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 148
    EXTERNAL        shift and go to state 149
    ASM             shift and go to state 150
    INLINE          shift and go to state 151
    VIRTUAL         shift and go to state 152

    directive                      shift and go to state 521

state 517

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 518

    (106) variant -> constant_list COLON LPAREN . record_list RPAREN SEMICOLON
    (107) variant -> constant_list COLON LPAREN . RPAREN SEMICOLON
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 523
    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_list                    shift and go to state 522
    record_declaration             shift and go to state 334
    id_list                        shift and go to state 335

state 519

    (109) constant_list -> constant_list COMMA constant .

    COLON           reduce using rule 109 (constant_list -> constant_list COMMA constant .)
    COMMA           reduce using rule 109 (constant_list -> constant_list COMMA constant .)


state 520

    (96) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)


state 521

    (98) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)


state 522

    (106) variant -> constant_list COLON LPAREN record_list . RPAREN SEMICOLON
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 524
    CASE            shift and go to state 336
    ID              shift and go to state 13

    record_declaration             shift and go to state 391
    id_list                        shift and go to state 335

state 523

    (107) variant -> constant_list COLON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 525


state 524

    (106) variant -> constant_list COLON LPAREN record_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 526


state 525

    (107) variant -> constant_list COLON LPAREN RPAREN SEMICOLON .

    NUMBER          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    NIL             reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)


state 526

    (106) variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .

    NUMBER          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    STRING          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    NIL             reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    END             reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    CASE            reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ID              reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NEW in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for CASE in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for WITH in state 30 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for ASM in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for ASIGNATION in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for NEW in state 69 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for CASE in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 69 resolved as shift
WARNING: shift/reduce conflict for WITH in state 69 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 69 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 69 resolved as shift
WARNING: shift/reduce conflict for ASM in state 69 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 91 resolved as shift
WARNING: shift/reduce conflict for CONST in state 91 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR in state 91 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 91 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 91 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 91 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 91 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 91 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 91 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 92 resolved as shift
WARNING: shift/reduce conflict for CONST in state 92 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 92 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 92 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 202 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 208 resolved as shift
WARNING: shift/reduce conflict for STRING in state 208 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 208 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 208 resolved as shift
WARNING: shift/reduce conflict for NIL in state 208 resolved as shift
WARNING: shift/reduce conflict for ORDINAL_CONSTANT in state 208 resolved as shift
WARNING: shift/reduce conflict for OF in state 239 resolved as shift
WARNING: shift/reduce conflict for OF in state 239 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 293 resolved as shift
WARNING: shift/reduce conflict for ID in state 372 resolved as shift
WARNING: shift/reduce conflict for NEW in state 372 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 372 resolved as shift
WARNING: shift/reduce conflict for IF in state 372 resolved as shift
WARNING: shift/reduce conflict for CASE in state 372 resolved as shift
WARNING: shift/reduce conflict for FOR in state 372 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 372 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 372 resolved as shift
WARNING: shift/reduce conflict for WITH in state 372 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 372 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 372 resolved as shift
WARNING: shift/reduce conflict for ASM in state 372 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 372 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 424 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (sentences_list -> empty)
WARNING: rejected rule (sentence -> empty) in state 48
WARNING: reduce/reduce conflict in state 237 resolved using rule (string_type -> STRING)
WARNING: rejected rule (data_type_list -> STRING) in state 237
WARNING: reduce/reduce conflict in state 239 resolved using rule (file_type -> FILE)
WARNING: rejected rule (data_type_list -> FILE) in state 239
WARNING: reduce/reduce conflict in state 259 resolved using rule (type_definition -> record_type)
WARNING: rejected rule (data_type_list -> record_type) in state 259
WARNING: reduce/reduce conflict in state 260 resolved using rule (type_definition -> array_type)
WARNING: rejected rule (data_type_list -> array_type) in state 260
WARNING: reduce/reduce conflict in state 261 resolved using rule (type_definition -> set_type)
WARNING: rejected rule (data_type_list -> set_type) in state 261
WARNING: reduce/reduce conflict in state 262 resolved using rule (type_definition -> pointer_type)
WARNING: rejected rule (data_type_list -> pointer_type) in state 262
WARNING: reduce/reduce conflict in state 263 resolved using rule (type_definition -> file_type)
WARNING: rejected rule (data_type_list -> file_type) in state 263
WARNING: reduce/reduce conflict in state 264 resolved using rule (type_definition -> object_type)
WARNING: rejected rule (data_type_list -> object_type) in state 264
WARNING: reduce/reduce conflict in state 265 resolved using rule (type_definition -> string_type)
WARNING: rejected rule (data_type_list -> string_type) in state 265
WARNING: reduce/reduce conflict in state 331 resolved using rule (pointer_type -> CARET ID)
WARNING: rejected rule (data_type_list -> ID) in state 331
WARNING: reduce/reduce conflict in state 398 resolved using rule (set_range -> ID)
WARNING: rejected rule (data_type_set -> ID) in state 398
WARNING: reduce/reduce conflict in state 432 resolved using rule (string_type -> STRING LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) in state 432
WARNING: Rule (data_type_list -> STRING) is never reduced
WARNING: Rule (data_type_list -> FILE) is never reduced
WARNING: Rule (data_type_set -> ID) is never reduced
WARNING: Rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) is never reduced
