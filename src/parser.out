Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    INHERITED
    INTERRUPT
    PRIVATE
    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_header uses_clause declaration_blocks main_block
Rule 2     program_header -> PROGRAM ID SEMICOLON
Rule 3     program_header -> UNIT ID SEMICOLON
Rule 4     uses_clause -> USES id_list SEMICOLON
Rule 5     uses_clause -> empty
Rule 6     id_list -> ID
Rule 7     id_list -> id_list COMMA ID
Rule 8     declaration_blocks -> declaration_blocks declaration_block
Rule 9     declaration_blocks -> empty
Rule 10    declaration_block -> label_declaration
Rule 11    declaration_block -> const_declaration_block
Rule 12    declaration_block -> type_declaration_block
Rule 13    declaration_block -> var_declaration_block
Rule 14    declaration_block -> procedure_declaration
Rule 15    declaration_block -> function_declaration
Rule 16    declaration_block -> constructor_implementation
Rule 17    declaration_block -> destructor_implementation
Rule 18    declaration_block -> method_implementation
Rule 19    declaration_block -> implementation_block
Rule 20    declaration_block -> interface_block
Rule 21    main_block -> compound_statement DOT
Rule 22    interface_block -> INTERFACE declaration_blocks
Rule 23    implementation_block -> IMPLEMENTATION declaration_blocks
Rule 24    label_declaration -> LABEL number_list SEMICOLON
Rule 25    number_list -> NUMBER
Rule 26    number_list -> number_list COMMA NUMBER
Rule 27    const_declaration_block -> CONST const_list
Rule 28    const_list -> const_list const_declaration
Rule 29    const_list -> const_declaration
Rule 30    const_declaration -> ID EQUAL constant SEMICOLON
Rule 31    const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON
Rule 32    constant -> NUMBER
Rule 33    constant -> STRING
Rule 34    constant -> TRUE
Rule 35    constant -> FALSE
Rule 36    constant -> NIL
Rule 37    constant -> ORDINAL_CONSTANT
Rule 38    constant -> set_constructor
Rule 39    type_declaration_block -> TYPE type_list
Rule 40    type_list -> type_list type_declaration
Rule 41    type_list -> type_declaration
Rule 42    type_declaration -> ID EQUAL type_definition SEMICOLON
Rule 43    type_definition -> data_type_list
Rule 44    type_definition -> LPAREN id_list RPAREN
Rule 45    type_definition -> NUMBER DOBLEDOT NUMBER
Rule 46    type_definition -> CHAR DOBLEDOT CHAR
Rule 47    type_definition -> ID DOBLEDOT ID
Rule 48    type_definition -> record_type
Rule 49    type_definition -> array_type
Rule 50    type_definition -> set_type
Rule 51    type_definition -> pointer_type
Rule 52    type_definition -> file_type
Rule 53    type_definition -> object_type
Rule 54    type_definition -> string_type
Rule 55    string_type -> STRING
Rule 56    string_type -> STRING LBRACKET NUMBER RBRACKET
Rule 57    record_type -> RECORD record_list END
Rule 58    record_type -> PACKED RECORD record_list END
Rule 59    array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 60    array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 61    array_type -> ARRAY OF data_type_list
Rule 62    type_range_list -> type_range
Rule 63    type_range_list -> type_range_list COMMA type_range
Rule 64    type_range -> NUMBER DOBLEDOT NUMBER
Rule 65    type_range -> NUMBER DOBLEDOT ID
Rule 66    type_range -> ID DOBLEDOT NUMBER
Rule 67    type_range -> CHAR DOBLEDOT CHAR
Rule 68    type_range -> ID DOBLEDOT ID
Rule 69    type_range -> ID
Rule 70    set_range -> data_type_set
Rule 71    set_range -> NUMBER DOBLEDOT NUMBER
Rule 72    set_range -> CHAR DOBLEDOT CHAR
Rule 73    set_range -> ID
Rule 74    set_type -> SET OF set_range
Rule 75    pointer_type -> CARET ID
Rule 76    pointer_type -> CARET data_type_list
Rule 77    file_type -> FILE OF data_type_list
Rule 78    file_type -> FILE
Rule 79    object_type -> OBJECT object_heritage object_fields object_methods END
Rule 80    object_heritage -> LPAREN ID RPAREN
Rule 81    object_heritage -> empty
Rule 82    object_fields -> object_fields var_declaration
Rule 83    object_fields -> empty
Rule 84    object_methods -> object_methods method_declaration
Rule 85    object_methods -> empty
Rule 86    method_declaration -> procedure_header SEMICOLON
Rule 87    method_declaration -> function_header SEMICOLON
Rule 88    method_declaration -> constructor_declaration
Rule 89    method_declaration -> destructor_declaration
Rule 90    method_declaration -> procedure_header SEMICOLON directive
Rule 91    method_declaration -> function_header SEMICOLON directive
Rule 92    constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 93    destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 94    method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 95    method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 96    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON
Rule 97    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive
Rule 98    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON
Rule 99    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive
Rule 100   record_list -> record_list record_declaration
Rule 101   record_list -> record_declaration
Rule 102   record_declaration -> id_list COLON data_type_list SEMICOLON
Rule 103   record_declaration -> CASE ID COLON data_type_list OF variant_list
Rule 104   record_declaration -> id_list COLON data_type_list
Rule 105   variant_list -> variant_list variant
Rule 106   variant_list -> variant
Rule 107   variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON
Rule 108   variant -> constant_list COLON LPAREN RPAREN SEMICOLON
Rule 109   constant_list -> constant
Rule 110   constant_list -> constant_list COMMA constant
Rule 111   var_declaration_block -> VAR var_list
Rule 112   var_list -> var_list var_declaration
Rule 113   var_list -> var_declaration
Rule 114   var_declaration -> id_list COLON type_definition SEMICOLON
Rule 115   var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON
Rule 116   var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON
Rule 117   procedure_declaration -> procedure_header SEMICOLON directive
Rule 118   procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 119   procedure_header -> PROCEDURE ID parameters
Rule 120   directive -> FORWARD
Rule 121   directive -> EXTERNAL
Rule 122   directive -> EXTERNAL STRING
Rule 123   directive -> ASM
Rule 124   directive -> INLINE
Rule 125   directive -> VIRTUAL
Rule 126   function_declaration -> function_header SEMICOLON directive
Rule 127   function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 128   function_header -> FUNCTION ID parameters COLON data_type_list
Rule 129   parameters -> LPAREN parameter_list RPAREN
Rule 130   parameters -> empty
Rule 131   parameter_list -> parameter_list SEMICOLON parameter_group
Rule 132   parameter_list -> parameter_group
Rule 133   parameter_group -> id_list COLON data_type_list
Rule 134   parameter_group -> VAR id_list COLON data_type_list
Rule 135   parameter_group -> CONST id_list COLON data_type_list
Rule 136   parameter_group -> procedure_header
Rule 137   parameter_group -> function_header
Rule 138   data_type_list -> INTEGER
Rule 139   data_type_list -> BYTE
Rule 140   data_type_list -> LONGINT
Rule 141   data_type_list -> SHORTINT
Rule 142   data_type_list -> WORD
Rule 143   data_type_list -> REAL
Rule 144   data_type_list -> SINGLE
Rule 145   data_type_list -> DOUBLE
Rule 146   data_type_list -> EXTENDED
Rule 147   data_type_list -> SHORT
Rule 148   data_type_list -> BOOLEAN
Rule 149   data_type_list -> CHAR
Rule 150   data_type_list -> STRING
Rule 151   data_type_list -> STRING LBRACKET NUMBER RBRACKET
Rule 152   data_type_list -> ID
Rule 153   data_type_list -> ABSOLUTE ID
Rule 154   data_type_list -> FILE
Rule 155   data_type_list -> array_type
Rule 156   data_type_list -> pointer_type
Rule 157   data_type_list -> record_type
Rule 158   data_type_list -> set_type
Rule 159   data_type_list -> file_type
Rule 160   data_type_list -> object_type
Rule 161   data_type_list -> string_type
Rule 162   data_type_set -> BYTE
Rule 163   data_type_set -> SHORTINT
Rule 164   data_type_set -> WORD
Rule 165   data_type_set -> BOOLEAN
Rule 166   data_type_set -> CHAR
Rule 167   data_type_set -> ID
Rule 168   compound_statement -> BEGIN sentences_list END
Rule 169   sentences_list -> sentences_list sentence SEMICOLON
Rule 170   sentences_list -> sentence SEMICOLON
Rule 171   sentences_list -> empty
Rule 172   sentence -> assignment
Rule 173   sentence -> procedure_call
Rule 174   sentence -> compound_statement
Rule 175   sentence -> if_statement
Rule 176   sentence -> case_statement
Rule 177   sentence -> for_statement
Rule 178   sentence -> while_statement
Rule 179   sentence -> repeat_statement
Rule 180   sentence -> with_statement
Rule 181   sentence -> goto_statement
Rule 182   sentence -> labeled_sentence
Rule 183   sentence -> asm_statement
Rule 184   sentence -> empty
Rule 185   asm_statement -> ASM
Rule 186   assignment -> variable ASIGNATION expression
Rule 187   assignment -> ID ASIGNATION expression
Rule 188   assignment -> variable PLUS_ASIGN expression
Rule 189   assignment -> ID PLUS_ASIGN expression
Rule 190   assignment -> variable MINUS_ASIGN expression
Rule 191   assignment -> ID MINUS_ASIGN expression
Rule 192   assignment -> variable TIMES_ASIGN expression
Rule 193   assignment -> ID TIMES_ASIGN expression
Rule 194   assignment -> variable DIVIDE_ASIGN expression
Rule 195   assignment -> ID DIVIDE_ASIGN expression
Rule 196   assignment -> variable EQUAL expression
Rule 197   assignment -> ID EQUAL expression
Rule 198   procedure_call -> ID
Rule 199   procedure_call -> ID LPAREN expression_list RPAREN
Rule 200   procedure_call -> ID LPAREN RPAREN
Rule 201   procedure_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 202   procedure_call -> variable DOT ID LPAREN RPAREN
Rule 203   procedure_call -> NEW LPAREN expression_list RPAREN
Rule 204   procedure_call -> NEW LPAREN RPAREN
Rule 205   procedure_call -> DISPOSE LPAREN expression_list RPAREN
Rule 206   procedure_call -> DISPOSE LPAREN RPAREN
Rule 207   if_statement -> IF expression THEN sentence
Rule 208   if_statement -> IF expression THEN sentence ELSE sentence
Rule 209   case_statement -> CASE expression OF case_list END
Rule 210   case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END
Rule 211   case_statement -> CASE expression OF case_list ELSE sentences_list END
Rule 212   case_list -> case_list case_label COLON sentence SEMICOLON
Rule 213   case_list -> case_label COLON sentence SEMICOLON
Rule 214   case_list -> empty
Rule 215   case_label -> constant
Rule 216   case_label -> constant DOBLEDOT constant
Rule 217   case_label -> case_label COMMA constant
Rule 218   for_statement -> FOR ID ASIGNATION expression TO expression DO sentence
Rule 219   for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence
Rule 220   for_statement -> FOR ID IN expression DO sentence
Rule 221   while_statement -> WHILE expression DO sentence
Rule 222   repeat_statement -> REPEAT sentences_list UNTIL expression
Rule 223   with_statement -> WITH variable_list DO sentence
Rule 224   variable_list -> variable
Rule 225   variable_list -> variable_list COMMA variable
Rule 226   goto_statement -> GOTO NUMBER
Rule 227   labeled_sentence -> NUMBER COLON sentence
Rule 228   empty -> <empty>
Rule 229   expression -> expression OR simple_expression
Rule 230   expression -> expression XOR simple_expression
Rule 231   expression -> simple_expression
Rule 232   simple_expression -> simple_expression AND relational_expression
Rule 233   simple_expression -> relational_expression
Rule 234   relational_expression -> relational_expression relational_operator additive_expression
Rule 235   relational_expression -> additive_expression
Rule 236   relational_operator -> EQUAL
Rule 237   relational_operator -> DISTINT
Rule 238   relational_operator -> LESS
Rule 239   relational_operator -> LESSEQUAL
Rule 240   relational_operator -> GREATER
Rule 241   relational_operator -> GREATEREQUAL
Rule 242   relational_operator -> IN
Rule 243   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 244   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 245   additive_expression -> multiplicative_expression
Rule 246   multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 247   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 248   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 249   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 250   multiplicative_expression -> multiplicative_expression SHL unary_expression
Rule 251   multiplicative_expression -> multiplicative_expression SHR unary_expression
Rule 252   multiplicative_expression -> unary_expression
Rule 253   unary_expression -> NOT unary_expression
Rule 254   unary_expression -> MINUS unary_expression
Rule 255   unary_expression -> PLUS unary_expression
Rule 256   unary_expression -> ADDRESS_OF unary_expression
Rule 257   unary_expression -> primary_expression
Rule 258   primary_expression -> variable
Rule 259   primary_expression -> NUMBER
Rule 260   primary_expression -> STRING
Rule 261   primary_expression -> TRUE
Rule 262   primary_expression -> FALSE
Rule 263   primary_expression -> NIL
Rule 264   primary_expression -> LPAREN expression RPAREN
Rule 265   primary_expression -> function_call
Rule 266   primary_expression -> set_constructor
Rule 267   set_item -> expression
Rule 268   set_item -> expression DOBLEDOT expression
Rule 269   set_item_list -> set_item
Rule 270   set_item_list -> set_item_list COMMA set_item
Rule 271   set_constructor -> LBRACKET set_item_list RBRACKET
Rule 272   set_constructor -> LBRACKET RBRACKET
Rule 273   variable -> ID
Rule 274   variable -> variable DOT ID
Rule 275   variable -> variable LBRACKET expression_list RBRACKET
Rule 276   variable -> variable CARET
Rule 277   variable -> LPAREN variable RPAREN CARET
Rule 278   function_call -> ID LPAREN expression_list RPAREN
Rule 279   function_call -> ID LPAREN RPAREN
Rule 280   function_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 281   function_call -> variable DOT ID LPAREN RPAREN
Rule 282   expression_list -> expression
Rule 283   expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

ABSOLUTE             : 116 153
ADDRESS_OF           : 256
AND                  : 232
ARRAY                : 59 60 61
ASIGNATION           : 186 187 218 219
ASM                  : 123 185
BEGIN                : 168
BOOLEAN              : 148 165
BYTE                 : 139 162
CARET                : 75 76 276 277
CASE                 : 103 209 210 211
CHAR                 : 46 46 67 67 72 72 149 166
COLON                : 31 95 102 103 104 107 108 114 115 116 128 133 134 135 212 213 227
COMMA                : 7 26 63 110 217 225 270 283
CONST                : 27 135
CONSTRUCTOR          : 92 96 97
DESTRUCTOR           : 93 98 99
DISPOSE              : 205 206
DISTINT              : 237
DIV                  : 248
DIVIDE               : 247
DIVIDE_ASIGN         : 194 195
DO                   : 218 219 220 221 223
DOBLEDOT             : 45 46 47 64 65 66 67 68 71 72 216 268
DOT                  : 21 92 93 94 95 201 202 274 280 281
DOUBLE               : 145
DOWNTO               : 219
ELSE                 : 208 210 211
END                  : 57 58 79 168 209 210 211
EQUAL                : 30 31 42 115 196 197 236
EXIT                 : 
EXTENDED             : 146
EXTERNAL             : 121 122
FALSE                : 35 262
FILE                 : 77 78 154
FOR                  : 218 219 220
FORWARD              : 120
FUNCTION             : 95 128
GOTO                 : 226
GREATER              : 240
GREATEREQUAL         : 241
ID                   : 2 3 6 7 30 31 42 47 47 65 66 68 68 69 73 75 80 92 92 93 93 94 94 95 95 96 97 98 99 103 116 119 128 152 153 167 187 189 191 193 195 197 198 199 200 201 202 218 219 220 273 274 278 279 280 281
IF                   : 207 208
IMPLEMENTATION       : 23
IN                   : 220 242
INHERITED            : 
INLINE               : 124
INTEGER              : 138
INTERFACE            : 22
INTERRUPT            : 
LABEL                : 24
LBRACKET             : 56 59 60 151 271 272 275
LESS                 : 238
LESSEQUAL            : 239
LONGINT              : 140
LPAREN               : 44 80 107 108 129 199 200 201 202 203 204 205 206 264 277 278 279 280 281
MINUS                : 244 254
MINUS_ASIGN          : 190 191
MOD                  : 249
NEW                  : 203 204
NIL                  : 36 263
NOT                  : 253
NUMBER               : 25 26 32 45 45 56 64 64 65 66 71 71 151 226 227 259
OBJECT               : 79
OF                   : 59 60 61 74 77 103 209 210 211
OR                   : 229
ORDINAL_CONSTANT     : 37
PACKED               : 58 60
PLUS                 : 243 255
PLUS_ASIGN           : 188 189
PRIVATE              : 
PROCEDURE            : 94 119
PROGRAM              : 2
RBRACKET             : 56 59 60 151 271 272 275
REAL                 : 143
RECORD               : 57 58
REPEAT               : 222
RPAREN               : 44 80 107 108 129 199 200 201 202 203 204 205 206 264 277 278 279 280 281
SEMICOLON            : 2 3 4 24 30 31 42 86 87 90 91 92 92 93 93 94 94 95 95 96 97 98 99 102 107 108 114 115 116 117 118 118 126 127 127 131 169 170 210 212 213
SET                  : 74
SHL                  : 250
SHORT                : 147
SHORTINT             : 141 163
SHR                  : 251
SINGLE               : 144
STRING               : 33 55 56 122 150 151 260
TEXT                 : 
THEN                 : 207 208
TIMES                : 246
TIMES_ASIGN          : 192 193
TO                   : 218
TRUE                 : 34 261
TYPE                 : 39
UNIT                 : 3
UNTIL                : 222
USES                 : 4
VAR                  : 111 134
VIRTUAL              : 125
WHILE                : 221
WITH                 : 223
WORD                 : 142 164
XOR                  : 230
error                : 

Nonterminals, with rules where they appear

additive_expression  : 234 235 243 244
array_type           : 49 155
asm_statement        : 183
assignment           : 172
case_label           : 212 213 217
case_list            : 209 210 211 212
case_statement       : 176
compound_statement   : 21 92 93 94 95 118 127 174
const_declaration    : 28 29
const_declaration_block : 11
const_list           : 27 28
constant             : 30 31 109 110 215 216 216 217
constant_list        : 107 108 110
constructor_declaration : 88
constructor_implementation : 16
data_type_list       : 31 43 59 60 61 76 77 95 102 103 104 128 133 134 135
data_type_set        : 70
declaration_block    : 8
declaration_blocks   : 1 8 22 23 92 93 94 95 118 127
destructor_declaration : 89
destructor_implementation : 17
directive            : 90 91 97 99 117 126
empty                : 5 9 81 83 85 130 171 184 214
expression           : 115 186 187 188 189 190 191 192 193 194 195 196 197 207 208 209 210 211 218 218 219 219 220 221 222 229 230 264 267 268 268 282 283
expression_list      : 199 201 203 205 275 278 280 283
file_type            : 52 159
for_statement        : 177
function_call        : 265
function_declaration : 15
function_header      : 87 91 126 127 137
goto_statement       : 181
id_list              : 4 7 44 102 104 114 115 116 133 134 135
if_statement         : 175
implementation_block : 19
interface_block      : 20
label_declaration    : 10
labeled_sentence     : 182
main_block           : 1
method_declaration   : 84
method_implementation : 18
multiplicative_expression : 243 244 245 246 247 248 249 250 251
number_list          : 24 26
object_fields        : 79 82
object_heritage      : 79
object_methods       : 79 84
object_type          : 53 160
parameter_group      : 131 132
parameter_list       : 129 131
parameters           : 92 93 94 95 96 97 98 99 119 128
pointer_type         : 51 156
primary_expression   : 257
procedure_call       : 173
procedure_declaration : 14
procedure_header     : 86 90 117 118 136
program              : 0
program_header       : 1
record_declaration   : 100 101
record_list          : 57 58 100 107
record_type          : 48 157
relational_expression : 232 233 234
relational_operator  : 234
repeat_statement     : 179
sentence             : 169 170 207 208 208 212 213 218 219 220 221 223 227
sentences_list       : 168 169 210 211 222
set_constructor      : 38 266
set_item             : 269 270
set_item_list        : 270 271
set_range            : 74
set_type             : 50 158
simple_expression    : 229 230 231 232
string_type          : 54 161
type_declaration     : 40 41
type_declaration_block : 12
type_definition      : 42 114 115 116
type_list            : 39 40
type_range           : 62 63
type_range_list      : 59 60 63
unary_expression     : 246 247 248 249 250 251 252 253 254 255 256
uses_clause          : 1
var_declaration      : 82 112 113
var_declaration_block : 13
var_list             : 111 112
variable             : 186 188 190 192 194 196 201 202 224 225 258 274 275 276 277 280 281
variable_list        : 223 225
variant              : 105 106
variant_list         : 103 105
while_statement      : 178
with_statement       : 180

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_header uses_clause declaration_blocks main_block
    (2) program_header -> . PROGRAM ID SEMICOLON
    (3) program_header -> . UNIT ID SEMICOLON

    PROGRAM         shift and go to state 3
    UNIT            shift and go to state 4

    program                        shift and go to state 1
    program_header                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_header . uses_clause declaration_blocks main_block
    (4) uses_clause -> . USES id_list SEMICOLON
    (5) uses_clause -> . empty
    (228) empty -> .

    USES            shift and go to state 6
    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    uses_clause                    shift and go to state 5
    empty                          shift and go to state 7

state 3

    (2) program_header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 8


state 4

    (3) program_header -> UNIT . ID SEMICOLON

    ID              shift and go to state 9


state 5

    (1) program -> program_header uses_clause . declaration_blocks main_block
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 10
    empty                          shift and go to state 11

state 6

    (4) uses_clause -> USES . id_list SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 12

state 7

    (5) uses_clause -> empty .

    BEGIN           reduce using rule 5 (uses_clause -> empty .)
    LABEL           reduce using rule 5 (uses_clause -> empty .)
    CONST           reduce using rule 5 (uses_clause -> empty .)
    TYPE            reduce using rule 5 (uses_clause -> empty .)
    VAR             reduce using rule 5 (uses_clause -> empty .)
    CONSTRUCTOR     reduce using rule 5 (uses_clause -> empty .)
    DESTRUCTOR      reduce using rule 5 (uses_clause -> empty .)
    PROCEDURE       reduce using rule 5 (uses_clause -> empty .)
    FUNCTION        reduce using rule 5 (uses_clause -> empty .)
    IMPLEMENTATION  reduce using rule 5 (uses_clause -> empty .)
    INTERFACE       reduce using rule 5 (uses_clause -> empty .)


state 8

    (2) program_header -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (3) program_header -> UNIT ID . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (1) program -> program_header uses_clause declaration_blocks . main_block
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (21) main_block -> . compound_statement DOT
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (168) compound_statement -> . BEGIN sentences_list END
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    main_block                     shift and go to state 16
    declaration_block              shift and go to state 17
    compound_statement             shift and go to state 18
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 11

    (9) declaration_blocks -> empty .

    BEGIN           reduce using rule 9 (declaration_blocks -> empty .)
    LABEL           reduce using rule 9 (declaration_blocks -> empty .)
    CONST           reduce using rule 9 (declaration_blocks -> empty .)
    TYPE            reduce using rule 9 (declaration_blocks -> empty .)
    VAR             reduce using rule 9 (declaration_blocks -> empty .)
    CONSTRUCTOR     reduce using rule 9 (declaration_blocks -> empty .)
    DESTRUCTOR      reduce using rule 9 (declaration_blocks -> empty .)
    PROCEDURE       reduce using rule 9 (declaration_blocks -> empty .)
    FUNCTION        reduce using rule 9 (declaration_blocks -> empty .)
    IMPLEMENTATION  reduce using rule 9 (declaration_blocks -> empty .)
    INTERFACE       reduce using rule 9 (declaration_blocks -> empty .)


state 12

    (4) uses_clause -> USES id_list . SEMICOLON
    (7) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44


state 13

    (6) id_list -> ID .

    SEMICOLON       reduce using rule 6 (id_list -> ID .)
    COMMA           reduce using rule 6 (id_list -> ID .)
    COLON           reduce using rule 6 (id_list -> ID .)
    RPAREN          reduce using rule 6 (id_list -> ID .)


state 14

    (2) program_header -> PROGRAM ID SEMICOLON .

    USES            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    BEGIN           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    LABEL           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONST           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    TYPE            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    INTERFACE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)


state 15

    (3) program_header -> UNIT ID SEMICOLON .

    USES            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    BEGIN           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    LABEL           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONST           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    TYPE            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    VAR             reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    INTERFACE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)


state 16

    (1) program -> program_header uses_clause declaration_blocks main_block .

    $end            reduce using rule 1 (program -> program_header uses_clause declaration_blocks main_block .)


state 17

    (8) declaration_blocks -> declaration_blocks declaration_block .

    BEGIN           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    LABEL           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONST           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    TYPE            reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    VAR             reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONSTRUCTOR     reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    DESTRUCTOR      reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    PROCEDURE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    FUNCTION        reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    IMPLEMENTATION  reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    INTERFACE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)


state 18

    (21) main_block -> compound_statement . DOT

    DOT             shift and go to state 45


state 19

    (10) declaration_block -> label_declaration .

    BEGIN           reduce using rule 10 (declaration_block -> label_declaration .)
    LABEL           reduce using rule 10 (declaration_block -> label_declaration .)
    CONST           reduce using rule 10 (declaration_block -> label_declaration .)
    TYPE            reduce using rule 10 (declaration_block -> label_declaration .)
    VAR             reduce using rule 10 (declaration_block -> label_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_block -> label_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_block -> label_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_block -> label_declaration .)
    FUNCTION        reduce using rule 10 (declaration_block -> label_declaration .)
    IMPLEMENTATION  reduce using rule 10 (declaration_block -> label_declaration .)
    INTERFACE       reduce using rule 10 (declaration_block -> label_declaration .)


state 20

    (11) declaration_block -> const_declaration_block .

    BEGIN           reduce using rule 11 (declaration_block -> const_declaration_block .)
    LABEL           reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONST           reduce using rule 11 (declaration_block -> const_declaration_block .)
    TYPE            reduce using rule 11 (declaration_block -> const_declaration_block .)
    VAR             reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONSTRUCTOR     reduce using rule 11 (declaration_block -> const_declaration_block .)
    DESTRUCTOR      reduce using rule 11 (declaration_block -> const_declaration_block .)
    PROCEDURE       reduce using rule 11 (declaration_block -> const_declaration_block .)
    FUNCTION        reduce using rule 11 (declaration_block -> const_declaration_block .)
    IMPLEMENTATION  reduce using rule 11 (declaration_block -> const_declaration_block .)
    INTERFACE       reduce using rule 11 (declaration_block -> const_declaration_block .)


state 21

    (12) declaration_block -> type_declaration_block .

    BEGIN           reduce using rule 12 (declaration_block -> type_declaration_block .)
    LABEL           reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONST           reduce using rule 12 (declaration_block -> type_declaration_block .)
    TYPE            reduce using rule 12 (declaration_block -> type_declaration_block .)
    VAR             reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONSTRUCTOR     reduce using rule 12 (declaration_block -> type_declaration_block .)
    DESTRUCTOR      reduce using rule 12 (declaration_block -> type_declaration_block .)
    PROCEDURE       reduce using rule 12 (declaration_block -> type_declaration_block .)
    FUNCTION        reduce using rule 12 (declaration_block -> type_declaration_block .)
    IMPLEMENTATION  reduce using rule 12 (declaration_block -> type_declaration_block .)
    INTERFACE       reduce using rule 12 (declaration_block -> type_declaration_block .)


state 22

    (13) declaration_block -> var_declaration_block .

    BEGIN           reduce using rule 13 (declaration_block -> var_declaration_block .)
    LABEL           reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONST           reduce using rule 13 (declaration_block -> var_declaration_block .)
    TYPE            reduce using rule 13 (declaration_block -> var_declaration_block .)
    VAR             reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONSTRUCTOR     reduce using rule 13 (declaration_block -> var_declaration_block .)
    DESTRUCTOR      reduce using rule 13 (declaration_block -> var_declaration_block .)
    PROCEDURE       reduce using rule 13 (declaration_block -> var_declaration_block .)
    FUNCTION        reduce using rule 13 (declaration_block -> var_declaration_block .)
    IMPLEMENTATION  reduce using rule 13 (declaration_block -> var_declaration_block .)
    INTERFACE       reduce using rule 13 (declaration_block -> var_declaration_block .)


state 23

    (14) declaration_block -> procedure_declaration .

    BEGIN           reduce using rule 14 (declaration_block -> procedure_declaration .)
    LABEL           reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONST           reduce using rule 14 (declaration_block -> procedure_declaration .)
    TYPE            reduce using rule 14 (declaration_block -> procedure_declaration .)
    VAR             reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 14 (declaration_block -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 14 (declaration_block -> procedure_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_block -> procedure_declaration .)
    FUNCTION        reduce using rule 14 (declaration_block -> procedure_declaration .)
    IMPLEMENTATION  reduce using rule 14 (declaration_block -> procedure_declaration .)
    INTERFACE       reduce using rule 14 (declaration_block -> procedure_declaration .)


state 24

    (15) declaration_block -> function_declaration .

    BEGIN           reduce using rule 15 (declaration_block -> function_declaration .)
    LABEL           reduce using rule 15 (declaration_block -> function_declaration .)
    CONST           reduce using rule 15 (declaration_block -> function_declaration .)
    TYPE            reduce using rule 15 (declaration_block -> function_declaration .)
    VAR             reduce using rule 15 (declaration_block -> function_declaration .)
    CONSTRUCTOR     reduce using rule 15 (declaration_block -> function_declaration .)
    DESTRUCTOR      reduce using rule 15 (declaration_block -> function_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_block -> function_declaration .)
    FUNCTION        reduce using rule 15 (declaration_block -> function_declaration .)
    IMPLEMENTATION  reduce using rule 15 (declaration_block -> function_declaration .)
    INTERFACE       reduce using rule 15 (declaration_block -> function_declaration .)


state 25

    (16) declaration_block -> constructor_implementation .

    BEGIN           reduce using rule 16 (declaration_block -> constructor_implementation .)
    LABEL           reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONST           reduce using rule 16 (declaration_block -> constructor_implementation .)
    TYPE            reduce using rule 16 (declaration_block -> constructor_implementation .)
    VAR             reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONSTRUCTOR     reduce using rule 16 (declaration_block -> constructor_implementation .)
    DESTRUCTOR      reduce using rule 16 (declaration_block -> constructor_implementation .)
    PROCEDURE       reduce using rule 16 (declaration_block -> constructor_implementation .)
    FUNCTION        reduce using rule 16 (declaration_block -> constructor_implementation .)
    IMPLEMENTATION  reduce using rule 16 (declaration_block -> constructor_implementation .)
    INTERFACE       reduce using rule 16 (declaration_block -> constructor_implementation .)


state 26

    (17) declaration_block -> destructor_implementation .

    BEGIN           reduce using rule 17 (declaration_block -> destructor_implementation .)
    LABEL           reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONST           reduce using rule 17 (declaration_block -> destructor_implementation .)
    TYPE            reduce using rule 17 (declaration_block -> destructor_implementation .)
    VAR             reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONSTRUCTOR     reduce using rule 17 (declaration_block -> destructor_implementation .)
    DESTRUCTOR      reduce using rule 17 (declaration_block -> destructor_implementation .)
    PROCEDURE       reduce using rule 17 (declaration_block -> destructor_implementation .)
    FUNCTION        reduce using rule 17 (declaration_block -> destructor_implementation .)
    IMPLEMENTATION  reduce using rule 17 (declaration_block -> destructor_implementation .)
    INTERFACE       reduce using rule 17 (declaration_block -> destructor_implementation .)


state 27

    (18) declaration_block -> method_implementation .

    BEGIN           reduce using rule 18 (declaration_block -> method_implementation .)
    LABEL           reduce using rule 18 (declaration_block -> method_implementation .)
    CONST           reduce using rule 18 (declaration_block -> method_implementation .)
    TYPE            reduce using rule 18 (declaration_block -> method_implementation .)
    VAR             reduce using rule 18 (declaration_block -> method_implementation .)
    CONSTRUCTOR     reduce using rule 18 (declaration_block -> method_implementation .)
    DESTRUCTOR      reduce using rule 18 (declaration_block -> method_implementation .)
    PROCEDURE       reduce using rule 18 (declaration_block -> method_implementation .)
    FUNCTION        reduce using rule 18 (declaration_block -> method_implementation .)
    IMPLEMENTATION  reduce using rule 18 (declaration_block -> method_implementation .)
    INTERFACE       reduce using rule 18 (declaration_block -> method_implementation .)


state 28

    (19) declaration_block -> implementation_block .

    BEGIN           reduce using rule 19 (declaration_block -> implementation_block .)
    LABEL           reduce using rule 19 (declaration_block -> implementation_block .)
    CONST           reduce using rule 19 (declaration_block -> implementation_block .)
    TYPE            reduce using rule 19 (declaration_block -> implementation_block .)
    VAR             reduce using rule 19 (declaration_block -> implementation_block .)
    CONSTRUCTOR     reduce using rule 19 (declaration_block -> implementation_block .)
    DESTRUCTOR      reduce using rule 19 (declaration_block -> implementation_block .)
    PROCEDURE       reduce using rule 19 (declaration_block -> implementation_block .)
    FUNCTION        reduce using rule 19 (declaration_block -> implementation_block .)
    IMPLEMENTATION  reduce using rule 19 (declaration_block -> implementation_block .)
    INTERFACE       reduce using rule 19 (declaration_block -> implementation_block .)


state 29

    (20) declaration_block -> interface_block .

    BEGIN           reduce using rule 20 (declaration_block -> interface_block .)
    LABEL           reduce using rule 20 (declaration_block -> interface_block .)
    CONST           reduce using rule 20 (declaration_block -> interface_block .)
    TYPE            reduce using rule 20 (declaration_block -> interface_block .)
    VAR             reduce using rule 20 (declaration_block -> interface_block .)
    CONSTRUCTOR     reduce using rule 20 (declaration_block -> interface_block .)
    DESTRUCTOR      reduce using rule 20 (declaration_block -> interface_block .)
    PROCEDURE       reduce using rule 20 (declaration_block -> interface_block .)
    FUNCTION        reduce using rule 20 (declaration_block -> interface_block .)
    IMPLEMENTATION  reduce using rule 20 (declaration_block -> interface_block .)
    INTERFACE       reduce using rule 20 (declaration_block -> interface_block .)


state 30

    (168) compound_statement -> BEGIN . sentences_list END
    (169) sentences_list -> . sentences_list sentence SEMICOLON
    (170) sentences_list -> . sentence SEMICOLON
    (171) sentences_list -> . empty
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (228) empty -> .
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 228 (empty -> .)
    SEMICOLON       reduce using rule 228 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 228 (empty -> .) ]
  ! NEW             [ reduce using rule 228 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 228 (empty -> .) ]
  ! BEGIN           [ reduce using rule 228 (empty -> .) ]
  ! IF              [ reduce using rule 228 (empty -> .) ]
  ! CASE            [ reduce using rule 228 (empty -> .) ]
  ! FOR             [ reduce using rule 228 (empty -> .) ]
  ! WHILE           [ reduce using rule 228 (empty -> .) ]
  ! REPEAT          [ reduce using rule 228 (empty -> .) ]
  ! WITH            [ reduce using rule 228 (empty -> .) ]
  ! GOTO            [ reduce using rule 228 (empty -> .) ]
  ! NUMBER          [ reduce using rule 228 (empty -> .) ]
  ! ASM             [ reduce using rule 228 (empty -> .) ]
  ! LPAREN          [ reduce using rule 228 (empty -> .) ]

    sentences_list                 shift and go to state 46
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 31

    (24) label_declaration -> LABEL . number_list SEMICOLON
    (25) number_list -> . NUMBER
    (26) number_list -> . number_list COMMA NUMBER

    NUMBER          shift and go to state 76

    number_list                    shift and go to state 75

state 32

    (27) const_declaration_block -> CONST . const_list
    (28) const_list -> . const_list const_declaration
    (29) const_list -> . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    ID              shift and go to state 79

    const_list                     shift and go to state 77
    const_declaration              shift and go to state 78

state 33

    (39) type_declaration_block -> TYPE . type_list
    (40) type_list -> . type_list type_declaration
    (41) type_list -> . type_declaration
    (42) type_declaration -> . ID EQUAL type_definition SEMICOLON

    ID              shift and go to state 82

    type_list                      shift and go to state 80
    type_declaration               shift and go to state 81

state 34

    (111) var_declaration_block -> VAR . var_list
    (112) var_list -> . var_list var_declaration
    (113) var_list -> . var_declaration
    (114) var_declaration -> . id_list COLON type_definition SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (116) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    var_list                       shift and go to state 83
    var_declaration                shift and go to state 84
    id_list                        shift and go to state 85

state 35

    (117) procedure_declaration -> procedure_header . SEMICOLON directive
    (118) procedure_declaration -> procedure_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 86


state 36

    (126) function_declaration -> function_header . SEMICOLON directive
    (127) function_declaration -> function_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 87


state 37

    (92) constructor_implementation -> CONSTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 88


state 38

    (93) destructor_implementation -> DESTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 89


state 39

    (94) method_implementation -> PROCEDURE . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (119) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 90


state 40

    (95) method_implementation -> FUNCTION . ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 91


state 41

    (23) implementation_block -> IMPLEMENTATION . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)
    BEGIN           reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 92
    empty                          shift and go to state 11

state 42

    (22) interface_block -> INTERFACE . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)
    BEGIN           reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 93
    empty                          shift and go to state 11

state 43

    (4) uses_clause -> USES id_list SEMICOLON .

    BEGIN           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    LABEL           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONST           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    VAR             reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    INTERFACE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)


state 44

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 94


state 45

    (21) main_block -> compound_statement DOT .

    $end            reduce using rule 21 (main_block -> compound_statement DOT .)


state 46

    (168) compound_statement -> BEGIN sentences_list . END
    (169) sentences_list -> sentences_list . sentence SEMICOLON
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    END             shift and go to state 95
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 47

    (170) sentences_list -> sentence . SEMICOLON

    SEMICOLON       shift and go to state 98


state 48

    (171) sentences_list -> empty .
    (184) sentence -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 171 (sentences_list -> empty .)
    END             reduce using rule 171 (sentences_list -> empty .)
    ID              reduce using rule 171 (sentences_list -> empty .)
    NEW             reduce using rule 171 (sentences_list -> empty .)
    DISPOSE         reduce using rule 171 (sentences_list -> empty .)
    BEGIN           reduce using rule 171 (sentences_list -> empty .)
    IF              reduce using rule 171 (sentences_list -> empty .)
    CASE            reduce using rule 171 (sentences_list -> empty .)
    FOR             reduce using rule 171 (sentences_list -> empty .)
    WHILE           reduce using rule 171 (sentences_list -> empty .)
    REPEAT          reduce using rule 171 (sentences_list -> empty .)
    WITH            reduce using rule 171 (sentences_list -> empty .)
    GOTO            reduce using rule 171 (sentences_list -> empty .)
    NUMBER          reduce using rule 171 (sentences_list -> empty .)
    ASM             reduce using rule 171 (sentences_list -> empty .)
    LPAREN          reduce using rule 171 (sentences_list -> empty .)
    SEMICOLON       reduce using rule 171 (sentences_list -> empty .)
    UNTIL           reduce using rule 171 (sentences_list -> empty .)

  ! SEMICOLON       [ reduce using rule 184 (sentence -> empty .) ]


state 49

    (172) sentence -> assignment .

    SEMICOLON       reduce using rule 172 (sentence -> assignment .)
    ELSE            reduce using rule 172 (sentence -> assignment .)


state 50

    (173) sentence -> procedure_call .

    SEMICOLON       reduce using rule 173 (sentence -> procedure_call .)
    ELSE            reduce using rule 173 (sentence -> procedure_call .)


state 51

    (174) sentence -> compound_statement .

    SEMICOLON       reduce using rule 174 (sentence -> compound_statement .)
    ELSE            reduce using rule 174 (sentence -> compound_statement .)


state 52

    (175) sentence -> if_statement .

    SEMICOLON       reduce using rule 175 (sentence -> if_statement .)
    ELSE            reduce using rule 175 (sentence -> if_statement .)


state 53

    (176) sentence -> case_statement .

    SEMICOLON       reduce using rule 176 (sentence -> case_statement .)
    ELSE            reduce using rule 176 (sentence -> case_statement .)


state 54

    (177) sentence -> for_statement .

    SEMICOLON       reduce using rule 177 (sentence -> for_statement .)
    ELSE            reduce using rule 177 (sentence -> for_statement .)


state 55

    (178) sentence -> while_statement .

    SEMICOLON       reduce using rule 178 (sentence -> while_statement .)
    ELSE            reduce using rule 178 (sentence -> while_statement .)


state 56

    (179) sentence -> repeat_statement .

    SEMICOLON       reduce using rule 179 (sentence -> repeat_statement .)
    ELSE            reduce using rule 179 (sentence -> repeat_statement .)


state 57

    (180) sentence -> with_statement .

    SEMICOLON       reduce using rule 180 (sentence -> with_statement .)
    ELSE            reduce using rule 180 (sentence -> with_statement .)


state 58

    (181) sentence -> goto_statement .

    SEMICOLON       reduce using rule 181 (sentence -> goto_statement .)
    ELSE            reduce using rule 181 (sentence -> goto_statement .)


state 59

    (182) sentence -> labeled_sentence .

    SEMICOLON       reduce using rule 182 (sentence -> labeled_sentence .)
    ELSE            reduce using rule 182 (sentence -> labeled_sentence .)


state 60

    (183) sentence -> asm_statement .

    SEMICOLON       reduce using rule 183 (sentence -> asm_statement .)
    ELSE            reduce using rule 183 (sentence -> asm_statement .)


state 61

    (186) assignment -> variable . ASIGNATION expression
    (188) assignment -> variable . PLUS_ASIGN expression
    (190) assignment -> variable . MINUS_ASIGN expression
    (192) assignment -> variable . TIMES_ASIGN expression
    (194) assignment -> variable . DIVIDE_ASIGN expression
    (196) assignment -> variable . EQUAL expression
    (201) procedure_call -> variable . DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> variable . DOT ID LPAREN RPAREN
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET

    ASIGNATION      shift and go to state 99
    PLUS_ASIGN      shift and go to state 100
    MINUS_ASIGN     shift and go to state 101
    TIMES_ASIGN     shift and go to state 102
    DIVIDE_ASIGN    shift and go to state 103
    EQUAL           shift and go to state 104
    DOT             shift and go to state 105
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 62

    (187) assignment -> ID . ASIGNATION expression
    (189) assignment -> ID . PLUS_ASIGN expression
    (191) assignment -> ID . MINUS_ASIGN expression
    (193) assignment -> ID . TIMES_ASIGN expression
    (195) assignment -> ID . DIVIDE_ASIGN expression
    (197) assignment -> ID . EQUAL expression
    (198) procedure_call -> ID .
    (199) procedure_call -> ID . LPAREN expression_list RPAREN
    (200) procedure_call -> ID . LPAREN RPAREN
    (273) variable -> ID .

  ! shift/reduce conflict for ASIGNATION resolved as shift
  ! shift/reduce conflict for PLUS_ASIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASIGN resolved as shift
  ! shift/reduce conflict for TIMES_ASIGN resolved as shift
  ! shift/reduce conflict for DIVIDE_ASIGN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    ASIGNATION      shift and go to state 108
    PLUS_ASIGN      shift and go to state 109
    MINUS_ASIGN     shift and go to state 110
    TIMES_ASIGN     shift and go to state 111
    DIVIDE_ASIGN    shift and go to state 112
    EQUAL           shift and go to state 113
    SEMICOLON       reduce using rule 198 (procedure_call -> ID .)
    ELSE            reduce using rule 198 (procedure_call -> ID .)
    LPAREN          shift and go to state 114
    DOT             reduce using rule 273 (variable -> ID .)
    LBRACKET        reduce using rule 273 (variable -> ID .)
    CARET           reduce using rule 273 (variable -> ID .)

  ! ASIGNATION      [ reduce using rule 273 (variable -> ID .) ]
  ! PLUS_ASIGN      [ reduce using rule 273 (variable -> ID .) ]
  ! MINUS_ASIGN     [ reduce using rule 273 (variable -> ID .) ]
  ! TIMES_ASIGN     [ reduce using rule 273 (variable -> ID .) ]
  ! DIVIDE_ASIGN    [ reduce using rule 273 (variable -> ID .) ]
  ! EQUAL           [ reduce using rule 273 (variable -> ID .) ]


state 63

    (277) variable -> LPAREN . variable RPAREN CARET
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 116
    LPAREN          shift and go to state 63

    variable                       shift and go to state 115

state 64

    (203) procedure_call -> NEW . LPAREN expression_list RPAREN
    (204) procedure_call -> NEW . LPAREN RPAREN

    LPAREN          shift and go to state 117


state 65

    (205) procedure_call -> DISPOSE . LPAREN expression_list RPAREN
    (206) procedure_call -> DISPOSE . LPAREN RPAREN

    LPAREN          shift and go to state 118


state 66

    (207) if_statement -> IF . expression THEN sentence
    (208) if_statement -> IF . expression THEN sentence ELSE sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 119
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 67

    (209) case_statement -> CASE . expression OF case_list END
    (210) case_statement -> CASE . expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> CASE . expression OF case_list ELSE sentences_list END
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 141
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 68

    (218) for_statement -> FOR . ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> FOR . ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> FOR . ID IN expression DO sentence

    ID              shift and go to state 142


state 69

    (221) while_statement -> WHILE . expression DO sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 143
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 70

    (222) repeat_statement -> REPEAT . sentences_list UNTIL expression
    (169) sentences_list -> . sentences_list sentence SEMICOLON
    (170) sentences_list -> . sentence SEMICOLON
    (171) sentences_list -> . empty
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (228) empty -> .
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    UNTIL           reduce using rule 228 (empty -> .)
    SEMICOLON       reduce using rule 228 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 228 (empty -> .) ]
  ! NEW             [ reduce using rule 228 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 228 (empty -> .) ]
  ! BEGIN           [ reduce using rule 228 (empty -> .) ]
  ! IF              [ reduce using rule 228 (empty -> .) ]
  ! CASE            [ reduce using rule 228 (empty -> .) ]
  ! FOR             [ reduce using rule 228 (empty -> .) ]
  ! WHILE           [ reduce using rule 228 (empty -> .) ]
  ! REPEAT          [ reduce using rule 228 (empty -> .) ]
  ! WITH            [ reduce using rule 228 (empty -> .) ]
  ! GOTO            [ reduce using rule 228 (empty -> .) ]
  ! NUMBER          [ reduce using rule 228 (empty -> .) ]
  ! ASM             [ reduce using rule 228 (empty -> .) ]
  ! LPAREN          [ reduce using rule 228 (empty -> .) ]

    sentences_list                 shift and go to state 144
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 71

    (223) with_statement -> WITH . variable_list DO sentence
    (224) variable_list -> . variable
    (225) variable_list -> . variable_list COMMA variable
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 116
    LPAREN          shift and go to state 63

    variable_list                  shift and go to state 145
    variable                       shift and go to state 146

state 72

    (226) goto_statement -> GOTO . NUMBER

    NUMBER          shift and go to state 147


state 73

    (227) labeled_sentence -> NUMBER . COLON sentence

    COLON           shift and go to state 148


state 74

    (185) asm_statement -> ASM .

    SEMICOLON       reduce using rule 185 (asm_statement -> ASM .)
    ELSE            reduce using rule 185 (asm_statement -> ASM .)


state 75

    (24) label_declaration -> LABEL number_list . SEMICOLON
    (26) number_list -> number_list . COMMA NUMBER

    SEMICOLON       shift and go to state 149
    COMMA           shift and go to state 150


state 76

    (25) number_list -> NUMBER .

    SEMICOLON       reduce using rule 25 (number_list -> NUMBER .)
    COMMA           reduce using rule 25 (number_list -> NUMBER .)


state 77

    (27) const_declaration_block -> CONST const_list .
    (28) const_list -> const_list . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    BEGIN           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    LABEL           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONST           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    TYPE            reduce using rule 27 (const_declaration_block -> CONST const_list .)
    VAR             reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONSTRUCTOR     reduce using rule 27 (const_declaration_block -> CONST const_list .)
    DESTRUCTOR      reduce using rule 27 (const_declaration_block -> CONST const_list .)
    PROCEDURE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    FUNCTION        reduce using rule 27 (const_declaration_block -> CONST const_list .)
    IMPLEMENTATION  reduce using rule 27 (const_declaration_block -> CONST const_list .)
    INTERFACE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    ID              shift and go to state 79

    const_declaration              shift and go to state 151

state 78

    (29) const_list -> const_declaration .

    ID              reduce using rule 29 (const_list -> const_declaration .)
    BEGIN           reduce using rule 29 (const_list -> const_declaration .)
    LABEL           reduce using rule 29 (const_list -> const_declaration .)
    CONST           reduce using rule 29 (const_list -> const_declaration .)
    TYPE            reduce using rule 29 (const_list -> const_declaration .)
    VAR             reduce using rule 29 (const_list -> const_declaration .)
    CONSTRUCTOR     reduce using rule 29 (const_list -> const_declaration .)
    DESTRUCTOR      reduce using rule 29 (const_list -> const_declaration .)
    PROCEDURE       reduce using rule 29 (const_list -> const_declaration .)
    FUNCTION        reduce using rule 29 (const_list -> const_declaration .)
    IMPLEMENTATION  reduce using rule 29 (const_list -> const_declaration .)
    INTERFACE       reduce using rule 29 (const_list -> const_declaration .)


state 79

    (30) const_declaration -> ID . EQUAL constant SEMICOLON
    (31) const_declaration -> ID . COLON data_type_list EQUAL constant SEMICOLON

    EQUAL           shift and go to state 152
    COLON           shift and go to state 153


state 80

    (39) type_declaration_block -> TYPE type_list .
    (40) type_list -> type_list . type_declaration
    (42) type_declaration -> . ID EQUAL type_definition SEMICOLON

    BEGIN           reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    LABEL           reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    CONST           reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    TYPE            reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    VAR             reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    PROCEDURE       reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    FUNCTION        reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    IMPLEMENTATION  reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    INTERFACE       reduce using rule 39 (type_declaration_block -> TYPE type_list .)
    ID              shift and go to state 82

    type_declaration               shift and go to state 154

state 81

    (41) type_list -> type_declaration .

    ID              reduce using rule 41 (type_list -> type_declaration .)
    BEGIN           reduce using rule 41 (type_list -> type_declaration .)
    LABEL           reduce using rule 41 (type_list -> type_declaration .)
    CONST           reduce using rule 41 (type_list -> type_declaration .)
    TYPE            reduce using rule 41 (type_list -> type_declaration .)
    VAR             reduce using rule 41 (type_list -> type_declaration .)
    CONSTRUCTOR     reduce using rule 41 (type_list -> type_declaration .)
    DESTRUCTOR      reduce using rule 41 (type_list -> type_declaration .)
    PROCEDURE       reduce using rule 41 (type_list -> type_declaration .)
    FUNCTION        reduce using rule 41 (type_list -> type_declaration .)
    IMPLEMENTATION  reduce using rule 41 (type_list -> type_declaration .)
    INTERFACE       reduce using rule 41 (type_list -> type_declaration .)


state 82

    (42) type_declaration -> ID . EQUAL type_definition SEMICOLON

    EQUAL           shift and go to state 155


state 83

    (111) var_declaration_block -> VAR var_list .
    (112) var_list -> var_list . var_declaration
    (114) var_declaration -> . id_list COLON type_definition SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (116) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 111 (var_declaration_block -> VAR var_list .)
    LABEL           reduce using rule 111 (var_declaration_block -> VAR var_list .)
    CONST           reduce using rule 111 (var_declaration_block -> VAR var_list .)
    TYPE            reduce using rule 111 (var_declaration_block -> VAR var_list .)
    VAR             reduce using rule 111 (var_declaration_block -> VAR var_list .)
    CONSTRUCTOR     reduce using rule 111 (var_declaration_block -> VAR var_list .)
    DESTRUCTOR      reduce using rule 111 (var_declaration_block -> VAR var_list .)
    PROCEDURE       reduce using rule 111 (var_declaration_block -> VAR var_list .)
    FUNCTION        reduce using rule 111 (var_declaration_block -> VAR var_list .)
    IMPLEMENTATION  reduce using rule 111 (var_declaration_block -> VAR var_list .)
    INTERFACE       reduce using rule 111 (var_declaration_block -> VAR var_list .)
    ID              shift and go to state 13

    var_declaration                shift and go to state 156
    id_list                        shift and go to state 85

state 84

    (113) var_list -> var_declaration .

    ID              reduce using rule 113 (var_list -> var_declaration .)
    BEGIN           reduce using rule 113 (var_list -> var_declaration .)
    LABEL           reduce using rule 113 (var_list -> var_declaration .)
    CONST           reduce using rule 113 (var_list -> var_declaration .)
    TYPE            reduce using rule 113 (var_list -> var_declaration .)
    VAR             reduce using rule 113 (var_list -> var_declaration .)
    CONSTRUCTOR     reduce using rule 113 (var_list -> var_declaration .)
    DESTRUCTOR      reduce using rule 113 (var_list -> var_declaration .)
    PROCEDURE       reduce using rule 113 (var_list -> var_declaration .)
    FUNCTION        reduce using rule 113 (var_list -> var_declaration .)
    IMPLEMENTATION  reduce using rule 113 (var_list -> var_declaration .)
    INTERFACE       reduce using rule 113 (var_list -> var_declaration .)


state 85

    (114) var_declaration -> id_list . COLON type_definition SEMICOLON
    (115) var_declaration -> id_list . COLON type_definition EQUAL expression SEMICOLON
    (116) var_declaration -> id_list . COLON type_definition ABSOLUTE ID SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 157
    COMMA           shift and go to state 44


state 86

    (117) procedure_declaration -> procedure_header SEMICOLON . directive
    (118) procedure_declaration -> procedure_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164
    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    directive                      shift and go to state 158
    declaration_blocks             shift and go to state 159
    empty                          shift and go to state 11

state 87

    (126) function_declaration -> function_header SEMICOLON . directive
    (127) function_declaration -> function_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164
    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    directive                      shift and go to state 165
    declaration_blocks             shift and go to state 166
    empty                          shift and go to state 11

state 88

    (92) constructor_implementation -> CONSTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 167


state 89

    (93) destructor_implementation -> DESTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 168


state 90

    (94) method_implementation -> PROCEDURE ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (119) procedure_header -> PROCEDURE ID . parameters
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    DOT             shift and go to state 169
    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 170
    empty                          shift and go to state 172

state 91

    (95) method_implementation -> FUNCTION ID . DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) function_header -> FUNCTION ID . parameters COLON data_type_list
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    DOT             shift and go to state 173
    LPAREN          shift and go to state 171
    COLON           reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 174
    empty                          shift and go to state 172

state 92

    (23) implementation_block -> IMPLEMENTATION declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONST           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! TYPE            [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! VAR             [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 93

    (22) interface_block -> INTERFACE declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONST           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! TYPE            [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! VAR             [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 94

    (7) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 7 (id_list -> id_list COMMA ID .)


state 95

    (168) compound_statement -> BEGIN sentences_list END .

    DOT             reduce using rule 168 (compound_statement -> BEGIN sentences_list END .)
    SEMICOLON       reduce using rule 168 (compound_statement -> BEGIN sentences_list END .)
    ELSE            reduce using rule 168 (compound_statement -> BEGIN sentences_list END .)


state 96

    (169) sentences_list -> sentences_list sentence . SEMICOLON

    SEMICOLON       shift and go to state 175


state 97

    (184) sentence -> empty .

    SEMICOLON       reduce using rule 184 (sentence -> empty .)
    ELSE            reduce using rule 184 (sentence -> empty .)


state 98

    (170) sentences_list -> sentence SEMICOLON .

    END             reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    ID              reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    NEW             reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    DISPOSE         reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    BEGIN           reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    IF              reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    CASE            reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    FOR             reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    WHILE           reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    REPEAT          reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    WITH            reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    GOTO            reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    NUMBER          reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    ASM             reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    LPAREN          reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    SEMICOLON       reduce using rule 170 (sentences_list -> sentence SEMICOLON .)
    UNTIL           reduce using rule 170 (sentences_list -> sentence SEMICOLON .)


state 99

    (186) assignment -> variable ASIGNATION . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 176
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 100

    (188) assignment -> variable PLUS_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 177
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 101

    (190) assignment -> variable MINUS_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 178
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 102

    (192) assignment -> variable TIMES_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 179
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 103

    (194) assignment -> variable DIVIDE_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 180
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 104

    (196) assignment -> variable EQUAL . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression                     shift and go to state 181
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 105

    (201) procedure_call -> variable DOT . ID LPAREN expression_list RPAREN
    (202) procedure_call -> variable DOT . ID LPAREN RPAREN
    (274) variable -> variable DOT . ID

    ID              shift and go to state 182


state 106

    (275) variable -> variable LBRACKET . expression_list RBRACKET
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression_list                shift and go to state 183
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 107

    (276) variable -> variable CARET .

    ASIGNATION      reduce using rule 276 (variable -> variable CARET .)
    PLUS_ASIGN      reduce using rule 276 (variable -> variable CARET .)
    MINUS_ASIGN     reduce using rule 276 (variable -> variable CARET .)
    TIMES_ASIGN     reduce using rule 276 (variable -> variable CARET .)
    DIVIDE_ASIGN    reduce using rule 276 (variable -> variable CARET .)
    EQUAL           reduce using rule 276 (variable -> variable CARET .)
    DOT             reduce using rule 276 (variable -> variable CARET .)
    LBRACKET        reduce using rule 276 (variable -> variable CARET .)
    CARET           reduce using rule 276 (variable -> variable CARET .)
    RPAREN          reduce using rule 276 (variable -> variable CARET .)
    TIMES           reduce using rule 276 (variable -> variable CARET .)
    DIVIDE          reduce using rule 276 (variable -> variable CARET .)
    DIV             reduce using rule 276 (variable -> variable CARET .)
    MOD             reduce using rule 276 (variable -> variable CARET .)
    SHL             reduce using rule 276 (variable -> variable CARET .)
    SHR             reduce using rule 276 (variable -> variable CARET .)
    PLUS            reduce using rule 276 (variable -> variable CARET .)
    MINUS           reduce using rule 276 (variable -> variable CARET .)
    DISTINT         reduce using rule 276 (variable -> variable CARET .)
    LESS            reduce using rule 276 (variable -> variable CARET .)
    LESSEQUAL       reduce using rule 276 (variable -> variable CARET .)
    GREATER         reduce using rule 276 (variable -> variable CARET .)
    GREATEREQUAL    reduce using rule 276 (variable -> variable CARET .)
    IN              reduce using rule 276 (variable -> variable CARET .)
    AND             reduce using rule 276 (variable -> variable CARET .)
    THEN            reduce using rule 276 (variable -> variable CARET .)
    OR              reduce using rule 276 (variable -> variable CARET .)
    XOR             reduce using rule 276 (variable -> variable CARET .)
    OF              reduce using rule 276 (variable -> variable CARET .)
    DO              reduce using rule 276 (variable -> variable CARET .)
    COMMA           reduce using rule 276 (variable -> variable CARET .)
    SEMICOLON       reduce using rule 276 (variable -> variable CARET .)
    ELSE            reduce using rule 276 (variable -> variable CARET .)
    RBRACKET        reduce using rule 276 (variable -> variable CARET .)
    DOBLEDOT        reduce using rule 276 (variable -> variable CARET .)
    TO              reduce using rule 276 (variable -> variable CARET .)
    DOWNTO          reduce using rule 276 (variable -> variable CARET .)


state 108

    (187) assignment -> ID ASIGNATION . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 185
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 109

    (189) assignment -> ID PLUS_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 186
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 110

    (191) assignment -> ID MINUS_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 187
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 111

    (193) assignment -> ID TIMES_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 188
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 112

    (195) assignment -> ID DIVIDE_ASIGN . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 189
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 113

    (197) assignment -> ID EQUAL . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 190
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 114

    (199) procedure_call -> ID LPAREN . expression_list RPAREN
    (200) procedure_call -> ID LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 192
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression_list                shift and go to state 191
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 115

    (277) variable -> LPAREN variable . RPAREN CARET
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET

    RPAREN          shift and go to state 193
    DOT             shift and go to state 194
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 116

    (273) variable -> ID .

    RPAREN          reduce using rule 273 (variable -> ID .)
    DOT             reduce using rule 273 (variable -> ID .)
    LBRACKET        reduce using rule 273 (variable -> ID .)
    CARET           reduce using rule 273 (variable -> ID .)
    DO              reduce using rule 273 (variable -> ID .)
    COMMA           reduce using rule 273 (variable -> ID .)


state 117

    (203) procedure_call -> NEW LPAREN . expression_list RPAREN
    (204) procedure_call -> NEW LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 196
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression_list                shift and go to state 195
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 118

    (205) procedure_call -> DISPOSE LPAREN . expression_list RPAREN
    (206) procedure_call -> DISPOSE LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 198
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression_list                shift and go to state 197
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 119

    (207) if_statement -> IF expression . THEN sentence
    (208) if_statement -> IF expression . THEN sentence ELSE sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    THEN            shift and go to state 199
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 120

    (231) expression -> simple_expression .
    (232) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 231 (expression -> simple_expression .)
    OR              reduce using rule 231 (expression -> simple_expression .)
    XOR             reduce using rule 231 (expression -> simple_expression .)
    OF              reduce using rule 231 (expression -> simple_expression .)
    DO              reduce using rule 231 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 231 (expression -> simple_expression .)
    ELSE            reduce using rule 231 (expression -> simple_expression .)
    RBRACKET        reduce using rule 231 (expression -> simple_expression .)
    COMMA           reduce using rule 231 (expression -> simple_expression .)
    RPAREN          reduce using rule 231 (expression -> simple_expression .)
    DOBLEDOT        reduce using rule 231 (expression -> simple_expression .)
    TO              reduce using rule 231 (expression -> simple_expression .)
    DOWNTO          reduce using rule 231 (expression -> simple_expression .)
    AND             shift and go to state 202


state 121

    (233) simple_expression -> relational_expression .
    (234) relational_expression -> relational_expression . relational_operator additive_expression
    (236) relational_operator -> . EQUAL
    (237) relational_operator -> . DISTINT
    (238) relational_operator -> . LESS
    (239) relational_operator -> . LESSEQUAL
    (240) relational_operator -> . GREATER
    (241) relational_operator -> . GREATEREQUAL
    (242) relational_operator -> . IN

    AND             reduce using rule 233 (simple_expression -> relational_expression .)
    THEN            reduce using rule 233 (simple_expression -> relational_expression .)
    OR              reduce using rule 233 (simple_expression -> relational_expression .)
    XOR             reduce using rule 233 (simple_expression -> relational_expression .)
    OF              reduce using rule 233 (simple_expression -> relational_expression .)
    DO              reduce using rule 233 (simple_expression -> relational_expression .)
    SEMICOLON       reduce using rule 233 (simple_expression -> relational_expression .)
    ELSE            reduce using rule 233 (simple_expression -> relational_expression .)
    RBRACKET        reduce using rule 233 (simple_expression -> relational_expression .)
    COMMA           reduce using rule 233 (simple_expression -> relational_expression .)
    RPAREN          reduce using rule 233 (simple_expression -> relational_expression .)
    DOBLEDOT        reduce using rule 233 (simple_expression -> relational_expression .)
    TO              reduce using rule 233 (simple_expression -> relational_expression .)
    DOWNTO          reduce using rule 233 (simple_expression -> relational_expression .)
    EQUAL           shift and go to state 204
    DISTINT         shift and go to state 205
    LESS            shift and go to state 206
    LESSEQUAL       shift and go to state 207
    GREATER         shift and go to state 208
    GREATEREQUAL    shift and go to state 209
    IN              shift and go to state 210

    relational_operator            shift and go to state 203

state 122

    (235) relational_expression -> additive_expression .
    (243) additive_expression -> additive_expression . PLUS multiplicative_expression
    (244) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 235 (relational_expression -> additive_expression .)
    DISTINT         reduce using rule 235 (relational_expression -> additive_expression .)
    LESS            reduce using rule 235 (relational_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 235 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 235 (relational_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 235 (relational_expression -> additive_expression .)
    IN              reduce using rule 235 (relational_expression -> additive_expression .)
    AND             reduce using rule 235 (relational_expression -> additive_expression .)
    THEN            reduce using rule 235 (relational_expression -> additive_expression .)
    OR              reduce using rule 235 (relational_expression -> additive_expression .)
    XOR             reduce using rule 235 (relational_expression -> additive_expression .)
    OF              reduce using rule 235 (relational_expression -> additive_expression .)
    DO              reduce using rule 235 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 235 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 235 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 235 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 235 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 235 (relational_expression -> additive_expression .)
    DOBLEDOT        reduce using rule 235 (relational_expression -> additive_expression .)
    TO              reduce using rule 235 (relational_expression -> additive_expression .)
    DOWNTO          reduce using rule 235 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 211
    MINUS           shift and go to state 212


state 123

    (255) unary_expression -> PLUS . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 213
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 124

    (245) additive_expression -> multiplicative_expression .
    (246) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (247) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (248) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (249) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (250) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (251) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 245 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 245 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 245 (additive_expression -> multiplicative_expression .)
    DISTINT         reduce using rule 245 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 245 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 245 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 245 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 245 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 245 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 245 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 245 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 245 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 245 (additive_expression -> multiplicative_expression .)
    OF              reduce using rule 245 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 245 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 245 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 245 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 245 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 245 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 245 (additive_expression -> multiplicative_expression .)
    DOBLEDOT        reduce using rule 245 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 245 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 245 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 125

    (254) unary_expression -> MINUS . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 220
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 126

    (252) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 252 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 252 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DISTINT         reduce using rule 252 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 252 (multiplicative_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 252 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 252 (multiplicative_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 252 (multiplicative_expression -> unary_expression .)
    IN              reduce using rule 252 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    THEN            reduce using rule 252 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 252 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 252 (multiplicative_expression -> unary_expression .)
    OF              reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DO              reduce using rule 252 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 252 (multiplicative_expression -> unary_expression .)
    ELSE            reduce using rule 252 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 252 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 252 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DOBLEDOT        reduce using rule 252 (multiplicative_expression -> unary_expression .)
    TO              reduce using rule 252 (multiplicative_expression -> unary_expression .)
    DOWNTO          reduce using rule 252 (multiplicative_expression -> unary_expression .)


state 127

    (253) unary_expression -> NOT . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 221
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 128

    (256) unary_expression -> ADDRESS_OF . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 222
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 129

    (257) unary_expression -> primary_expression .

    TIMES           reduce using rule 257 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 257 (unary_expression -> primary_expression .)
    DIV             reduce using rule 257 (unary_expression -> primary_expression .)
    MOD             reduce using rule 257 (unary_expression -> primary_expression .)
    SHL             reduce using rule 257 (unary_expression -> primary_expression .)
    SHR             reduce using rule 257 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 257 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 257 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 257 (unary_expression -> primary_expression .)
    DISTINT         reduce using rule 257 (unary_expression -> primary_expression .)
    LESS            reduce using rule 257 (unary_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 257 (unary_expression -> primary_expression .)
    GREATER         reduce using rule 257 (unary_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 257 (unary_expression -> primary_expression .)
    IN              reduce using rule 257 (unary_expression -> primary_expression .)
    AND             reduce using rule 257 (unary_expression -> primary_expression .)
    THEN            reduce using rule 257 (unary_expression -> primary_expression .)
    OR              reduce using rule 257 (unary_expression -> primary_expression .)
    XOR             reduce using rule 257 (unary_expression -> primary_expression .)
    OF              reduce using rule 257 (unary_expression -> primary_expression .)
    DO              reduce using rule 257 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 257 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 257 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 257 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 257 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 257 (unary_expression -> primary_expression .)
    DOBLEDOT        reduce using rule 257 (unary_expression -> primary_expression .)
    TO              reduce using rule 257 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 257 (unary_expression -> primary_expression .)


state 130

    (258) primary_expression -> variable .
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET
    (280) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (281) function_call -> variable . DOT ID LPAREN RPAREN

    TIMES           reduce using rule 258 (primary_expression -> variable .)
    DIVIDE          reduce using rule 258 (primary_expression -> variable .)
    DIV             reduce using rule 258 (primary_expression -> variable .)
    MOD             reduce using rule 258 (primary_expression -> variable .)
    SHL             reduce using rule 258 (primary_expression -> variable .)
    SHR             reduce using rule 258 (primary_expression -> variable .)
    PLUS            reduce using rule 258 (primary_expression -> variable .)
    MINUS           reduce using rule 258 (primary_expression -> variable .)
    EQUAL           reduce using rule 258 (primary_expression -> variable .)
    DISTINT         reduce using rule 258 (primary_expression -> variable .)
    LESS            reduce using rule 258 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 258 (primary_expression -> variable .)
    GREATER         reduce using rule 258 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 258 (primary_expression -> variable .)
    IN              reduce using rule 258 (primary_expression -> variable .)
    AND             reduce using rule 258 (primary_expression -> variable .)
    THEN            reduce using rule 258 (primary_expression -> variable .)
    OR              reduce using rule 258 (primary_expression -> variable .)
    XOR             reduce using rule 258 (primary_expression -> variable .)
    OF              reduce using rule 258 (primary_expression -> variable .)
    DO              reduce using rule 258 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 258 (primary_expression -> variable .)
    ELSE            reduce using rule 258 (primary_expression -> variable .)
    RBRACKET        reduce using rule 258 (primary_expression -> variable .)
    COMMA           reduce using rule 258 (primary_expression -> variable .)
    RPAREN          reduce using rule 258 (primary_expression -> variable .)
    DOBLEDOT        reduce using rule 258 (primary_expression -> variable .)
    TO              reduce using rule 258 (primary_expression -> variable .)
    DOWNTO          reduce using rule 258 (primary_expression -> variable .)
    DOT             shift and go to state 223
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 131

    (259) primary_expression -> NUMBER .

    TIMES           reduce using rule 259 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 259 (primary_expression -> NUMBER .)
    DIV             reduce using rule 259 (primary_expression -> NUMBER .)
    MOD             reduce using rule 259 (primary_expression -> NUMBER .)
    SHL             reduce using rule 259 (primary_expression -> NUMBER .)
    SHR             reduce using rule 259 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 259 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 259 (primary_expression -> NUMBER .)
    EQUAL           reduce using rule 259 (primary_expression -> NUMBER .)
    DISTINT         reduce using rule 259 (primary_expression -> NUMBER .)
    LESS            reduce using rule 259 (primary_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 259 (primary_expression -> NUMBER .)
    GREATER         reduce using rule 259 (primary_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 259 (primary_expression -> NUMBER .)
    IN              reduce using rule 259 (primary_expression -> NUMBER .)
    AND             reduce using rule 259 (primary_expression -> NUMBER .)
    THEN            reduce using rule 259 (primary_expression -> NUMBER .)
    OR              reduce using rule 259 (primary_expression -> NUMBER .)
    XOR             reduce using rule 259 (primary_expression -> NUMBER .)
    OF              reduce using rule 259 (primary_expression -> NUMBER .)
    DO              reduce using rule 259 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 259 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 259 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 259 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 259 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 259 (primary_expression -> NUMBER .)
    DOBLEDOT        reduce using rule 259 (primary_expression -> NUMBER .)
    TO              reduce using rule 259 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 259 (primary_expression -> NUMBER .)


state 132

    (260) primary_expression -> STRING .

    TIMES           reduce using rule 260 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 260 (primary_expression -> STRING .)
    DIV             reduce using rule 260 (primary_expression -> STRING .)
    MOD             reduce using rule 260 (primary_expression -> STRING .)
    SHL             reduce using rule 260 (primary_expression -> STRING .)
    SHR             reduce using rule 260 (primary_expression -> STRING .)
    PLUS            reduce using rule 260 (primary_expression -> STRING .)
    MINUS           reduce using rule 260 (primary_expression -> STRING .)
    EQUAL           reduce using rule 260 (primary_expression -> STRING .)
    DISTINT         reduce using rule 260 (primary_expression -> STRING .)
    LESS            reduce using rule 260 (primary_expression -> STRING .)
    LESSEQUAL       reduce using rule 260 (primary_expression -> STRING .)
    GREATER         reduce using rule 260 (primary_expression -> STRING .)
    GREATEREQUAL    reduce using rule 260 (primary_expression -> STRING .)
    IN              reduce using rule 260 (primary_expression -> STRING .)
    AND             reduce using rule 260 (primary_expression -> STRING .)
    THEN            reduce using rule 260 (primary_expression -> STRING .)
    OR              reduce using rule 260 (primary_expression -> STRING .)
    XOR             reduce using rule 260 (primary_expression -> STRING .)
    OF              reduce using rule 260 (primary_expression -> STRING .)
    DO              reduce using rule 260 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 260 (primary_expression -> STRING .)
    ELSE            reduce using rule 260 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 260 (primary_expression -> STRING .)
    COMMA           reduce using rule 260 (primary_expression -> STRING .)
    RPAREN          reduce using rule 260 (primary_expression -> STRING .)
    DOBLEDOT        reduce using rule 260 (primary_expression -> STRING .)
    TO              reduce using rule 260 (primary_expression -> STRING .)
    DOWNTO          reduce using rule 260 (primary_expression -> STRING .)


state 133

    (261) primary_expression -> TRUE .

    TIMES           reduce using rule 261 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 261 (primary_expression -> TRUE .)
    DIV             reduce using rule 261 (primary_expression -> TRUE .)
    MOD             reduce using rule 261 (primary_expression -> TRUE .)
    SHL             reduce using rule 261 (primary_expression -> TRUE .)
    SHR             reduce using rule 261 (primary_expression -> TRUE .)
    PLUS            reduce using rule 261 (primary_expression -> TRUE .)
    MINUS           reduce using rule 261 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 261 (primary_expression -> TRUE .)
    DISTINT         reduce using rule 261 (primary_expression -> TRUE .)
    LESS            reduce using rule 261 (primary_expression -> TRUE .)
    LESSEQUAL       reduce using rule 261 (primary_expression -> TRUE .)
    GREATER         reduce using rule 261 (primary_expression -> TRUE .)
    GREATEREQUAL    reduce using rule 261 (primary_expression -> TRUE .)
    IN              reduce using rule 261 (primary_expression -> TRUE .)
    AND             reduce using rule 261 (primary_expression -> TRUE .)
    THEN            reduce using rule 261 (primary_expression -> TRUE .)
    OR              reduce using rule 261 (primary_expression -> TRUE .)
    XOR             reduce using rule 261 (primary_expression -> TRUE .)
    OF              reduce using rule 261 (primary_expression -> TRUE .)
    DO              reduce using rule 261 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 261 (primary_expression -> TRUE .)
    ELSE            reduce using rule 261 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 261 (primary_expression -> TRUE .)
    COMMA           reduce using rule 261 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 261 (primary_expression -> TRUE .)
    DOBLEDOT        reduce using rule 261 (primary_expression -> TRUE .)
    TO              reduce using rule 261 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 261 (primary_expression -> TRUE .)


state 134

    (262) primary_expression -> FALSE .

    TIMES           reduce using rule 262 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 262 (primary_expression -> FALSE .)
    DIV             reduce using rule 262 (primary_expression -> FALSE .)
    MOD             reduce using rule 262 (primary_expression -> FALSE .)
    SHL             reduce using rule 262 (primary_expression -> FALSE .)
    SHR             reduce using rule 262 (primary_expression -> FALSE .)
    PLUS            reduce using rule 262 (primary_expression -> FALSE .)
    MINUS           reduce using rule 262 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 262 (primary_expression -> FALSE .)
    DISTINT         reduce using rule 262 (primary_expression -> FALSE .)
    LESS            reduce using rule 262 (primary_expression -> FALSE .)
    LESSEQUAL       reduce using rule 262 (primary_expression -> FALSE .)
    GREATER         reduce using rule 262 (primary_expression -> FALSE .)
    GREATEREQUAL    reduce using rule 262 (primary_expression -> FALSE .)
    IN              reduce using rule 262 (primary_expression -> FALSE .)
    AND             reduce using rule 262 (primary_expression -> FALSE .)
    THEN            reduce using rule 262 (primary_expression -> FALSE .)
    OR              reduce using rule 262 (primary_expression -> FALSE .)
    XOR             reduce using rule 262 (primary_expression -> FALSE .)
    OF              reduce using rule 262 (primary_expression -> FALSE .)
    DO              reduce using rule 262 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 262 (primary_expression -> FALSE .)
    ELSE            reduce using rule 262 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 262 (primary_expression -> FALSE .)
    COMMA           reduce using rule 262 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 262 (primary_expression -> FALSE .)
    DOBLEDOT        reduce using rule 262 (primary_expression -> FALSE .)
    TO              reduce using rule 262 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 262 (primary_expression -> FALSE .)


state 135

    (263) primary_expression -> NIL .

    TIMES           reduce using rule 263 (primary_expression -> NIL .)
    DIVIDE          reduce using rule 263 (primary_expression -> NIL .)
    DIV             reduce using rule 263 (primary_expression -> NIL .)
    MOD             reduce using rule 263 (primary_expression -> NIL .)
    SHL             reduce using rule 263 (primary_expression -> NIL .)
    SHR             reduce using rule 263 (primary_expression -> NIL .)
    PLUS            reduce using rule 263 (primary_expression -> NIL .)
    MINUS           reduce using rule 263 (primary_expression -> NIL .)
    EQUAL           reduce using rule 263 (primary_expression -> NIL .)
    DISTINT         reduce using rule 263 (primary_expression -> NIL .)
    LESS            reduce using rule 263 (primary_expression -> NIL .)
    LESSEQUAL       reduce using rule 263 (primary_expression -> NIL .)
    GREATER         reduce using rule 263 (primary_expression -> NIL .)
    GREATEREQUAL    reduce using rule 263 (primary_expression -> NIL .)
    IN              reduce using rule 263 (primary_expression -> NIL .)
    AND             reduce using rule 263 (primary_expression -> NIL .)
    THEN            reduce using rule 263 (primary_expression -> NIL .)
    OR              reduce using rule 263 (primary_expression -> NIL .)
    XOR             reduce using rule 263 (primary_expression -> NIL .)
    OF              reduce using rule 263 (primary_expression -> NIL .)
    DO              reduce using rule 263 (primary_expression -> NIL .)
    SEMICOLON       reduce using rule 263 (primary_expression -> NIL .)
    ELSE            reduce using rule 263 (primary_expression -> NIL .)
    RBRACKET        reduce using rule 263 (primary_expression -> NIL .)
    COMMA           reduce using rule 263 (primary_expression -> NIL .)
    RPAREN          reduce using rule 263 (primary_expression -> NIL .)
    DOBLEDOT        reduce using rule 263 (primary_expression -> NIL .)
    TO              reduce using rule 263 (primary_expression -> NIL .)
    DOWNTO          reduce using rule 263 (primary_expression -> NIL .)


state 136

    (264) primary_expression -> LPAREN . expression RPAREN
    (277) variable -> LPAREN . variable RPAREN CARET
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 139
    LPAREN          shift and go to state 224
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 225
    variable                       shift and go to state 226
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 137

    (265) primary_expression -> function_call .

    TIMES           reduce using rule 265 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 265 (primary_expression -> function_call .)
    DIV             reduce using rule 265 (primary_expression -> function_call .)
    MOD             reduce using rule 265 (primary_expression -> function_call .)
    SHL             reduce using rule 265 (primary_expression -> function_call .)
    SHR             reduce using rule 265 (primary_expression -> function_call .)
    PLUS            reduce using rule 265 (primary_expression -> function_call .)
    MINUS           reduce using rule 265 (primary_expression -> function_call .)
    EQUAL           reduce using rule 265 (primary_expression -> function_call .)
    DISTINT         reduce using rule 265 (primary_expression -> function_call .)
    LESS            reduce using rule 265 (primary_expression -> function_call .)
    LESSEQUAL       reduce using rule 265 (primary_expression -> function_call .)
    GREATER         reduce using rule 265 (primary_expression -> function_call .)
    GREATEREQUAL    reduce using rule 265 (primary_expression -> function_call .)
    IN              reduce using rule 265 (primary_expression -> function_call .)
    AND             reduce using rule 265 (primary_expression -> function_call .)
    THEN            reduce using rule 265 (primary_expression -> function_call .)
    OR              reduce using rule 265 (primary_expression -> function_call .)
    XOR             reduce using rule 265 (primary_expression -> function_call .)
    OF              reduce using rule 265 (primary_expression -> function_call .)
    DO              reduce using rule 265 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 265 (primary_expression -> function_call .)
    ELSE            reduce using rule 265 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 265 (primary_expression -> function_call .)
    COMMA           reduce using rule 265 (primary_expression -> function_call .)
    RPAREN          reduce using rule 265 (primary_expression -> function_call .)
    DOBLEDOT        reduce using rule 265 (primary_expression -> function_call .)
    TO              reduce using rule 265 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 265 (primary_expression -> function_call .)


state 138

    (266) primary_expression -> set_constructor .

    TIMES           reduce using rule 266 (primary_expression -> set_constructor .)
    DIVIDE          reduce using rule 266 (primary_expression -> set_constructor .)
    DIV             reduce using rule 266 (primary_expression -> set_constructor .)
    MOD             reduce using rule 266 (primary_expression -> set_constructor .)
    SHL             reduce using rule 266 (primary_expression -> set_constructor .)
    SHR             reduce using rule 266 (primary_expression -> set_constructor .)
    PLUS            reduce using rule 266 (primary_expression -> set_constructor .)
    MINUS           reduce using rule 266 (primary_expression -> set_constructor .)
    EQUAL           reduce using rule 266 (primary_expression -> set_constructor .)
    DISTINT         reduce using rule 266 (primary_expression -> set_constructor .)
    LESS            reduce using rule 266 (primary_expression -> set_constructor .)
    LESSEQUAL       reduce using rule 266 (primary_expression -> set_constructor .)
    GREATER         reduce using rule 266 (primary_expression -> set_constructor .)
    GREATEREQUAL    reduce using rule 266 (primary_expression -> set_constructor .)
    IN              reduce using rule 266 (primary_expression -> set_constructor .)
    AND             reduce using rule 266 (primary_expression -> set_constructor .)
    THEN            reduce using rule 266 (primary_expression -> set_constructor .)
    OR              reduce using rule 266 (primary_expression -> set_constructor .)
    XOR             reduce using rule 266 (primary_expression -> set_constructor .)
    OF              reduce using rule 266 (primary_expression -> set_constructor .)
    DO              reduce using rule 266 (primary_expression -> set_constructor .)
    SEMICOLON       reduce using rule 266 (primary_expression -> set_constructor .)
    ELSE            reduce using rule 266 (primary_expression -> set_constructor .)
    RBRACKET        reduce using rule 266 (primary_expression -> set_constructor .)
    COMMA           reduce using rule 266 (primary_expression -> set_constructor .)
    RPAREN          reduce using rule 266 (primary_expression -> set_constructor .)
    DOBLEDOT        reduce using rule 266 (primary_expression -> set_constructor .)
    TO              reduce using rule 266 (primary_expression -> set_constructor .)
    DOWNTO          reduce using rule 266 (primary_expression -> set_constructor .)


state 139

    (273) variable -> ID .
    (278) function_call -> ID . LPAREN expression_list RPAREN
    (279) function_call -> ID . LPAREN RPAREN

    DOT             reduce using rule 273 (variable -> ID .)
    LBRACKET        reduce using rule 273 (variable -> ID .)
    CARET           reduce using rule 273 (variable -> ID .)
    TIMES           reduce using rule 273 (variable -> ID .)
    DIVIDE          reduce using rule 273 (variable -> ID .)
    DIV             reduce using rule 273 (variable -> ID .)
    MOD             reduce using rule 273 (variable -> ID .)
    SHL             reduce using rule 273 (variable -> ID .)
    SHR             reduce using rule 273 (variable -> ID .)
    PLUS            reduce using rule 273 (variable -> ID .)
    MINUS           reduce using rule 273 (variable -> ID .)
    EQUAL           reduce using rule 273 (variable -> ID .)
    DISTINT         reduce using rule 273 (variable -> ID .)
    LESS            reduce using rule 273 (variable -> ID .)
    LESSEQUAL       reduce using rule 273 (variable -> ID .)
    GREATER         reduce using rule 273 (variable -> ID .)
    GREATEREQUAL    reduce using rule 273 (variable -> ID .)
    IN              reduce using rule 273 (variable -> ID .)
    AND             reduce using rule 273 (variable -> ID .)
    THEN            reduce using rule 273 (variable -> ID .)
    OR              reduce using rule 273 (variable -> ID .)
    XOR             reduce using rule 273 (variable -> ID .)
    OF              reduce using rule 273 (variable -> ID .)
    DO              reduce using rule 273 (variable -> ID .)
    SEMICOLON       reduce using rule 273 (variable -> ID .)
    ELSE            reduce using rule 273 (variable -> ID .)
    RBRACKET        reduce using rule 273 (variable -> ID .)
    COMMA           reduce using rule 273 (variable -> ID .)
    RPAREN          reduce using rule 273 (variable -> ID .)
    DOBLEDOT        reduce using rule 273 (variable -> ID .)
    TO              reduce using rule 273 (variable -> ID .)
    DOWNTO          reduce using rule 273 (variable -> ID .)
    LPAREN          shift and go to state 227


state 140

    (271) set_constructor -> LBRACKET . set_item_list RBRACKET
    (272) set_constructor -> LBRACKET . RBRACKET
    (269) set_item_list -> . set_item
    (270) set_item_list -> . set_item_list COMMA set_item
    (267) set_item -> . expression
    (268) set_item -> . expression DOBLEDOT expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 229
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    set_item_list                  shift and go to state 228
    set_item                       shift and go to state 230
    expression                     shift and go to state 231
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 141

    (209) case_statement -> CASE expression . OF case_list END
    (210) case_statement -> CASE expression . OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> CASE expression . OF case_list ELSE sentences_list END
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    OF              shift and go to state 232
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 142

    (218) for_statement -> FOR ID . ASIGNATION expression TO expression DO sentence
    (219) for_statement -> FOR ID . ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> FOR ID . IN expression DO sentence

    ASIGNATION      shift and go to state 233
    IN              shift and go to state 234


state 143

    (221) while_statement -> WHILE expression . DO sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    DO              shift and go to state 235
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 144

    (222) repeat_statement -> REPEAT sentences_list . UNTIL expression
    (169) sentences_list -> sentences_list . sentence SEMICOLON
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    UNTIL           shift and go to state 236
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 145

    (223) with_statement -> WITH variable_list . DO sentence
    (225) variable_list -> variable_list . COMMA variable

    DO              shift and go to state 237
    COMMA           shift and go to state 238


state 146

    (224) variable_list -> variable .
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET

    DO              reduce using rule 224 (variable_list -> variable .)
    COMMA           reduce using rule 224 (variable_list -> variable .)
    DOT             shift and go to state 194
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 147

    (226) goto_statement -> GOTO NUMBER .

    SEMICOLON       reduce using rule 226 (goto_statement -> GOTO NUMBER .)
    ELSE            reduce using rule 226 (goto_statement -> GOTO NUMBER .)


state 148

    (227) labeled_sentence -> NUMBER COLON . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 239
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 149

    (24) label_declaration -> LABEL number_list SEMICOLON .

    BEGIN           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    LABEL           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONST           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    TYPE            reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    VAR             reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    PROCEDURE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    FUNCTION        reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    INTERFACE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)


state 150

    (26) number_list -> number_list COMMA . NUMBER

    NUMBER          shift and go to state 240


state 151

    (28) const_list -> const_list const_declaration .

    ID              reduce using rule 28 (const_list -> const_list const_declaration .)
    BEGIN           reduce using rule 28 (const_list -> const_list const_declaration .)
    LABEL           reduce using rule 28 (const_list -> const_list const_declaration .)
    CONST           reduce using rule 28 (const_list -> const_list const_declaration .)
    TYPE            reduce using rule 28 (const_list -> const_list const_declaration .)
    VAR             reduce using rule 28 (const_list -> const_list const_declaration .)
    CONSTRUCTOR     reduce using rule 28 (const_list -> const_list const_declaration .)
    DESTRUCTOR      reduce using rule 28 (const_list -> const_list const_declaration .)
    PROCEDURE       reduce using rule 28 (const_list -> const_list const_declaration .)
    FUNCTION        reduce using rule 28 (const_list -> const_list const_declaration .)
    IMPLEMENTATION  reduce using rule 28 (const_list -> const_list const_declaration .)
    INTERFACE       reduce using rule 28 (const_list -> const_list const_declaration .)


state 152

    (30) const_declaration -> ID EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    constant                       shift and go to state 241
    set_constructor                shift and go to state 248

state 153

    (31) const_declaration -> ID COLON . data_type_list EQUAL constant SEMICOLON
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 250
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 154

    (40) type_list -> type_list type_declaration .

    ID              reduce using rule 40 (type_list -> type_list type_declaration .)
    BEGIN           reduce using rule 40 (type_list -> type_list type_declaration .)
    LABEL           reduce using rule 40 (type_list -> type_list type_declaration .)
    CONST           reduce using rule 40 (type_list -> type_list type_declaration .)
    TYPE            reduce using rule 40 (type_list -> type_list type_declaration .)
    VAR             reduce using rule 40 (type_list -> type_list type_declaration .)
    CONSTRUCTOR     reduce using rule 40 (type_list -> type_list type_declaration .)
    DESTRUCTOR      reduce using rule 40 (type_list -> type_list type_declaration .)
    PROCEDURE       reduce using rule 40 (type_list -> type_list type_declaration .)
    FUNCTION        reduce using rule 40 (type_list -> type_list type_declaration .)
    IMPLEMENTATION  reduce using rule 40 (type_list -> type_list type_declaration .)
    INTERFACE       reduce using rule 40 (type_list -> type_list type_declaration .)


state 155

    (42) type_declaration -> ID EQUAL . type_definition SEMICOLON
    (43) type_definition -> . data_type_list
    (44) type_definition -> . LPAREN id_list RPAREN
    (45) type_definition -> . NUMBER DOBLEDOT NUMBER
    (46) type_definition -> . CHAR DOBLEDOT CHAR
    (47) type_definition -> . ID DOBLEDOT ID
    (48) type_definition -> . record_type
    (49) type_definition -> . array_type
    (50) type_definition -> . set_type
    (51) type_definition -> . pointer_type
    (52) type_definition -> . file_type
    (53) type_definition -> . object_type
    (54) type_definition -> . string_type
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (74) set_type -> . SET OF set_range
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 282
    NUMBER          shift and go to state 283
    CHAR            shift and go to state 284
    ID              shift and go to state 279
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    RECORD          shift and go to state 276
    PACKED          shift and go to state 292
    ARRAY           shift and go to state 273
    SET             shift and go to state 277
    CARET           shift and go to state 275
    OBJECT          shift and go to state 278

    type_definition                shift and go to state 280
    data_type_list                 shift and go to state 281
    record_type                    shift and go to state 285
    array_type                     shift and go to state 286
    set_type                       shift and go to state 287
    pointer_type                   shift and go to state 288
    file_type                      shift and go to state 289
    object_type                    shift and go to state 290
    string_type                    shift and go to state 291

state 156

    (112) var_list -> var_list var_declaration .

    ID              reduce using rule 112 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 112 (var_list -> var_list var_declaration .)
    LABEL           reduce using rule 112 (var_list -> var_list var_declaration .)
    CONST           reduce using rule 112 (var_list -> var_list var_declaration .)
    TYPE            reduce using rule 112 (var_list -> var_list var_declaration .)
    VAR             reduce using rule 112 (var_list -> var_list var_declaration .)
    CONSTRUCTOR     reduce using rule 112 (var_list -> var_list var_declaration .)
    DESTRUCTOR      reduce using rule 112 (var_list -> var_list var_declaration .)
    PROCEDURE       reduce using rule 112 (var_list -> var_list var_declaration .)
    FUNCTION        reduce using rule 112 (var_list -> var_list var_declaration .)
    IMPLEMENTATION  reduce using rule 112 (var_list -> var_list var_declaration .)
    INTERFACE       reduce using rule 112 (var_list -> var_list var_declaration .)


state 157

    (114) var_declaration -> id_list COLON . type_definition SEMICOLON
    (115) var_declaration -> id_list COLON . type_definition EQUAL expression SEMICOLON
    (116) var_declaration -> id_list COLON . type_definition ABSOLUTE ID SEMICOLON
    (43) type_definition -> . data_type_list
    (44) type_definition -> . LPAREN id_list RPAREN
    (45) type_definition -> . NUMBER DOBLEDOT NUMBER
    (46) type_definition -> . CHAR DOBLEDOT CHAR
    (47) type_definition -> . ID DOBLEDOT ID
    (48) type_definition -> . record_type
    (49) type_definition -> . array_type
    (50) type_definition -> . set_type
    (51) type_definition -> . pointer_type
    (52) type_definition -> . file_type
    (53) type_definition -> . object_type
    (54) type_definition -> . string_type
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (74) set_type -> . SET OF set_range
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 282
    NUMBER          shift and go to state 283
    CHAR            shift and go to state 284
    ID              shift and go to state 279
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    RECORD          shift and go to state 276
    PACKED          shift and go to state 292
    ARRAY           shift and go to state 273
    SET             shift and go to state 277
    CARET           shift and go to state 275
    OBJECT          shift and go to state 278

    type_definition                shift and go to state 293
    data_type_list                 shift and go to state 281
    record_type                    shift and go to state 285
    array_type                     shift and go to state 286
    set_type                       shift and go to state 287
    pointer_type                   shift and go to state 288
    file_type                      shift and go to state 289
    object_type                    shift and go to state 290
    string_type                    shift and go to state 291

state 158

    (117) procedure_declaration -> procedure_header SEMICOLON directive .

    BEGIN           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    LABEL           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    CONST           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    TYPE            reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    VAR             reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)
    INTERFACE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON directive .)


state 159

    (118) procedure_declaration -> procedure_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    procedure_header               shift and go to state 35
    compound_statement             shift and go to state 294
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    function_header                shift and go to state 36

state 160

    (120) directive -> FORWARD .

    BEGIN           reduce using rule 120 (directive -> FORWARD .)
    LABEL           reduce using rule 120 (directive -> FORWARD .)
    CONST           reduce using rule 120 (directive -> FORWARD .)
    TYPE            reduce using rule 120 (directive -> FORWARD .)
    VAR             reduce using rule 120 (directive -> FORWARD .)
    CONSTRUCTOR     reduce using rule 120 (directive -> FORWARD .)
    DESTRUCTOR      reduce using rule 120 (directive -> FORWARD .)
    PROCEDURE       reduce using rule 120 (directive -> FORWARD .)
    FUNCTION        reduce using rule 120 (directive -> FORWARD .)
    IMPLEMENTATION  reduce using rule 120 (directive -> FORWARD .)
    INTERFACE       reduce using rule 120 (directive -> FORWARD .)
    END             reduce using rule 120 (directive -> FORWARD .)


state 161

    (121) directive -> EXTERNAL .
    (122) directive -> EXTERNAL . STRING

    BEGIN           reduce using rule 121 (directive -> EXTERNAL .)
    LABEL           reduce using rule 121 (directive -> EXTERNAL .)
    CONST           reduce using rule 121 (directive -> EXTERNAL .)
    TYPE            reduce using rule 121 (directive -> EXTERNAL .)
    VAR             reduce using rule 121 (directive -> EXTERNAL .)
    CONSTRUCTOR     reduce using rule 121 (directive -> EXTERNAL .)
    DESTRUCTOR      reduce using rule 121 (directive -> EXTERNAL .)
    PROCEDURE       reduce using rule 121 (directive -> EXTERNAL .)
    FUNCTION        reduce using rule 121 (directive -> EXTERNAL .)
    IMPLEMENTATION  reduce using rule 121 (directive -> EXTERNAL .)
    INTERFACE       reduce using rule 121 (directive -> EXTERNAL .)
    END             reduce using rule 121 (directive -> EXTERNAL .)
    STRING          shift and go to state 295


state 162

    (123) directive -> ASM .

    BEGIN           reduce using rule 123 (directive -> ASM .)
    LABEL           reduce using rule 123 (directive -> ASM .)
    CONST           reduce using rule 123 (directive -> ASM .)
    TYPE            reduce using rule 123 (directive -> ASM .)
    VAR             reduce using rule 123 (directive -> ASM .)
    CONSTRUCTOR     reduce using rule 123 (directive -> ASM .)
    DESTRUCTOR      reduce using rule 123 (directive -> ASM .)
    PROCEDURE       reduce using rule 123 (directive -> ASM .)
    FUNCTION        reduce using rule 123 (directive -> ASM .)
    IMPLEMENTATION  reduce using rule 123 (directive -> ASM .)
    INTERFACE       reduce using rule 123 (directive -> ASM .)
    END             reduce using rule 123 (directive -> ASM .)


state 163

    (124) directive -> INLINE .

    BEGIN           reduce using rule 124 (directive -> INLINE .)
    LABEL           reduce using rule 124 (directive -> INLINE .)
    CONST           reduce using rule 124 (directive -> INLINE .)
    TYPE            reduce using rule 124 (directive -> INLINE .)
    VAR             reduce using rule 124 (directive -> INLINE .)
    CONSTRUCTOR     reduce using rule 124 (directive -> INLINE .)
    DESTRUCTOR      reduce using rule 124 (directive -> INLINE .)
    PROCEDURE       reduce using rule 124 (directive -> INLINE .)
    FUNCTION        reduce using rule 124 (directive -> INLINE .)
    IMPLEMENTATION  reduce using rule 124 (directive -> INLINE .)
    INTERFACE       reduce using rule 124 (directive -> INLINE .)
    END             reduce using rule 124 (directive -> INLINE .)


state 164

    (125) directive -> VIRTUAL .

    BEGIN           reduce using rule 125 (directive -> VIRTUAL .)
    LABEL           reduce using rule 125 (directive -> VIRTUAL .)
    CONST           reduce using rule 125 (directive -> VIRTUAL .)
    TYPE            reduce using rule 125 (directive -> VIRTUAL .)
    VAR             reduce using rule 125 (directive -> VIRTUAL .)
    CONSTRUCTOR     reduce using rule 125 (directive -> VIRTUAL .)
    DESTRUCTOR      reduce using rule 125 (directive -> VIRTUAL .)
    PROCEDURE       reduce using rule 125 (directive -> VIRTUAL .)
    FUNCTION        reduce using rule 125 (directive -> VIRTUAL .)
    IMPLEMENTATION  reduce using rule 125 (directive -> VIRTUAL .)
    INTERFACE       reduce using rule 125 (directive -> VIRTUAL .)
    END             reduce using rule 125 (directive -> VIRTUAL .)


state 165

    (126) function_declaration -> function_header SEMICOLON directive .

    BEGIN           reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    LABEL           reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    CONST           reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    TYPE            reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    VAR             reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)
    INTERFACE       reduce using rule 126 (function_declaration -> function_header SEMICOLON directive .)


state 166

    (127) function_declaration -> function_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    function_header                shift and go to state 36
    compound_statement             shift and go to state 296
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35

state 167

    (92) constructor_implementation -> CONSTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 297


state 168

    (93) destructor_implementation -> DESTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 298


state 169

    (94) method_implementation -> PROCEDURE ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 299


state 170

    (119) procedure_header -> PROCEDURE ID parameters .

    SEMICOLON       reduce using rule 119 (procedure_header -> PROCEDURE ID parameters .)
    RPAREN          reduce using rule 119 (procedure_header -> PROCEDURE ID parameters .)


state 171

    (129) parameters -> LPAREN . parameter_list RPAREN
    (131) parameter_list -> . parameter_list SEMICOLON parameter_group
    (132) parameter_list -> . parameter_group
    (133) parameter_group -> . id_list COLON data_type_list
    (134) parameter_group -> . VAR id_list COLON data_type_list
    (135) parameter_group -> . CONST id_list COLON data_type_list
    (136) parameter_group -> . procedure_header
    (137) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 303
    CONST           shift and go to state 304
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308

    parameter_list                 shift and go to state 300
    parameter_group                shift and go to state 301
    id_list                        shift and go to state 302
    procedure_header               shift and go to state 305
    function_header                shift and go to state 306

state 172

    (130) parameters -> empty .

    SEMICOLON       reduce using rule 130 (parameters -> empty .)
    COLON           reduce using rule 130 (parameters -> empty .)
    RPAREN          reduce using rule 130 (parameters -> empty .)


state 173

    (95) method_implementation -> FUNCTION ID DOT . ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 309


state 174

    (128) function_header -> FUNCTION ID parameters . COLON data_type_list

    COLON           shift and go to state 310


state 175

    (169) sentences_list -> sentences_list sentence SEMICOLON .

    END             reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    ID              reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    NEW             reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    DISPOSE         reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    BEGIN           reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    IF              reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    CASE            reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    FOR             reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    WHILE           reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    REPEAT          reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    WITH            reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    GOTO            reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    NUMBER          reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    ASM             reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    LPAREN          reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    SEMICOLON       reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)
    UNTIL           reduce using rule 169 (sentences_list -> sentences_list sentence SEMICOLON .)


state 176

    (186) assignment -> variable ASIGNATION expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 186 (assignment -> variable ASIGNATION expression .)
    ELSE            reduce using rule 186 (assignment -> variable ASIGNATION expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 177

    (188) assignment -> variable PLUS_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 188 (assignment -> variable PLUS_ASIGN expression .)
    ELSE            reduce using rule 188 (assignment -> variable PLUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 178

    (190) assignment -> variable MINUS_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 190 (assignment -> variable MINUS_ASIGN expression .)
    ELSE            reduce using rule 190 (assignment -> variable MINUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 179

    (192) assignment -> variable TIMES_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 192 (assignment -> variable TIMES_ASIGN expression .)
    ELSE            reduce using rule 192 (assignment -> variable TIMES_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 180

    (194) assignment -> variable DIVIDE_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 194 (assignment -> variable DIVIDE_ASIGN expression .)
    ELSE            reduce using rule 194 (assignment -> variable DIVIDE_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 181

    (196) assignment -> variable EQUAL expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 196 (assignment -> variable EQUAL expression .)
    ELSE            reduce using rule 196 (assignment -> variable EQUAL expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 182

    (201) procedure_call -> variable DOT ID . LPAREN expression_list RPAREN
    (202) procedure_call -> variable DOT ID . LPAREN RPAREN
    (274) variable -> variable DOT ID .

    LPAREN          shift and go to state 311
    ASIGNATION      reduce using rule 274 (variable -> variable DOT ID .)
    PLUS_ASIGN      reduce using rule 274 (variable -> variable DOT ID .)
    MINUS_ASIGN     reduce using rule 274 (variable -> variable DOT ID .)
    TIMES_ASIGN     reduce using rule 274 (variable -> variable DOT ID .)
    DIVIDE_ASIGN    reduce using rule 274 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 274 (variable -> variable DOT ID .)
    DOT             reduce using rule 274 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 274 (variable -> variable DOT ID .)
    CARET           reduce using rule 274 (variable -> variable DOT ID .)


state 183

    (275) variable -> variable LBRACKET expression_list . RBRACKET
    (283) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 312
    COMMA           shift and go to state 313


state 184

    (282) expression_list -> expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 282 (expression_list -> expression .)
    COMMA           reduce using rule 282 (expression_list -> expression .)
    RPAREN          reduce using rule 282 (expression_list -> expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 185

    (187) assignment -> ID ASIGNATION expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 187 (assignment -> ID ASIGNATION expression .)
    ELSE            reduce using rule 187 (assignment -> ID ASIGNATION expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 186

    (189) assignment -> ID PLUS_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 189 (assignment -> ID PLUS_ASIGN expression .)
    ELSE            reduce using rule 189 (assignment -> ID PLUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 187

    (191) assignment -> ID MINUS_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 191 (assignment -> ID MINUS_ASIGN expression .)
    ELSE            reduce using rule 191 (assignment -> ID MINUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 188

    (193) assignment -> ID TIMES_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 193 (assignment -> ID TIMES_ASIGN expression .)
    ELSE            reduce using rule 193 (assignment -> ID TIMES_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 189

    (195) assignment -> ID DIVIDE_ASIGN expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 195 (assignment -> ID DIVIDE_ASIGN expression .)
    ELSE            reduce using rule 195 (assignment -> ID DIVIDE_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 190

    (197) assignment -> ID EQUAL expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 197 (assignment -> ID EQUAL expression .)
    ELSE            reduce using rule 197 (assignment -> ID EQUAL expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 191

    (199) procedure_call -> ID LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 314
    COMMA           shift and go to state 313


state 192

    (200) procedure_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 200 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 200 (procedure_call -> ID LPAREN RPAREN .)


state 193

    (277) variable -> LPAREN variable RPAREN . CARET

    CARET           shift and go to state 315


state 194

    (274) variable -> variable DOT . ID

    ID              shift and go to state 316


state 195

    (203) procedure_call -> NEW LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 317
    COMMA           shift and go to state 313


state 196

    (204) procedure_call -> NEW LPAREN RPAREN .

    SEMICOLON       reduce using rule 204 (procedure_call -> NEW LPAREN RPAREN .)
    ELSE            reduce using rule 204 (procedure_call -> NEW LPAREN RPAREN .)


state 197

    (205) procedure_call -> DISPOSE LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 318
    COMMA           shift and go to state 313


state 198

    (206) procedure_call -> DISPOSE LPAREN RPAREN .

    SEMICOLON       reduce using rule 206 (procedure_call -> DISPOSE LPAREN RPAREN .)
    ELSE            reduce using rule 206 (procedure_call -> DISPOSE LPAREN RPAREN .)


state 199

    (207) if_statement -> IF expression THEN . sentence
    (208) if_statement -> IF expression THEN . sentence ELSE sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 319
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 200

    (229) expression -> expression OR . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    simple_expression              shift and go to state 320
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 201

    (230) expression -> expression XOR . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    simple_expression              shift and go to state 321
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 202

    (232) simple_expression -> simple_expression AND . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    relational_expression          shift and go to state 322
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 203

    (234) relational_expression -> relational_expression relational_operator . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    additive_expression            shift and go to state 323
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 204

    (236) relational_operator -> EQUAL .

    NOT             reduce using rule 236 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 236 (relational_operator -> EQUAL .)
    PLUS            reduce using rule 236 (relational_operator -> EQUAL .)
    ADDRESS_OF      reduce using rule 236 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 236 (relational_operator -> EQUAL .)
    STRING          reduce using rule 236 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 236 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 236 (relational_operator -> EQUAL .)
    NIL             reduce using rule 236 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 236 (relational_operator -> EQUAL .)
    ID              reduce using rule 236 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 236 (relational_operator -> EQUAL .)


state 205

    (237) relational_operator -> DISTINT .

    NOT             reduce using rule 237 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 237 (relational_operator -> DISTINT .)
    PLUS            reduce using rule 237 (relational_operator -> DISTINT .)
    ADDRESS_OF      reduce using rule 237 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 237 (relational_operator -> DISTINT .)
    STRING          reduce using rule 237 (relational_operator -> DISTINT .)
    TRUE            reduce using rule 237 (relational_operator -> DISTINT .)
    FALSE           reduce using rule 237 (relational_operator -> DISTINT .)
    NIL             reduce using rule 237 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 237 (relational_operator -> DISTINT .)
    ID              reduce using rule 237 (relational_operator -> DISTINT .)
    LBRACKET        reduce using rule 237 (relational_operator -> DISTINT .)


state 206

    (238) relational_operator -> LESS .

    NOT             reduce using rule 238 (relational_operator -> LESS .)
    MINUS           reduce using rule 238 (relational_operator -> LESS .)
    PLUS            reduce using rule 238 (relational_operator -> LESS .)
    ADDRESS_OF      reduce using rule 238 (relational_operator -> LESS .)
    NUMBER          reduce using rule 238 (relational_operator -> LESS .)
    STRING          reduce using rule 238 (relational_operator -> LESS .)
    TRUE            reduce using rule 238 (relational_operator -> LESS .)
    FALSE           reduce using rule 238 (relational_operator -> LESS .)
    NIL             reduce using rule 238 (relational_operator -> LESS .)
    LPAREN          reduce using rule 238 (relational_operator -> LESS .)
    ID              reduce using rule 238 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 238 (relational_operator -> LESS .)


state 207

    (239) relational_operator -> LESSEQUAL .

    NOT             reduce using rule 239 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 239 (relational_operator -> LESSEQUAL .)
    PLUS            reduce using rule 239 (relational_operator -> LESSEQUAL .)
    ADDRESS_OF      reduce using rule 239 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 239 (relational_operator -> LESSEQUAL .)
    STRING          reduce using rule 239 (relational_operator -> LESSEQUAL .)
    TRUE            reduce using rule 239 (relational_operator -> LESSEQUAL .)
    FALSE           reduce using rule 239 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 239 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 239 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 239 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 239 (relational_operator -> LESSEQUAL .)


state 208

    (240) relational_operator -> GREATER .

    NOT             reduce using rule 240 (relational_operator -> GREATER .)
    MINUS           reduce using rule 240 (relational_operator -> GREATER .)
    PLUS            reduce using rule 240 (relational_operator -> GREATER .)
    ADDRESS_OF      reduce using rule 240 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 240 (relational_operator -> GREATER .)
    STRING          reduce using rule 240 (relational_operator -> GREATER .)
    TRUE            reduce using rule 240 (relational_operator -> GREATER .)
    FALSE           reduce using rule 240 (relational_operator -> GREATER .)
    NIL             reduce using rule 240 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 240 (relational_operator -> GREATER .)
    ID              reduce using rule 240 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 240 (relational_operator -> GREATER .)


state 209

    (241) relational_operator -> GREATEREQUAL .

    NOT             reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    PLUS            reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    ADDRESS_OF      reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    STRING          reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    TRUE            reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    FALSE           reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 241 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 241 (relational_operator -> GREATEREQUAL .)


state 210

    (242) relational_operator -> IN .

    NOT             reduce using rule 242 (relational_operator -> IN .)
    MINUS           reduce using rule 242 (relational_operator -> IN .)
    PLUS            reduce using rule 242 (relational_operator -> IN .)
    ADDRESS_OF      reduce using rule 242 (relational_operator -> IN .)
    NUMBER          reduce using rule 242 (relational_operator -> IN .)
    STRING          reduce using rule 242 (relational_operator -> IN .)
    TRUE            reduce using rule 242 (relational_operator -> IN .)
    FALSE           reduce using rule 242 (relational_operator -> IN .)
    NIL             reduce using rule 242 (relational_operator -> IN .)
    LPAREN          reduce using rule 242 (relational_operator -> IN .)
    ID              reduce using rule 242 (relational_operator -> IN .)
    LBRACKET        reduce using rule 242 (relational_operator -> IN .)


state 211

    (243) additive_expression -> additive_expression PLUS . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    multiplicative_expression      shift and go to state 324
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 212

    (244) additive_expression -> additive_expression MINUS . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    multiplicative_expression      shift and go to state 325
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 213

    (255) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    SHL             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    SHR             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DISTINT         reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    LESSEQUAL       reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    GREATEREQUAL    reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    IN              reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    THEN            reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    OF              reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DO              reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DOBLEDOT        reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    TO              reduce using rule 255 (unary_expression -> PLUS unary_expression .)
    DOWNTO          reduce using rule 255 (unary_expression -> PLUS unary_expression .)


state 214

    (246) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 326
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 215

    (247) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 327
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 216

    (248) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 328
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 217

    (249) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 329
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 218

    (250) multiplicative_expression -> multiplicative_expression SHL . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 330
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 219

    (251) multiplicative_expression -> multiplicative_expression SHR . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    unary_expression               shift and go to state 331
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 220

    (254) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    SHL             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    SHR             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DISTINT         reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    LESSEQUAL       reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    GREATEREQUAL    reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    IN              reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    THEN            reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    OF              reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DO              reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DOBLEDOT        reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    TO              reduce using rule 254 (unary_expression -> MINUS unary_expression .)
    DOWNTO          reduce using rule 254 (unary_expression -> MINUS unary_expression .)


state 221

    (253) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    SHL             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    SHR             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 253 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 253 (unary_expression -> NOT unary_expression .)
    EQUAL           reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DISTINT         reduce using rule 253 (unary_expression -> NOT unary_expression .)
    LESS            reduce using rule 253 (unary_expression -> NOT unary_expression .)
    LESSEQUAL       reduce using rule 253 (unary_expression -> NOT unary_expression .)
    GREATER         reduce using rule 253 (unary_expression -> NOT unary_expression .)
    GREATEREQUAL    reduce using rule 253 (unary_expression -> NOT unary_expression .)
    IN              reduce using rule 253 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    THEN            reduce using rule 253 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 253 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 253 (unary_expression -> NOT unary_expression .)
    OF              reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DO              reduce using rule 253 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 253 (unary_expression -> NOT unary_expression .)
    ELSE            reduce using rule 253 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 253 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 253 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DOBLEDOT        reduce using rule 253 (unary_expression -> NOT unary_expression .)
    TO              reduce using rule 253 (unary_expression -> NOT unary_expression .)
    DOWNTO          reduce using rule 253 (unary_expression -> NOT unary_expression .)


state 222

    (256) unary_expression -> ADDRESS_OF unary_expression .

    TIMES           reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DIVIDE          reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DIV             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    MOD             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    SHL             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    SHR             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    PLUS            reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    MINUS           reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    EQUAL           reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DISTINT         reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    LESS            reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    LESSEQUAL       reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATER         reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATEREQUAL    reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    IN              reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    AND             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    THEN            reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    OR              reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    XOR             reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    OF              reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DO              reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    SEMICOLON       reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    ELSE            reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    RBRACKET        reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    COMMA           reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    RPAREN          reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DOBLEDOT        reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    TO              reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)
    DOWNTO          reduce using rule 256 (unary_expression -> ADDRESS_OF unary_expression .)


state 223

    (274) variable -> variable DOT . ID
    (280) function_call -> variable DOT . ID LPAREN expression_list RPAREN
    (281) function_call -> variable DOT . ID LPAREN RPAREN

    ID              shift and go to state 332


state 224

    (277) variable -> LPAREN . variable RPAREN CARET
    (264) primary_expression -> LPAREN . expression RPAREN
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 139
    LPAREN          shift and go to state 224
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 226
    expression                     shift and go to state 225
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 225

    (264) primary_expression -> LPAREN expression . RPAREN
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    RPAREN          shift and go to state 333
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 226

    (277) variable -> LPAREN variable . RPAREN CARET
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET
    (258) primary_expression -> variable .
    (280) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (281) function_call -> variable . DOT ID LPAREN RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 193
    DOT             shift and go to state 223
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107
    TIMES           reduce using rule 258 (primary_expression -> variable .)
    DIVIDE          reduce using rule 258 (primary_expression -> variable .)
    DIV             reduce using rule 258 (primary_expression -> variable .)
    MOD             reduce using rule 258 (primary_expression -> variable .)
    SHL             reduce using rule 258 (primary_expression -> variable .)
    SHR             reduce using rule 258 (primary_expression -> variable .)
    PLUS            reduce using rule 258 (primary_expression -> variable .)
    MINUS           reduce using rule 258 (primary_expression -> variable .)
    EQUAL           reduce using rule 258 (primary_expression -> variable .)
    DISTINT         reduce using rule 258 (primary_expression -> variable .)
    LESS            reduce using rule 258 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 258 (primary_expression -> variable .)
    GREATER         reduce using rule 258 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 258 (primary_expression -> variable .)
    IN              reduce using rule 258 (primary_expression -> variable .)
    AND             reduce using rule 258 (primary_expression -> variable .)
    OR              reduce using rule 258 (primary_expression -> variable .)
    XOR             reduce using rule 258 (primary_expression -> variable .)

  ! RPAREN          [ reduce using rule 258 (primary_expression -> variable .) ]


state 227

    (278) function_call -> ID LPAREN . expression_list RPAREN
    (279) function_call -> ID LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 335
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression_list                shift and go to state 334
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 228

    (271) set_constructor -> LBRACKET set_item_list . RBRACKET
    (270) set_item_list -> set_item_list . COMMA set_item

    RBRACKET        shift and go to state 336
    COMMA           shift and go to state 337


state 229

    (272) set_constructor -> LBRACKET RBRACKET .

    TIMES           reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DIV             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    MOD             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    SHL             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    SHR             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DISTINT         reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    LESS            reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    IN              reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    AND             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    THEN            reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    OR              reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    XOR             reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    OF              reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DO              reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DOBLEDOT        reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    TO              reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    DOWNTO          reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)
    COLON           reduce using rule 272 (set_constructor -> LBRACKET RBRACKET .)


state 230

    (269) set_item_list -> set_item .

    RBRACKET        reduce using rule 269 (set_item_list -> set_item .)
    COMMA           reduce using rule 269 (set_item_list -> set_item .)


state 231

    (267) set_item -> expression .
    (268) set_item -> expression . DOBLEDOT expression
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 267 (set_item -> expression .)
    COMMA           reduce using rule 267 (set_item -> expression .)
    DOBLEDOT        shift and go to state 338
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 232

    (209) case_statement -> CASE expression OF . case_list END
    (210) case_statement -> CASE expression OF . case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> CASE expression OF . case_list ELSE sentences_list END
    (212) case_list -> . case_list case_label COLON sentence SEMICOLON
    (213) case_list -> . case_label COLON sentence SEMICOLON
    (214) case_list -> . empty
    (215) case_label -> . constant
    (216) case_label -> . constant DOBLEDOT constant
    (217) case_label -> . case_label COMMA constant
    (228) empty -> .
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for ORDINAL_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    END             reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

  ! NUMBER          [ reduce using rule 228 (empty -> .) ]
  ! STRING          [ reduce using rule 228 (empty -> .) ]
  ! TRUE            [ reduce using rule 228 (empty -> .) ]
  ! FALSE           [ reduce using rule 228 (empty -> .) ]
  ! NIL             [ reduce using rule 228 (empty -> .) ]
  ! ORDINAL_CONSTANT [ reduce using rule 228 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 228 (empty -> .) ]

    case_list                      shift and go to state 339
    case_label                     shift and go to state 340
    empty                          shift and go to state 341
    constant                       shift and go to state 342
    set_constructor                shift and go to state 248

state 233

    (218) for_statement -> FOR ID ASIGNATION . expression TO expression DO sentence
    (219) for_statement -> FOR ID ASIGNATION . expression DOWNTO expression DO sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 343
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 234

    (220) for_statement -> FOR ID IN . expression DO sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 344
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 235

    (221) while_statement -> WHILE expression DO . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 345
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 236

    (222) repeat_statement -> REPEAT sentences_list UNTIL . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 346
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 237

    (223) with_statement -> WITH variable_list DO . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 347
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 238

    (225) variable_list -> variable_list COMMA . variable
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 116
    LPAREN          shift and go to state 63

    variable                       shift and go to state 348

state 239

    (227) labeled_sentence -> NUMBER COLON sentence .

    SEMICOLON       reduce using rule 227 (labeled_sentence -> NUMBER COLON sentence .)
    ELSE            reduce using rule 227 (labeled_sentence -> NUMBER COLON sentence .)


state 240

    (26) number_list -> number_list COMMA NUMBER .

    SEMICOLON       reduce using rule 26 (number_list -> number_list COMMA NUMBER .)
    COMMA           reduce using rule 26 (number_list -> number_list COMMA NUMBER .)


state 241

    (30) const_declaration -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 349


state 242

    (32) constant -> NUMBER .

    SEMICOLON       reduce using rule 32 (constant -> NUMBER .)
    DOBLEDOT        reduce using rule 32 (constant -> NUMBER .)
    COLON           reduce using rule 32 (constant -> NUMBER .)
    COMMA           reduce using rule 32 (constant -> NUMBER .)


state 243

    (33) constant -> STRING .

    SEMICOLON       reduce using rule 33 (constant -> STRING .)
    DOBLEDOT        reduce using rule 33 (constant -> STRING .)
    COLON           reduce using rule 33 (constant -> STRING .)
    COMMA           reduce using rule 33 (constant -> STRING .)


state 244

    (34) constant -> TRUE .

    SEMICOLON       reduce using rule 34 (constant -> TRUE .)
    DOBLEDOT        reduce using rule 34 (constant -> TRUE .)
    COLON           reduce using rule 34 (constant -> TRUE .)
    COMMA           reduce using rule 34 (constant -> TRUE .)


state 245

    (35) constant -> FALSE .

    SEMICOLON       reduce using rule 35 (constant -> FALSE .)
    DOBLEDOT        reduce using rule 35 (constant -> FALSE .)
    COLON           reduce using rule 35 (constant -> FALSE .)
    COMMA           reduce using rule 35 (constant -> FALSE .)


state 246

    (36) constant -> NIL .

    SEMICOLON       reduce using rule 36 (constant -> NIL .)
    DOBLEDOT        reduce using rule 36 (constant -> NIL .)
    COLON           reduce using rule 36 (constant -> NIL .)
    COMMA           reduce using rule 36 (constant -> NIL .)


state 247

    (37) constant -> ORDINAL_CONSTANT .

    SEMICOLON       reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    DOBLEDOT        reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COLON           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COMMA           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)


state 248

    (38) constant -> set_constructor .

    SEMICOLON       reduce using rule 38 (constant -> set_constructor .)
    DOBLEDOT        reduce using rule 38 (constant -> set_constructor .)
    COLON           reduce using rule 38 (constant -> set_constructor .)
    COMMA           reduce using rule 38 (constant -> set_constructor .)


state 249

    (152) data_type_list -> ID .

    EQUAL           reduce using rule 152 (data_type_list -> ID .)
    SEMICOLON       reduce using rule 152 (data_type_list -> ID .)
    RPAREN          reduce using rule 152 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 152 (data_type_list -> ID .)
    END             reduce using rule 152 (data_type_list -> ID .)
    CASE            reduce using rule 152 (data_type_list -> ID .)
    ID              reduce using rule 152 (data_type_list -> ID .)
    OF              reduce using rule 152 (data_type_list -> ID .)


state 250

    (31) const_declaration -> ID COLON data_type_list . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 350


state 251

    (138) data_type_list -> INTEGER .

    EQUAL           reduce using rule 138 (data_type_list -> INTEGER .)
    SEMICOLON       reduce using rule 138 (data_type_list -> INTEGER .)
    ABSOLUTE        reduce using rule 138 (data_type_list -> INTEGER .)
    RPAREN          reduce using rule 138 (data_type_list -> INTEGER .)
    END             reduce using rule 138 (data_type_list -> INTEGER .)
    CASE            reduce using rule 138 (data_type_list -> INTEGER .)
    ID              reduce using rule 138 (data_type_list -> INTEGER .)
    OF              reduce using rule 138 (data_type_list -> INTEGER .)


state 252

    (139) data_type_list -> BYTE .

    EQUAL           reduce using rule 139 (data_type_list -> BYTE .)
    SEMICOLON       reduce using rule 139 (data_type_list -> BYTE .)
    ABSOLUTE        reduce using rule 139 (data_type_list -> BYTE .)
    RPAREN          reduce using rule 139 (data_type_list -> BYTE .)
    END             reduce using rule 139 (data_type_list -> BYTE .)
    CASE            reduce using rule 139 (data_type_list -> BYTE .)
    ID              reduce using rule 139 (data_type_list -> BYTE .)
    OF              reduce using rule 139 (data_type_list -> BYTE .)


state 253

    (140) data_type_list -> LONGINT .

    EQUAL           reduce using rule 140 (data_type_list -> LONGINT .)
    SEMICOLON       reduce using rule 140 (data_type_list -> LONGINT .)
    ABSOLUTE        reduce using rule 140 (data_type_list -> LONGINT .)
    RPAREN          reduce using rule 140 (data_type_list -> LONGINT .)
    END             reduce using rule 140 (data_type_list -> LONGINT .)
    CASE            reduce using rule 140 (data_type_list -> LONGINT .)
    ID              reduce using rule 140 (data_type_list -> LONGINT .)
    OF              reduce using rule 140 (data_type_list -> LONGINT .)


state 254

    (141) data_type_list -> SHORTINT .

    EQUAL           reduce using rule 141 (data_type_list -> SHORTINT .)
    SEMICOLON       reduce using rule 141 (data_type_list -> SHORTINT .)
    ABSOLUTE        reduce using rule 141 (data_type_list -> SHORTINT .)
    RPAREN          reduce using rule 141 (data_type_list -> SHORTINT .)
    END             reduce using rule 141 (data_type_list -> SHORTINT .)
    CASE            reduce using rule 141 (data_type_list -> SHORTINT .)
    ID              reduce using rule 141 (data_type_list -> SHORTINT .)
    OF              reduce using rule 141 (data_type_list -> SHORTINT .)


state 255

    (142) data_type_list -> WORD .

    EQUAL           reduce using rule 142 (data_type_list -> WORD .)
    SEMICOLON       reduce using rule 142 (data_type_list -> WORD .)
    ABSOLUTE        reduce using rule 142 (data_type_list -> WORD .)
    RPAREN          reduce using rule 142 (data_type_list -> WORD .)
    END             reduce using rule 142 (data_type_list -> WORD .)
    CASE            reduce using rule 142 (data_type_list -> WORD .)
    ID              reduce using rule 142 (data_type_list -> WORD .)
    OF              reduce using rule 142 (data_type_list -> WORD .)


state 256

    (143) data_type_list -> REAL .

    EQUAL           reduce using rule 143 (data_type_list -> REAL .)
    SEMICOLON       reduce using rule 143 (data_type_list -> REAL .)
    ABSOLUTE        reduce using rule 143 (data_type_list -> REAL .)
    RPAREN          reduce using rule 143 (data_type_list -> REAL .)
    END             reduce using rule 143 (data_type_list -> REAL .)
    CASE            reduce using rule 143 (data_type_list -> REAL .)
    ID              reduce using rule 143 (data_type_list -> REAL .)
    OF              reduce using rule 143 (data_type_list -> REAL .)


state 257

    (144) data_type_list -> SINGLE .

    EQUAL           reduce using rule 144 (data_type_list -> SINGLE .)
    SEMICOLON       reduce using rule 144 (data_type_list -> SINGLE .)
    ABSOLUTE        reduce using rule 144 (data_type_list -> SINGLE .)
    RPAREN          reduce using rule 144 (data_type_list -> SINGLE .)
    END             reduce using rule 144 (data_type_list -> SINGLE .)
    CASE            reduce using rule 144 (data_type_list -> SINGLE .)
    ID              reduce using rule 144 (data_type_list -> SINGLE .)
    OF              reduce using rule 144 (data_type_list -> SINGLE .)


state 258

    (145) data_type_list -> DOUBLE .

    EQUAL           reduce using rule 145 (data_type_list -> DOUBLE .)
    SEMICOLON       reduce using rule 145 (data_type_list -> DOUBLE .)
    ABSOLUTE        reduce using rule 145 (data_type_list -> DOUBLE .)
    RPAREN          reduce using rule 145 (data_type_list -> DOUBLE .)
    END             reduce using rule 145 (data_type_list -> DOUBLE .)
    CASE            reduce using rule 145 (data_type_list -> DOUBLE .)
    ID              reduce using rule 145 (data_type_list -> DOUBLE .)
    OF              reduce using rule 145 (data_type_list -> DOUBLE .)


state 259

    (146) data_type_list -> EXTENDED .

    EQUAL           reduce using rule 146 (data_type_list -> EXTENDED .)
    SEMICOLON       reduce using rule 146 (data_type_list -> EXTENDED .)
    ABSOLUTE        reduce using rule 146 (data_type_list -> EXTENDED .)
    RPAREN          reduce using rule 146 (data_type_list -> EXTENDED .)
    END             reduce using rule 146 (data_type_list -> EXTENDED .)
    CASE            reduce using rule 146 (data_type_list -> EXTENDED .)
    ID              reduce using rule 146 (data_type_list -> EXTENDED .)
    OF              reduce using rule 146 (data_type_list -> EXTENDED .)


state 260

    (147) data_type_list -> SHORT .

    EQUAL           reduce using rule 147 (data_type_list -> SHORT .)
    SEMICOLON       reduce using rule 147 (data_type_list -> SHORT .)
    ABSOLUTE        reduce using rule 147 (data_type_list -> SHORT .)
    RPAREN          reduce using rule 147 (data_type_list -> SHORT .)
    END             reduce using rule 147 (data_type_list -> SHORT .)
    CASE            reduce using rule 147 (data_type_list -> SHORT .)
    ID              reduce using rule 147 (data_type_list -> SHORT .)
    OF              reduce using rule 147 (data_type_list -> SHORT .)


state 261

    (148) data_type_list -> BOOLEAN .

    EQUAL           reduce using rule 148 (data_type_list -> BOOLEAN .)
    SEMICOLON       reduce using rule 148 (data_type_list -> BOOLEAN .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> BOOLEAN .)
    RPAREN          reduce using rule 148 (data_type_list -> BOOLEAN .)
    END             reduce using rule 148 (data_type_list -> BOOLEAN .)
    CASE            reduce using rule 148 (data_type_list -> BOOLEAN .)
    ID              reduce using rule 148 (data_type_list -> BOOLEAN .)
    OF              reduce using rule 148 (data_type_list -> BOOLEAN .)


state 262

    (149) data_type_list -> CHAR .

    EQUAL           reduce using rule 149 (data_type_list -> CHAR .)
    SEMICOLON       reduce using rule 149 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 149 (data_type_list -> CHAR .)
    RPAREN          reduce using rule 149 (data_type_list -> CHAR .)
    END             reduce using rule 149 (data_type_list -> CHAR .)
    CASE            reduce using rule 149 (data_type_list -> CHAR .)
    ID              reduce using rule 149 (data_type_list -> CHAR .)
    OF              reduce using rule 149 (data_type_list -> CHAR .)


state 263

    (150) data_type_list -> STRING .
    (151) data_type_list -> STRING . LBRACKET NUMBER RBRACKET
    (55) string_type -> STRING .
    (56) string_type -> STRING . LBRACKET NUMBER RBRACKET

  ! reduce/reduce conflict for EQUAL resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 55 (string_type -> STRING .)
  ! reduce/reduce conflict for OF resolved using rule 55 (string_type -> STRING .)
    LBRACKET        shift and go to state 351
    EQUAL           reduce using rule 55 (string_type -> STRING .)
    SEMICOLON       reduce using rule 55 (string_type -> STRING .)
    ABSOLUTE        reduce using rule 55 (string_type -> STRING .)
    RPAREN          reduce using rule 55 (string_type -> STRING .)
    END             reduce using rule 55 (string_type -> STRING .)
    CASE            reduce using rule 55 (string_type -> STRING .)
    ID              reduce using rule 55 (string_type -> STRING .)
    OF              reduce using rule 55 (string_type -> STRING .)

  ! EQUAL           [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! ABSOLUTE        [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! RPAREN          [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! END             [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! CASE            [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! ID              [ reduce using rule 150 (data_type_list -> STRING .) ]
  ! OF              [ reduce using rule 150 (data_type_list -> STRING .) ]


state 264

    (153) data_type_list -> ABSOLUTE . ID

    ID              shift and go to state 352


state 265

    (154) data_type_list -> FILE .
    (77) file_type -> FILE . OF data_type_list
    (78) file_type -> FILE .

  ! shift/reduce conflict for OF resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for END resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for CASE resolved using rule 78 (file_type -> FILE .)
  ! reduce/reduce conflict for ID resolved using rule 78 (file_type -> FILE .)
  ! shift/reduce conflict for OF resolved as shift
    OF              shift and go to state 353
    EQUAL           reduce using rule 78 (file_type -> FILE .)
    SEMICOLON       reduce using rule 78 (file_type -> FILE .)
    ABSOLUTE        reduce using rule 78 (file_type -> FILE .)
    RPAREN          reduce using rule 78 (file_type -> FILE .)
    END             reduce using rule 78 (file_type -> FILE .)
    CASE            reduce using rule 78 (file_type -> FILE .)
    ID              reduce using rule 78 (file_type -> FILE .)

  ! EQUAL           [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! SEMICOLON       [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! ABSOLUTE        [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! RPAREN          [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! END             [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! CASE            [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! ID              [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 154 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 78 (file_type -> FILE .) ]


state 266

    (155) data_type_list -> array_type .

    EQUAL           reduce using rule 155 (data_type_list -> array_type .)
    SEMICOLON       reduce using rule 155 (data_type_list -> array_type .)
    ABSOLUTE        reduce using rule 155 (data_type_list -> array_type .)
    RPAREN          reduce using rule 155 (data_type_list -> array_type .)
    END             reduce using rule 155 (data_type_list -> array_type .)
    CASE            reduce using rule 155 (data_type_list -> array_type .)
    ID              reduce using rule 155 (data_type_list -> array_type .)
    OF              reduce using rule 155 (data_type_list -> array_type .)


state 267

    (156) data_type_list -> pointer_type .

    EQUAL           reduce using rule 156 (data_type_list -> pointer_type .)
    SEMICOLON       reduce using rule 156 (data_type_list -> pointer_type .)
    ABSOLUTE        reduce using rule 156 (data_type_list -> pointer_type .)
    RPAREN          reduce using rule 156 (data_type_list -> pointer_type .)
    END             reduce using rule 156 (data_type_list -> pointer_type .)
    CASE            reduce using rule 156 (data_type_list -> pointer_type .)
    ID              reduce using rule 156 (data_type_list -> pointer_type .)
    OF              reduce using rule 156 (data_type_list -> pointer_type .)


state 268

    (157) data_type_list -> record_type .

    EQUAL           reduce using rule 157 (data_type_list -> record_type .)
    SEMICOLON       reduce using rule 157 (data_type_list -> record_type .)
    ABSOLUTE        reduce using rule 157 (data_type_list -> record_type .)
    RPAREN          reduce using rule 157 (data_type_list -> record_type .)
    END             reduce using rule 157 (data_type_list -> record_type .)
    CASE            reduce using rule 157 (data_type_list -> record_type .)
    ID              reduce using rule 157 (data_type_list -> record_type .)
    OF              reduce using rule 157 (data_type_list -> record_type .)


state 269

    (158) data_type_list -> set_type .

    EQUAL           reduce using rule 158 (data_type_list -> set_type .)
    SEMICOLON       reduce using rule 158 (data_type_list -> set_type .)
    ABSOLUTE        reduce using rule 158 (data_type_list -> set_type .)
    RPAREN          reduce using rule 158 (data_type_list -> set_type .)
    END             reduce using rule 158 (data_type_list -> set_type .)
    CASE            reduce using rule 158 (data_type_list -> set_type .)
    ID              reduce using rule 158 (data_type_list -> set_type .)
    OF              reduce using rule 158 (data_type_list -> set_type .)


state 270

    (159) data_type_list -> file_type .

    EQUAL           reduce using rule 159 (data_type_list -> file_type .)
    SEMICOLON       reduce using rule 159 (data_type_list -> file_type .)
    ABSOLUTE        reduce using rule 159 (data_type_list -> file_type .)
    RPAREN          reduce using rule 159 (data_type_list -> file_type .)
    END             reduce using rule 159 (data_type_list -> file_type .)
    CASE            reduce using rule 159 (data_type_list -> file_type .)
    ID              reduce using rule 159 (data_type_list -> file_type .)
    OF              reduce using rule 159 (data_type_list -> file_type .)


state 271

    (160) data_type_list -> object_type .

    EQUAL           reduce using rule 160 (data_type_list -> object_type .)
    SEMICOLON       reduce using rule 160 (data_type_list -> object_type .)
    ABSOLUTE        reduce using rule 160 (data_type_list -> object_type .)
    RPAREN          reduce using rule 160 (data_type_list -> object_type .)
    END             reduce using rule 160 (data_type_list -> object_type .)
    CASE            reduce using rule 160 (data_type_list -> object_type .)
    ID              reduce using rule 160 (data_type_list -> object_type .)
    OF              reduce using rule 160 (data_type_list -> object_type .)


state 272

    (161) data_type_list -> string_type .

    EQUAL           reduce using rule 161 (data_type_list -> string_type .)
    SEMICOLON       reduce using rule 161 (data_type_list -> string_type .)
    ABSOLUTE        reduce using rule 161 (data_type_list -> string_type .)
    RPAREN          reduce using rule 161 (data_type_list -> string_type .)
    END             reduce using rule 161 (data_type_list -> string_type .)
    CASE            reduce using rule 161 (data_type_list -> string_type .)
    ID              reduce using rule 161 (data_type_list -> string_type .)
    OF              reduce using rule 161 (data_type_list -> string_type .)


state 273

    (59) array_type -> ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> ARRAY . OF data_type_list

    LBRACKET        shift and go to state 354
    OF              shift and go to state 355


state 274

    (60) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (58) record_type -> PACKED . RECORD record_list END

    ARRAY           shift and go to state 356
    RECORD          shift and go to state 357


state 275

    (75) pointer_type -> CARET . ID
    (76) pointer_type -> CARET . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    ID              shift and go to state 358
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 359
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 276

    (57) record_type -> RECORD . record_list END
    (100) record_list -> . record_list record_declaration
    (101) record_list -> . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_list                    shift and go to state 360
    record_declaration             shift and go to state 361
    id_list                        shift and go to state 362

state 277

    (74) set_type -> SET . OF set_range

    OF              shift and go to state 364


state 278

    (79) object_type -> OBJECT . object_heritage object_fields object_methods END
    (80) object_heritage -> . LPAREN ID RPAREN
    (81) object_heritage -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 366
    ID              reduce using rule 228 (empty -> .)
    END             reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)

    object_heritage                shift and go to state 365
    empty                          shift and go to state 367

state 279

    (47) type_definition -> ID . DOBLEDOT ID
    (152) data_type_list -> ID .

    DOBLEDOT        shift and go to state 368
    SEMICOLON       reduce using rule 152 (data_type_list -> ID .)
    EQUAL           reduce using rule 152 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 152 (data_type_list -> ID .)


state 280

    (42) type_declaration -> ID EQUAL type_definition . SEMICOLON

    SEMICOLON       shift and go to state 369


state 281

    (43) type_definition -> data_type_list .

    SEMICOLON       reduce using rule 43 (type_definition -> data_type_list .)
    EQUAL           reduce using rule 43 (type_definition -> data_type_list .)
    ABSOLUTE        reduce using rule 43 (type_definition -> data_type_list .)


state 282

    (44) type_definition -> LPAREN . id_list RPAREN
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 370

state 283

    (45) type_definition -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 371


state 284

    (46) type_definition -> CHAR . DOBLEDOT CHAR
    (149) data_type_list -> CHAR .

    DOBLEDOT        shift and go to state 372
    SEMICOLON       reduce using rule 149 (data_type_list -> CHAR .)
    EQUAL           reduce using rule 149 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 149 (data_type_list -> CHAR .)


state 285

    (48) type_definition -> record_type .
    (157) data_type_list -> record_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (type_definition -> record_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 48 (type_definition -> record_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 48 (type_definition -> record_type .)
    SEMICOLON       reduce using rule 48 (type_definition -> record_type .)
    EQUAL           reduce using rule 48 (type_definition -> record_type .)
    ABSOLUTE        reduce using rule 48 (type_definition -> record_type .)

  ! SEMICOLON       [ reduce using rule 157 (data_type_list -> record_type .) ]
  ! EQUAL           [ reduce using rule 157 (data_type_list -> record_type .) ]
  ! ABSOLUTE        [ reduce using rule 157 (data_type_list -> record_type .) ]


state 286

    (49) type_definition -> array_type .
    (155) data_type_list -> array_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (type_definition -> array_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 49 (type_definition -> array_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 49 (type_definition -> array_type .)
    SEMICOLON       reduce using rule 49 (type_definition -> array_type .)
    EQUAL           reduce using rule 49 (type_definition -> array_type .)
    ABSOLUTE        reduce using rule 49 (type_definition -> array_type .)

  ! SEMICOLON       [ reduce using rule 155 (data_type_list -> array_type .) ]
  ! EQUAL           [ reduce using rule 155 (data_type_list -> array_type .) ]
  ! ABSOLUTE        [ reduce using rule 155 (data_type_list -> array_type .) ]


state 287

    (50) type_definition -> set_type .
    (158) data_type_list -> set_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (type_definition -> set_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 50 (type_definition -> set_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 50 (type_definition -> set_type .)
    SEMICOLON       reduce using rule 50 (type_definition -> set_type .)
    EQUAL           reduce using rule 50 (type_definition -> set_type .)
    ABSOLUTE        reduce using rule 50 (type_definition -> set_type .)

  ! SEMICOLON       [ reduce using rule 158 (data_type_list -> set_type .) ]
  ! EQUAL           [ reduce using rule 158 (data_type_list -> set_type .) ]
  ! ABSOLUTE        [ reduce using rule 158 (data_type_list -> set_type .) ]


state 288

    (51) type_definition -> pointer_type .
    (156) data_type_list -> pointer_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 51 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 51 (type_definition -> pointer_type .)
    SEMICOLON       reduce using rule 51 (type_definition -> pointer_type .)
    EQUAL           reduce using rule 51 (type_definition -> pointer_type .)
    ABSOLUTE        reduce using rule 51 (type_definition -> pointer_type .)

  ! SEMICOLON       [ reduce using rule 156 (data_type_list -> pointer_type .) ]
  ! EQUAL           [ reduce using rule 156 (data_type_list -> pointer_type .) ]
  ! ABSOLUTE        [ reduce using rule 156 (data_type_list -> pointer_type .) ]


state 289

    (52) type_definition -> file_type .
    (159) data_type_list -> file_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (type_definition -> file_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 52 (type_definition -> file_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 52 (type_definition -> file_type .)
    SEMICOLON       reduce using rule 52 (type_definition -> file_type .)
    EQUAL           reduce using rule 52 (type_definition -> file_type .)
    ABSOLUTE        reduce using rule 52 (type_definition -> file_type .)

  ! SEMICOLON       [ reduce using rule 159 (data_type_list -> file_type .) ]
  ! EQUAL           [ reduce using rule 159 (data_type_list -> file_type .) ]
  ! ABSOLUTE        [ reduce using rule 159 (data_type_list -> file_type .) ]


state 290

    (53) type_definition -> object_type .
    (160) data_type_list -> object_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (type_definition -> object_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 53 (type_definition -> object_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 53 (type_definition -> object_type .)
    SEMICOLON       reduce using rule 53 (type_definition -> object_type .)
    EQUAL           reduce using rule 53 (type_definition -> object_type .)
    ABSOLUTE        reduce using rule 53 (type_definition -> object_type .)

  ! SEMICOLON       [ reduce using rule 160 (data_type_list -> object_type .) ]
  ! EQUAL           [ reduce using rule 160 (data_type_list -> object_type .) ]
  ! ABSOLUTE        [ reduce using rule 160 (data_type_list -> object_type .) ]


state 291

    (54) type_definition -> string_type .
    (161) data_type_list -> string_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (type_definition -> string_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 54 (type_definition -> string_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 54 (type_definition -> string_type .)
    SEMICOLON       reduce using rule 54 (type_definition -> string_type .)
    EQUAL           reduce using rule 54 (type_definition -> string_type .)
    ABSOLUTE        reduce using rule 54 (type_definition -> string_type .)

  ! SEMICOLON       [ reduce using rule 161 (data_type_list -> string_type .) ]
  ! EQUAL           [ reduce using rule 161 (data_type_list -> string_type .) ]
  ! ABSOLUTE        [ reduce using rule 161 (data_type_list -> string_type .) ]


state 292

    (58) record_type -> PACKED . RECORD record_list END
    (60) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list

    RECORD          shift and go to state 357
    ARRAY           shift and go to state 356


state 293

    (114) var_declaration -> id_list COLON type_definition . SEMICOLON
    (115) var_declaration -> id_list COLON type_definition . EQUAL expression SEMICOLON
    (116) var_declaration -> id_list COLON type_definition . ABSOLUTE ID SEMICOLON

    SEMICOLON       shift and go to state 373
    EQUAL           shift and go to state 374
    ABSOLUTE        shift and go to state 375


state 294

    (118) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 376


state 295

    (122) directive -> EXTERNAL STRING .

    BEGIN           reduce using rule 122 (directive -> EXTERNAL STRING .)
    LABEL           reduce using rule 122 (directive -> EXTERNAL STRING .)
    CONST           reduce using rule 122 (directive -> EXTERNAL STRING .)
    TYPE            reduce using rule 122 (directive -> EXTERNAL STRING .)
    VAR             reduce using rule 122 (directive -> EXTERNAL STRING .)
    CONSTRUCTOR     reduce using rule 122 (directive -> EXTERNAL STRING .)
    DESTRUCTOR      reduce using rule 122 (directive -> EXTERNAL STRING .)
    PROCEDURE       reduce using rule 122 (directive -> EXTERNAL STRING .)
    FUNCTION        reduce using rule 122 (directive -> EXTERNAL STRING .)
    IMPLEMENTATION  reduce using rule 122 (directive -> EXTERNAL STRING .)
    INTERFACE       reduce using rule 122 (directive -> EXTERNAL STRING .)
    END             reduce using rule 122 (directive -> EXTERNAL STRING .)


state 296

    (127) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 377


state 297

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 378
    empty                          shift and go to state 172

state 298

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 379
    empty                          shift and go to state 172

state 299

    (94) method_implementation -> PROCEDURE ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 380
    empty                          shift and go to state 172

state 300

    (129) parameters -> LPAREN parameter_list . RPAREN
    (131) parameter_list -> parameter_list . SEMICOLON parameter_group

    RPAREN          shift and go to state 381
    SEMICOLON       shift and go to state 382


state 301

    (132) parameter_list -> parameter_group .

    RPAREN          reduce using rule 132 (parameter_list -> parameter_group .)
    SEMICOLON       reduce using rule 132 (parameter_list -> parameter_group .)


state 302

    (133) parameter_group -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 383
    COMMA           shift and go to state 44


state 303

    (134) parameter_group -> VAR . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 384

state 304

    (135) parameter_group -> CONST . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 385

state 305

    (136) parameter_group -> procedure_header .

    RPAREN          reduce using rule 136 (parameter_group -> procedure_header .)
    SEMICOLON       reduce using rule 136 (parameter_group -> procedure_header .)


state 306

    (137) parameter_group -> function_header .

    RPAREN          reduce using rule 137 (parameter_group -> function_header .)
    SEMICOLON       reduce using rule 137 (parameter_group -> function_header .)


state 307

    (119) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 386


state 308

    (128) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 387


state 309

    (95) method_implementation -> FUNCTION ID DOT ID . parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    COLON           reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 388
    empty                          shift and go to state 172

state 310

    (128) function_header -> FUNCTION ID parameters COLON . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 389
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 311

    (201) procedure_call -> variable DOT ID LPAREN . expression_list RPAREN
    (202) procedure_call -> variable DOT ID LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 391
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression_list                shift and go to state 390
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 312

    (275) variable -> variable LBRACKET expression_list RBRACKET .

    ASIGNATION      reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS_ASIGN      reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS_ASIGN     reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES_ASIGN     reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE_ASIGN    reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    CARET           reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DISTINT         reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOBLEDOT        reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 275 (variable -> variable LBRACKET expression_list RBRACKET .)


state 313

    (283) expression_list -> expression_list COMMA . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 392
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 314

    (199) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 199 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 199 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 315

    (277) variable -> LPAREN variable RPAREN CARET .

    ASIGNATION      reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    PLUS_ASIGN      reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    MINUS_ASIGN     reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    TIMES_ASIGN     reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE_ASIGN    reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    EQUAL           reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DOT             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    LBRACKET        reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    CARET           reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    RPAREN          reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    TIMES           reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE          reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DIV             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    MOD             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    SHL             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    SHR             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    PLUS            reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    MINUS           reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DISTINT         reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    LESS            reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    LESSEQUAL       reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    GREATER         reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    GREATEREQUAL    reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    IN              reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    AND             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    THEN            reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    OR              reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    XOR             reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    OF              reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DO              reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    COMMA           reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    SEMICOLON       reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    ELSE            reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    RBRACKET        reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DOBLEDOT        reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    TO              reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)
    DOWNTO          reduce using rule 277 (variable -> LPAREN variable RPAREN CARET .)


state 316

    (274) variable -> variable DOT ID .

    RPAREN          reduce using rule 274 (variable -> variable DOT ID .)
    DOT             reduce using rule 274 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 274 (variable -> variable DOT ID .)
    CARET           reduce using rule 274 (variable -> variable DOT ID .)
    DO              reduce using rule 274 (variable -> variable DOT ID .)
    COMMA           reduce using rule 274 (variable -> variable DOT ID .)


state 317

    (203) procedure_call -> NEW LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 203 (procedure_call -> NEW LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 203 (procedure_call -> NEW LPAREN expression_list RPAREN .)


state 318

    (205) procedure_call -> DISPOSE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 205 (procedure_call -> DISPOSE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 205 (procedure_call -> DISPOSE LPAREN expression_list RPAREN .)


state 319

    (207) if_statement -> IF expression THEN sentence .
    (208) if_statement -> IF expression THEN sentence . ELSE sentence

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 207 (if_statement -> IF expression THEN sentence .)
    ELSE            shift and go to state 393

  ! ELSE            [ reduce using rule 207 (if_statement -> IF expression THEN sentence .) ]


state 320

    (229) expression -> expression OR simple_expression .
    (232) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 229 (expression -> expression OR simple_expression .)
    OR              reduce using rule 229 (expression -> expression OR simple_expression .)
    XOR             reduce using rule 229 (expression -> expression OR simple_expression .)
    OF              reduce using rule 229 (expression -> expression OR simple_expression .)
    DO              reduce using rule 229 (expression -> expression OR simple_expression .)
    SEMICOLON       reduce using rule 229 (expression -> expression OR simple_expression .)
    ELSE            reduce using rule 229 (expression -> expression OR simple_expression .)
    RBRACKET        reduce using rule 229 (expression -> expression OR simple_expression .)
    COMMA           reduce using rule 229 (expression -> expression OR simple_expression .)
    RPAREN          reduce using rule 229 (expression -> expression OR simple_expression .)
    DOBLEDOT        reduce using rule 229 (expression -> expression OR simple_expression .)
    TO              reduce using rule 229 (expression -> expression OR simple_expression .)
    DOWNTO          reduce using rule 229 (expression -> expression OR simple_expression .)
    AND             shift and go to state 202


state 321

    (230) expression -> expression XOR simple_expression .
    (232) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 230 (expression -> expression XOR simple_expression .)
    OR              reduce using rule 230 (expression -> expression XOR simple_expression .)
    XOR             reduce using rule 230 (expression -> expression XOR simple_expression .)
    OF              reduce using rule 230 (expression -> expression XOR simple_expression .)
    DO              reduce using rule 230 (expression -> expression XOR simple_expression .)
    SEMICOLON       reduce using rule 230 (expression -> expression XOR simple_expression .)
    ELSE            reduce using rule 230 (expression -> expression XOR simple_expression .)
    RBRACKET        reduce using rule 230 (expression -> expression XOR simple_expression .)
    COMMA           reduce using rule 230 (expression -> expression XOR simple_expression .)
    RPAREN          reduce using rule 230 (expression -> expression XOR simple_expression .)
    DOBLEDOT        reduce using rule 230 (expression -> expression XOR simple_expression .)
    TO              reduce using rule 230 (expression -> expression XOR simple_expression .)
    DOWNTO          reduce using rule 230 (expression -> expression XOR simple_expression .)
    AND             shift and go to state 202


state 322

    (232) simple_expression -> simple_expression AND relational_expression .
    (234) relational_expression -> relational_expression . relational_operator additive_expression
    (236) relational_operator -> . EQUAL
    (237) relational_operator -> . DISTINT
    (238) relational_operator -> . LESS
    (239) relational_operator -> . LESSEQUAL
    (240) relational_operator -> . GREATER
    (241) relational_operator -> . GREATEREQUAL
    (242) relational_operator -> . IN

    AND             reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    THEN            reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    OR              reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    XOR             reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    OF              reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    DO              reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    SEMICOLON       reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    ELSE            reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    RBRACKET        reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    COMMA           reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    RPAREN          reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    DOBLEDOT        reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    TO              reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    DOWNTO          reduce using rule 232 (simple_expression -> simple_expression AND relational_expression .)
    EQUAL           shift and go to state 204
    DISTINT         shift and go to state 205
    LESS            shift and go to state 206
    LESSEQUAL       shift and go to state 207
    GREATER         shift and go to state 208
    GREATEREQUAL    shift and go to state 209
    IN              shift and go to state 210

    relational_operator            shift and go to state 203

state 323

    (234) relational_expression -> relational_expression relational_operator additive_expression .
    (243) additive_expression -> additive_expression . PLUS multiplicative_expression
    (244) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    DISTINT         reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESS            reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESSEQUAL       reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATER         reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATEREQUAL    reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    IN              reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    AND             reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    THEN            reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    OR              reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    XOR             reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    OF              reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    DO              reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    SEMICOLON       reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    ELSE            reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    RBRACKET        reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    COMMA           reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    RPAREN          reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOBLEDOT        reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    TO              reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOWNTO          reduce using rule 234 (relational_expression -> relational_expression relational_operator additive_expression .)
    PLUS            shift and go to state 211
    MINUS           shift and go to state 212


state 324

    (243) additive_expression -> additive_expression PLUS multiplicative_expression .
    (246) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (247) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (248) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (249) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (250) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (251) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DISTINT         reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OF              reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 243 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 325

    (244) additive_expression -> additive_expression MINUS multiplicative_expression .
    (246) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (247) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (248) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (249) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (250) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (251) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DISTINT         reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OF              reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 244 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 326

    (246) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHL             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHR             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DISTINT         reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESSEQUAL       reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATEREQUAL    reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IN              reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    THEN            reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OF              reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DO              reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    ELSE            reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOBLEDOT        reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TO              reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOWNTO          reduce using rule 246 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 327

    (247) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIV             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHL             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHR             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DISTINT         reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESSEQUAL       reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATEREQUAL    reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IN              reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THEN            reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OF              reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DO              reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ELSE            reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOBLEDOT        reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TO              reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOWNTO          reduce using rule 247 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 328

    (248) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVIDE          reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHL             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHR             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUAL           reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DISTINT         reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS            reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESSEQUAL       reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER         reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATEREQUAL    reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    IN              reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    THEN            reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    XOR             reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OF              reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DO              reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ELSE            reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOBLEDOT        reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    TO              reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOWNTO          reduce using rule 248 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 329

    (249) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHL             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHR             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUAL           reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DISTINT         reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS            reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESSEQUAL       reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER         reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATEREQUAL    reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IN              reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    THEN            reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OF              reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DO              reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    ELSE            reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOBLEDOT        reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    TO              reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOWNTO          reduce using rule 249 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 330

    (250) multiplicative_expression -> multiplicative_expression SHL unary_expression .

    TIMES           reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIVIDE          reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIV             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MOD             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHL             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHR             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    PLUS            reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MINUS           reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    EQUAL           reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DISTINT         reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESS            reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESSEQUAL       reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATER         reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATEREQUAL    reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    IN              reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    AND             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    THEN            reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OR              reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    XOR             reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OF              reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DO              reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SEMICOLON       reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    ELSE            reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RBRACKET        reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COMMA           reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RPAREN          reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOBLEDOT        reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    TO              reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOWNTO          reduce using rule 250 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)


state 331

    (251) multiplicative_expression -> multiplicative_expression SHR unary_expression .

    TIMES           reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIVIDE          reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIV             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MOD             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHL             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHR             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    PLUS            reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MINUS           reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    EQUAL           reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DISTINT         reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESS            reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESSEQUAL       reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATER         reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATEREQUAL    reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    IN              reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    AND             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    THEN            reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OR              reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    XOR             reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OF              reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DO              reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SEMICOLON       reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    ELSE            reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RBRACKET        reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COMMA           reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RPAREN          reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOBLEDOT        reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    TO              reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOWNTO          reduce using rule 251 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)


state 332

    (274) variable -> variable DOT ID .
    (280) function_call -> variable DOT ID . LPAREN expression_list RPAREN
    (281) function_call -> variable DOT ID . LPAREN RPAREN

    DOT             reduce using rule 274 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 274 (variable -> variable DOT ID .)
    CARET           reduce using rule 274 (variable -> variable DOT ID .)
    TIMES           reduce using rule 274 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 274 (variable -> variable DOT ID .)
    DIV             reduce using rule 274 (variable -> variable DOT ID .)
    MOD             reduce using rule 274 (variable -> variable DOT ID .)
    SHL             reduce using rule 274 (variable -> variable DOT ID .)
    SHR             reduce using rule 274 (variable -> variable DOT ID .)
    PLUS            reduce using rule 274 (variable -> variable DOT ID .)
    MINUS           reduce using rule 274 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 274 (variable -> variable DOT ID .)
    DISTINT         reduce using rule 274 (variable -> variable DOT ID .)
    LESS            reduce using rule 274 (variable -> variable DOT ID .)
    LESSEQUAL       reduce using rule 274 (variable -> variable DOT ID .)
    GREATER         reduce using rule 274 (variable -> variable DOT ID .)
    GREATEREQUAL    reduce using rule 274 (variable -> variable DOT ID .)
    IN              reduce using rule 274 (variable -> variable DOT ID .)
    AND             reduce using rule 274 (variable -> variable DOT ID .)
    THEN            reduce using rule 274 (variable -> variable DOT ID .)
    OR              reduce using rule 274 (variable -> variable DOT ID .)
    XOR             reduce using rule 274 (variable -> variable DOT ID .)
    OF              reduce using rule 274 (variable -> variable DOT ID .)
    DO              reduce using rule 274 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 274 (variable -> variable DOT ID .)
    ELSE            reduce using rule 274 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 274 (variable -> variable DOT ID .)
    COMMA           reduce using rule 274 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 274 (variable -> variable DOT ID .)
    DOBLEDOT        reduce using rule 274 (variable -> variable DOT ID .)
    TO              reduce using rule 274 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 274 (variable -> variable DOT ID .)
    LPAREN          shift and go to state 394


state 333

    (264) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DOBLEDOT        reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 264 (primary_expression -> LPAREN expression RPAREN .)


state 334

    (278) function_call -> ID LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 395
    COMMA           shift and go to state 313


state 335

    (279) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    SHL             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    SHR             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DISTINT         reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    OF              reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 279 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 279 (function_call -> ID LPAREN RPAREN .)


state 336

    (271) set_constructor -> LBRACKET set_item_list RBRACKET .

    TIMES           reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIVIDE          reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIV             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MOD             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHL             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHR             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    PLUS            reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MINUS           reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    EQUAL           reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DISTINT         reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESS            reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESSEQUAL       reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATER         reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATEREQUAL    reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    IN              reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    AND             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    THEN            reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OR              reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    XOR             reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OF              reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DO              reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SEMICOLON       reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    ELSE            reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RBRACKET        reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COMMA           reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RPAREN          reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOBLEDOT        reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    TO              reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOWNTO          reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COLON           reduce using rule 271 (set_constructor -> LBRACKET set_item_list RBRACKET .)


state 337

    (270) set_item_list -> set_item_list COMMA . set_item
    (267) set_item -> . expression
    (268) set_item -> . expression DOBLEDOT expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    set_item                       shift and go to state 396
    expression                     shift and go to state 231
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 338

    (268) set_item -> expression DOBLEDOT . expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 397
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 339

    (209) case_statement -> CASE expression OF case_list . END
    (210) case_statement -> CASE expression OF case_list . ELSE sentences_list SEMICOLON END
    (211) case_statement -> CASE expression OF case_list . ELSE sentences_list END
    (212) case_list -> case_list . case_label COLON sentence SEMICOLON
    (215) case_label -> . constant
    (216) case_label -> . constant DOBLEDOT constant
    (217) case_label -> . case_label COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    END             shift and go to state 398
    ELSE            shift and go to state 399
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    case_label                     shift and go to state 400
    constant                       shift and go to state 342
    set_constructor                shift and go to state 248

state 340

    (213) case_list -> case_label . COLON sentence SEMICOLON
    (217) case_label -> case_label . COMMA constant

    COLON           shift and go to state 401
    COMMA           shift and go to state 402


state 341

    (214) case_list -> empty .

    END             reduce using rule 214 (case_list -> empty .)
    ELSE            reduce using rule 214 (case_list -> empty .)
    NUMBER          reduce using rule 214 (case_list -> empty .)
    STRING          reduce using rule 214 (case_list -> empty .)
    TRUE            reduce using rule 214 (case_list -> empty .)
    FALSE           reduce using rule 214 (case_list -> empty .)
    NIL             reduce using rule 214 (case_list -> empty .)
    ORDINAL_CONSTANT reduce using rule 214 (case_list -> empty .)
    LBRACKET        reduce using rule 214 (case_list -> empty .)


state 342

    (215) case_label -> constant .
    (216) case_label -> constant . DOBLEDOT constant

    COLON           reduce using rule 215 (case_label -> constant .)
    COMMA           reduce using rule 215 (case_label -> constant .)
    DOBLEDOT        shift and go to state 403


state 343

    (218) for_statement -> FOR ID ASIGNATION expression . TO expression DO sentence
    (219) for_statement -> FOR ID ASIGNATION expression . DOWNTO expression DO sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    TO              shift and go to state 404
    DOWNTO          shift and go to state 405
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 344

    (220) for_statement -> FOR ID IN expression . DO sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    DO              shift and go to state 406
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 345

    (221) while_statement -> WHILE expression DO sentence .

    SEMICOLON       reduce using rule 221 (while_statement -> WHILE expression DO sentence .)
    ELSE            reduce using rule 221 (while_statement -> WHILE expression DO sentence .)


state 346

    (222) repeat_statement -> REPEAT sentences_list UNTIL expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 222 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    ELSE            reduce using rule 222 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 347

    (223) with_statement -> WITH variable_list DO sentence .

    SEMICOLON       reduce using rule 223 (with_statement -> WITH variable_list DO sentence .)
    ELSE            reduce using rule 223 (with_statement -> WITH variable_list DO sentence .)


state 348

    (225) variable_list -> variable_list COMMA variable .
    (274) variable -> variable . DOT ID
    (275) variable -> variable . LBRACKET expression_list RBRACKET
    (276) variable -> variable . CARET

    DO              reduce using rule 225 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 225 (variable_list -> variable_list COMMA variable .)
    DOT             shift and go to state 194
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 349

    (30) const_declaration -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)


state 350

    (31) const_declaration -> ID COLON data_type_list EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    constant                       shift and go to state 407
    set_constructor                shift and go to state 248

state 351

    (151) data_type_list -> STRING LBRACKET . NUMBER RBRACKET
    (56) string_type -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 408


state 352

    (153) data_type_list -> ABSOLUTE ID .

    EQUAL           reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    SEMICOLON       reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    ABSOLUTE        reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    RPAREN          reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    END             reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    CASE            reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    ID              reduce using rule 153 (data_type_list -> ABSOLUTE ID .)
    OF              reduce using rule 153 (data_type_list -> ABSOLUTE ID .)


state 353

    (77) file_type -> FILE OF . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 409
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 354

    (59) array_type -> ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (62) type_range_list -> . type_range
    (63) type_range_list -> . type_range_list COMMA type_range
    (64) type_range -> . NUMBER DOBLEDOT NUMBER
    (65) type_range -> . NUMBER DOBLEDOT ID
    (66) type_range -> . ID DOBLEDOT NUMBER
    (67) type_range -> . CHAR DOBLEDOT CHAR
    (68) type_range -> . ID DOBLEDOT ID
    (69) type_range -> . ID

    NUMBER          shift and go to state 412
    ID              shift and go to state 413
    CHAR            shift and go to state 414

    type_range_list                shift and go to state 410
    type_range                     shift and go to state 411

state 355

    (61) array_type -> ARRAY OF . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 415
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 356

    (60) array_type -> PACKED ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 416


state 357

    (58) record_type -> PACKED RECORD . record_list END
    (100) record_list -> . record_list record_declaration
    (101) record_list -> . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_list                    shift and go to state 417
    record_declaration             shift and go to state 361
    id_list                        shift and go to state 362

state 358

    (75) pointer_type -> CARET ID .
    (152) data_type_list -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for END resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for CASE resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ID resolved using rule 75 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for OF resolved using rule 75 (pointer_type -> CARET ID .)
    EQUAL           reduce using rule 75 (pointer_type -> CARET ID .)
    SEMICOLON       reduce using rule 75 (pointer_type -> CARET ID .)
    ABSOLUTE        reduce using rule 75 (pointer_type -> CARET ID .)
    RPAREN          reduce using rule 75 (pointer_type -> CARET ID .)
    END             reduce using rule 75 (pointer_type -> CARET ID .)
    CASE            reduce using rule 75 (pointer_type -> CARET ID .)
    ID              reduce using rule 75 (pointer_type -> CARET ID .)
    OF              reduce using rule 75 (pointer_type -> CARET ID .)

  ! EQUAL           [ reduce using rule 152 (data_type_list -> ID .) ]
  ! SEMICOLON       [ reduce using rule 152 (data_type_list -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 152 (data_type_list -> ID .) ]
  ! RPAREN          [ reduce using rule 152 (data_type_list -> ID .) ]
  ! END             [ reduce using rule 152 (data_type_list -> ID .) ]
  ! CASE            [ reduce using rule 152 (data_type_list -> ID .) ]
  ! ID              [ reduce using rule 152 (data_type_list -> ID .) ]
  ! OF              [ reduce using rule 152 (data_type_list -> ID .) ]


state 359

    (76) pointer_type -> CARET data_type_list .

    EQUAL           reduce using rule 76 (pointer_type -> CARET data_type_list .)
    SEMICOLON       reduce using rule 76 (pointer_type -> CARET data_type_list .)
    ABSOLUTE        reduce using rule 76 (pointer_type -> CARET data_type_list .)
    RPAREN          reduce using rule 76 (pointer_type -> CARET data_type_list .)
    END             reduce using rule 76 (pointer_type -> CARET data_type_list .)
    CASE            reduce using rule 76 (pointer_type -> CARET data_type_list .)
    ID              reduce using rule 76 (pointer_type -> CARET data_type_list .)
    OF              reduce using rule 76 (pointer_type -> CARET data_type_list .)


state 360

    (57) record_type -> RECORD record_list . END
    (100) record_list -> record_list . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 418
    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_declaration             shift and go to state 419
    id_list                        shift and go to state 362

state 361

    (101) record_list -> record_declaration .

    END             reduce using rule 101 (record_list -> record_declaration .)
    CASE            reduce using rule 101 (record_list -> record_declaration .)
    ID              reduce using rule 101 (record_list -> record_declaration .)
    RPAREN          reduce using rule 101 (record_list -> record_declaration .)


state 362

    (102) record_declaration -> id_list . COLON data_type_list SEMICOLON
    (104) record_declaration -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 420
    COMMA           shift and go to state 44


state 363

    (103) record_declaration -> CASE . ID COLON data_type_list OF variant_list

    ID              shift and go to state 421


state 364

    (74) set_type -> SET OF . set_range
    (70) set_range -> . data_type_set
    (71) set_range -> . NUMBER DOBLEDOT NUMBER
    (72) set_range -> . CHAR DOBLEDOT CHAR
    (73) set_range -> . ID
    (162) data_type_set -> . BYTE
    (163) data_type_set -> . SHORTINT
    (164) data_type_set -> . WORD
    (165) data_type_set -> . BOOLEAN
    (166) data_type_set -> . CHAR
    (167) data_type_set -> . ID

    NUMBER          shift and go to state 424
    CHAR            shift and go to state 425
    ID              shift and go to state 426
    BYTE            shift and go to state 427
    SHORTINT        shift and go to state 428
    WORD            shift and go to state 429
    BOOLEAN         shift and go to state 430

    set_range                      shift and go to state 422
    data_type_set                  shift and go to state 423

state 365

    (79) object_type -> OBJECT object_heritage . object_fields object_methods END
    (82) object_fields -> . object_fields var_declaration
    (83) object_fields -> . empty
    (228) empty -> .

    ID              reduce using rule 228 (empty -> .)
    END             reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)

    object_fields                  shift and go to state 431
    empty                          shift and go to state 432

state 366

    (80) object_heritage -> LPAREN . ID RPAREN

    ID              shift and go to state 433


state 367

    (81) object_heritage -> empty .

    ID              reduce using rule 81 (object_heritage -> empty .)
    END             reduce using rule 81 (object_heritage -> empty .)
    PROCEDURE       reduce using rule 81 (object_heritage -> empty .)
    FUNCTION        reduce using rule 81 (object_heritage -> empty .)
    CONSTRUCTOR     reduce using rule 81 (object_heritage -> empty .)
    DESTRUCTOR      reduce using rule 81 (object_heritage -> empty .)


state 368

    (47) type_definition -> ID DOBLEDOT . ID

    ID              shift and go to state 434


state 369

    (42) type_declaration -> ID EQUAL type_definition SEMICOLON .

    ID              reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    BEGIN           reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    LABEL           reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONST           reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    TYPE            reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    VAR             reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    FUNCTION        reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    INTERFACE       reduce using rule 42 (type_declaration -> ID EQUAL type_definition SEMICOLON .)


state 370

    (44) type_definition -> LPAREN id_list . RPAREN
    (7) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 435
    COMMA           shift and go to state 44


state 371

    (45) type_definition -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 436


state 372

    (46) type_definition -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 437


state 373

    (114) var_declaration -> id_list COLON type_definition SEMICOLON .

    ID              reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    BEGIN           reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    LABEL           reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONST           reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    TYPE            reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    VAR             reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    FUNCTION        reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    INTERFACE       reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    END             reduce using rule 114 (var_declaration -> id_list COLON type_definition SEMICOLON .)


state 374

    (115) var_declaration -> id_list COLON type_definition EQUAL . expression SEMICOLON
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 438
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 375

    (116) var_declaration -> id_list COLON type_definition ABSOLUTE . ID SEMICOLON

    ID              shift and go to state 439


state 376

    (118) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 118 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 377

    (127) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 127 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 378

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 440


state 379

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 441


state 380

    (94) method_implementation -> PROCEDURE ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 442


state 381

    (129) parameters -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 129 (parameters -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 129 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 129 (parameters -> LPAREN parameter_list RPAREN .)


state 382

    (131) parameter_list -> parameter_list SEMICOLON . parameter_group
    (133) parameter_group -> . id_list COLON data_type_list
    (134) parameter_group -> . VAR id_list COLON data_type_list
    (135) parameter_group -> . CONST id_list COLON data_type_list
    (136) parameter_group -> . procedure_header
    (137) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 303
    CONST           shift and go to state 304
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308

    parameter_group                shift and go to state 443
    id_list                        shift and go to state 302
    procedure_header               shift and go to state 305
    function_header                shift and go to state 306

state 383

    (133) parameter_group -> id_list COLON . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 444
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 384

    (134) parameter_group -> VAR id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 445
    COMMA           shift and go to state 44


state 385

    (135) parameter_group -> CONST id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 446
    COMMA           shift and go to state 44


state 386

    (119) procedure_header -> PROCEDURE ID . parameters
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    RPAREN          reduce using rule 228 (empty -> .)
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 170
    empty                          shift and go to state 172

state 387

    (128) function_header -> FUNCTION ID . parameters COLON data_type_list
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    COLON           reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 174
    empty                          shift and go to state 172

state 388

    (95) method_implementation -> FUNCTION ID DOT ID parameters . COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    COLON           shift and go to state 447


state 389

    (128) function_header -> FUNCTION ID parameters COLON data_type_list .

    SEMICOLON       reduce using rule 128 (function_header -> FUNCTION ID parameters COLON data_type_list .)
    RPAREN          reduce using rule 128 (function_header -> FUNCTION ID parameters COLON data_type_list .)


state 390

    (201) procedure_call -> variable DOT ID LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 448
    COMMA           shift and go to state 313


state 391

    (202) procedure_call -> variable DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 202 (procedure_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 202 (procedure_call -> variable DOT ID LPAREN RPAREN .)


state 392

    (283) expression_list -> expression_list COMMA expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 283 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 283 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 283 (expression_list -> expression_list COMMA expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 393

    (208) if_statement -> IF expression THEN sentence ELSE . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 449
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 394

    (280) function_call -> variable DOT ID LPAREN . expression_list RPAREN
    (281) function_call -> variable DOT ID LPAREN . RPAREN
    (282) expression_list -> . expression
    (283) expression_list -> . expression_list COMMA expression
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 451
    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    variable                       shift and go to state 130
    expression_list                shift and go to state 450
    expression                     shift and go to state 184
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 395

    (278) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 278 (function_call -> ID LPAREN expression_list RPAREN .)


state 396

    (270) set_item_list -> set_item_list COMMA set_item .

    RBRACKET        reduce using rule 270 (set_item_list -> set_item_list COMMA set_item .)
    COMMA           reduce using rule 270 (set_item_list -> set_item_list COMMA set_item .)


state 397

    (268) set_item -> expression DOBLEDOT expression .
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 268 (set_item -> expression DOBLEDOT expression .)
    COMMA           reduce using rule 268 (set_item -> expression DOBLEDOT expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 398

    (209) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 209 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 209 (case_statement -> CASE expression OF case_list END .)


state 399

    (210) case_statement -> CASE expression OF case_list ELSE . sentences_list SEMICOLON END
    (211) case_statement -> CASE expression OF case_list ELSE . sentences_list END
    (169) sentences_list -> . sentences_list sentence SEMICOLON
    (170) sentences_list -> . sentence SEMICOLON
    (171) sentences_list -> . empty
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (228) empty -> .
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMICOLON       reduce using rule 228 (empty -> .)
    END             reduce using rule 228 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 228 (empty -> .) ]
  ! NEW             [ reduce using rule 228 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 228 (empty -> .) ]
  ! BEGIN           [ reduce using rule 228 (empty -> .) ]
  ! IF              [ reduce using rule 228 (empty -> .) ]
  ! CASE            [ reduce using rule 228 (empty -> .) ]
  ! FOR             [ reduce using rule 228 (empty -> .) ]
  ! WHILE           [ reduce using rule 228 (empty -> .) ]
  ! REPEAT          [ reduce using rule 228 (empty -> .) ]
  ! WITH            [ reduce using rule 228 (empty -> .) ]
  ! GOTO            [ reduce using rule 228 (empty -> .) ]
  ! NUMBER          [ reduce using rule 228 (empty -> .) ]
  ! ASM             [ reduce using rule 228 (empty -> .) ]
  ! LPAREN          [ reduce using rule 228 (empty -> .) ]

    sentences_list                 shift and go to state 452
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 400

    (212) case_list -> case_list case_label . COLON sentence SEMICOLON
    (217) case_label -> case_label . COMMA constant

    COLON           shift and go to state 453
    COMMA           shift and go to state 402


state 401

    (213) case_list -> case_label COLON . sentence SEMICOLON
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 454
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 402

    (217) case_label -> case_label COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    constant                       shift and go to state 455
    set_constructor                shift and go to state 248

state 403

    (216) case_label -> constant DOBLEDOT . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    constant                       shift and go to state 456
    set_constructor                shift and go to state 248

state 404

    (218) for_statement -> FOR ID ASIGNATION expression TO . expression DO sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 457
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 405

    (219) for_statement -> FOR ID ASIGNATION expression DOWNTO . expression DO sentence
    (229) expression -> . expression OR simple_expression
    (230) expression -> . expression XOR simple_expression
    (231) expression -> . simple_expression
    (232) simple_expression -> . simple_expression AND relational_expression
    (233) simple_expression -> . relational_expression
    (234) relational_expression -> . relational_expression relational_operator additive_expression
    (235) relational_expression -> . additive_expression
    (243) additive_expression -> . additive_expression PLUS multiplicative_expression
    (244) additive_expression -> . additive_expression MINUS multiplicative_expression
    (245) additive_expression -> . multiplicative_expression
    (246) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (247) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (248) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (249) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (250) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (251) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (252) multiplicative_expression -> . unary_expression
    (253) unary_expression -> . NOT unary_expression
    (254) unary_expression -> . MINUS unary_expression
    (255) unary_expression -> . PLUS unary_expression
    (256) unary_expression -> . ADDRESS_OF unary_expression
    (257) unary_expression -> . primary_expression
    (258) primary_expression -> . variable
    (259) primary_expression -> . NUMBER
    (260) primary_expression -> . STRING
    (261) primary_expression -> . TRUE
    (262) primary_expression -> . FALSE
    (263) primary_expression -> . NIL
    (264) primary_expression -> . LPAREN expression RPAREN
    (265) primary_expression -> . function_call
    (266) primary_expression -> . set_constructor
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET
    (278) function_call -> . ID LPAREN expression_list RPAREN
    (279) function_call -> . ID LPAREN RPAREN
    (280) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (281) function_call -> . variable DOT ID LPAREN RPAREN
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 127
    MINUS           shift and go to state 125
    PLUS            shift and go to state 123
    ADDRESS_OF      shift and go to state 128
    NUMBER          shift and go to state 131
    STRING          shift and go to state 132
    TRUE            shift and go to state 133
    FALSE           shift and go to state 134
    NIL             shift and go to state 135
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    LBRACKET        shift and go to state 140

    expression                     shift and go to state 458
    simple_expression              shift and go to state 120
    relational_expression          shift and go to state 121
    additive_expression            shift and go to state 122
    multiplicative_expression      shift and go to state 124
    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 129
    variable                       shift and go to state 130
    function_call                  shift and go to state 137
    set_constructor                shift and go to state 138

state 406

    (220) for_statement -> FOR ID IN expression DO . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 459
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 407

    (31) const_declaration -> ID COLON data_type_list EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 460


state 408

    (151) data_type_list -> STRING LBRACKET NUMBER . RBRACKET
    (56) string_type -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 461


state 409

    (77) file_type -> FILE OF data_type_list .

    EQUAL           reduce using rule 77 (file_type -> FILE OF data_type_list .)
    SEMICOLON       reduce using rule 77 (file_type -> FILE OF data_type_list .)
    ABSOLUTE        reduce using rule 77 (file_type -> FILE OF data_type_list .)
    RPAREN          reduce using rule 77 (file_type -> FILE OF data_type_list .)
    END             reduce using rule 77 (file_type -> FILE OF data_type_list .)
    CASE            reduce using rule 77 (file_type -> FILE OF data_type_list .)
    ID              reduce using rule 77 (file_type -> FILE OF data_type_list .)
    OF              reduce using rule 77 (file_type -> FILE OF data_type_list .)


state 410

    (59) array_type -> ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (63) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 462
    COMMA           shift and go to state 463


state 411

    (62) type_range_list -> type_range .

    RBRACKET        reduce using rule 62 (type_range_list -> type_range .)
    COMMA           reduce using rule 62 (type_range_list -> type_range .)


state 412

    (64) type_range -> NUMBER . DOBLEDOT NUMBER
    (65) type_range -> NUMBER . DOBLEDOT ID

    DOBLEDOT        shift and go to state 464


state 413

    (66) type_range -> ID . DOBLEDOT NUMBER
    (68) type_range -> ID . DOBLEDOT ID
    (69) type_range -> ID .

    DOBLEDOT        shift and go to state 465
    RBRACKET        reduce using rule 69 (type_range -> ID .)
    COMMA           reduce using rule 69 (type_range -> ID .)


state 414

    (67) type_range -> CHAR . DOBLEDOT CHAR

    DOBLEDOT        shift and go to state 466


state 415

    (61) array_type -> ARRAY OF data_type_list .

    EQUAL           reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    SEMICOLON       reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    ABSOLUTE        reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    RPAREN          reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    END             reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    CASE            reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    ID              reduce using rule 61 (array_type -> ARRAY OF data_type_list .)
    OF              reduce using rule 61 (array_type -> ARRAY OF data_type_list .)


state 416

    (60) array_type -> PACKED ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (62) type_range_list -> . type_range
    (63) type_range_list -> . type_range_list COMMA type_range
    (64) type_range -> . NUMBER DOBLEDOT NUMBER
    (65) type_range -> . NUMBER DOBLEDOT ID
    (66) type_range -> . ID DOBLEDOT NUMBER
    (67) type_range -> . CHAR DOBLEDOT CHAR
    (68) type_range -> . ID DOBLEDOT ID
    (69) type_range -> . ID

    NUMBER          shift and go to state 412
    ID              shift and go to state 413
    CHAR            shift and go to state 414

    type_range_list                shift and go to state 467
    type_range                     shift and go to state 411

state 417

    (58) record_type -> PACKED RECORD record_list . END
    (100) record_list -> record_list . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 468
    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_declaration             shift and go to state 419
    id_list                        shift and go to state 362

state 418

    (57) record_type -> RECORD record_list END .

    EQUAL           reduce using rule 57 (record_type -> RECORD record_list END .)
    SEMICOLON       reduce using rule 57 (record_type -> RECORD record_list END .)
    ABSOLUTE        reduce using rule 57 (record_type -> RECORD record_list END .)
    RPAREN          reduce using rule 57 (record_type -> RECORD record_list END .)
    END             reduce using rule 57 (record_type -> RECORD record_list END .)
    CASE            reduce using rule 57 (record_type -> RECORD record_list END .)
    ID              reduce using rule 57 (record_type -> RECORD record_list END .)
    OF              reduce using rule 57 (record_type -> RECORD record_list END .)


state 419

    (100) record_list -> record_list record_declaration .

    END             reduce using rule 100 (record_list -> record_list record_declaration .)
    CASE            reduce using rule 100 (record_list -> record_list record_declaration .)
    ID              reduce using rule 100 (record_list -> record_list record_declaration .)
    RPAREN          reduce using rule 100 (record_list -> record_list record_declaration .)


state 420

    (102) record_declaration -> id_list COLON . data_type_list SEMICOLON
    (104) record_declaration -> id_list COLON . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 469
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 421

    (103) record_declaration -> CASE ID . COLON data_type_list OF variant_list

    COLON           shift and go to state 470


state 422

    (74) set_type -> SET OF set_range .

    EQUAL           reduce using rule 74 (set_type -> SET OF set_range .)
    SEMICOLON       reduce using rule 74 (set_type -> SET OF set_range .)
    ABSOLUTE        reduce using rule 74 (set_type -> SET OF set_range .)
    RPAREN          reduce using rule 74 (set_type -> SET OF set_range .)
    END             reduce using rule 74 (set_type -> SET OF set_range .)
    CASE            reduce using rule 74 (set_type -> SET OF set_range .)
    ID              reduce using rule 74 (set_type -> SET OF set_range .)
    OF              reduce using rule 74 (set_type -> SET OF set_range .)


state 423

    (70) set_range -> data_type_set .

    EQUAL           reduce using rule 70 (set_range -> data_type_set .)
    SEMICOLON       reduce using rule 70 (set_range -> data_type_set .)
    ABSOLUTE        reduce using rule 70 (set_range -> data_type_set .)
    RPAREN          reduce using rule 70 (set_range -> data_type_set .)
    END             reduce using rule 70 (set_range -> data_type_set .)
    CASE            reduce using rule 70 (set_range -> data_type_set .)
    ID              reduce using rule 70 (set_range -> data_type_set .)
    OF              reduce using rule 70 (set_range -> data_type_set .)


state 424

    (71) set_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 471


state 425

    (72) set_range -> CHAR . DOBLEDOT CHAR
    (166) data_type_set -> CHAR .

    DOBLEDOT        shift and go to state 472
    EQUAL           reduce using rule 166 (data_type_set -> CHAR .)
    SEMICOLON       reduce using rule 166 (data_type_set -> CHAR .)
    ABSOLUTE        reduce using rule 166 (data_type_set -> CHAR .)
    RPAREN          reduce using rule 166 (data_type_set -> CHAR .)
    END             reduce using rule 166 (data_type_set -> CHAR .)
    CASE            reduce using rule 166 (data_type_set -> CHAR .)
    ID              reduce using rule 166 (data_type_set -> CHAR .)
    OF              reduce using rule 166 (data_type_set -> CHAR .)


state 426

    (73) set_range -> ID .
    (167) data_type_set -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for END resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 73 (set_range -> ID .)
    EQUAL           reduce using rule 73 (set_range -> ID .)
    SEMICOLON       reduce using rule 73 (set_range -> ID .)
    ABSOLUTE        reduce using rule 73 (set_range -> ID .)
    RPAREN          reduce using rule 73 (set_range -> ID .)
    END             reduce using rule 73 (set_range -> ID .)
    CASE            reduce using rule 73 (set_range -> ID .)
    ID              reduce using rule 73 (set_range -> ID .)
    OF              reduce using rule 73 (set_range -> ID .)

  ! EQUAL           [ reduce using rule 167 (data_type_set -> ID .) ]
  ! SEMICOLON       [ reduce using rule 167 (data_type_set -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 167 (data_type_set -> ID .) ]
  ! RPAREN          [ reduce using rule 167 (data_type_set -> ID .) ]
  ! END             [ reduce using rule 167 (data_type_set -> ID .) ]
  ! CASE            [ reduce using rule 167 (data_type_set -> ID .) ]
  ! ID              [ reduce using rule 167 (data_type_set -> ID .) ]
  ! OF              [ reduce using rule 167 (data_type_set -> ID .) ]


state 427

    (162) data_type_set -> BYTE .

    EQUAL           reduce using rule 162 (data_type_set -> BYTE .)
    SEMICOLON       reduce using rule 162 (data_type_set -> BYTE .)
    ABSOLUTE        reduce using rule 162 (data_type_set -> BYTE .)
    RPAREN          reduce using rule 162 (data_type_set -> BYTE .)
    END             reduce using rule 162 (data_type_set -> BYTE .)
    CASE            reduce using rule 162 (data_type_set -> BYTE .)
    ID              reduce using rule 162 (data_type_set -> BYTE .)
    OF              reduce using rule 162 (data_type_set -> BYTE .)


state 428

    (163) data_type_set -> SHORTINT .

    EQUAL           reduce using rule 163 (data_type_set -> SHORTINT .)
    SEMICOLON       reduce using rule 163 (data_type_set -> SHORTINT .)
    ABSOLUTE        reduce using rule 163 (data_type_set -> SHORTINT .)
    RPAREN          reduce using rule 163 (data_type_set -> SHORTINT .)
    END             reduce using rule 163 (data_type_set -> SHORTINT .)
    CASE            reduce using rule 163 (data_type_set -> SHORTINT .)
    ID              reduce using rule 163 (data_type_set -> SHORTINT .)
    OF              reduce using rule 163 (data_type_set -> SHORTINT .)


state 429

    (164) data_type_set -> WORD .

    EQUAL           reduce using rule 164 (data_type_set -> WORD .)
    SEMICOLON       reduce using rule 164 (data_type_set -> WORD .)
    ABSOLUTE        reduce using rule 164 (data_type_set -> WORD .)
    RPAREN          reduce using rule 164 (data_type_set -> WORD .)
    END             reduce using rule 164 (data_type_set -> WORD .)
    CASE            reduce using rule 164 (data_type_set -> WORD .)
    ID              reduce using rule 164 (data_type_set -> WORD .)
    OF              reduce using rule 164 (data_type_set -> WORD .)


state 430

    (165) data_type_set -> BOOLEAN .

    EQUAL           reduce using rule 165 (data_type_set -> BOOLEAN .)
    SEMICOLON       reduce using rule 165 (data_type_set -> BOOLEAN .)
    ABSOLUTE        reduce using rule 165 (data_type_set -> BOOLEAN .)
    RPAREN          reduce using rule 165 (data_type_set -> BOOLEAN .)
    END             reduce using rule 165 (data_type_set -> BOOLEAN .)
    CASE            reduce using rule 165 (data_type_set -> BOOLEAN .)
    ID              reduce using rule 165 (data_type_set -> BOOLEAN .)
    OF              reduce using rule 165 (data_type_set -> BOOLEAN .)


state 431

    (79) object_type -> OBJECT object_heritage object_fields . object_methods END
    (82) object_fields -> object_fields . var_declaration
    (84) object_methods -> . object_methods method_declaration
    (85) object_methods -> . empty
    (114) var_declaration -> . id_list COLON type_definition SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (116) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (228) empty -> .
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    ID              shift and go to state 13

    object_methods                 shift and go to state 473
    var_declaration                shift and go to state 474
    empty                          shift and go to state 475
    id_list                        shift and go to state 85

state 432

    (83) object_fields -> empty .

    ID              reduce using rule 83 (object_fields -> empty .)
    END             reduce using rule 83 (object_fields -> empty .)
    PROCEDURE       reduce using rule 83 (object_fields -> empty .)
    FUNCTION        reduce using rule 83 (object_fields -> empty .)
    CONSTRUCTOR     reduce using rule 83 (object_fields -> empty .)
    DESTRUCTOR      reduce using rule 83 (object_fields -> empty .)


state 433

    (80) object_heritage -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 476


state 434

    (47) type_definition -> ID DOBLEDOT ID .

    SEMICOLON       reduce using rule 47 (type_definition -> ID DOBLEDOT ID .)
    EQUAL           reduce using rule 47 (type_definition -> ID DOBLEDOT ID .)
    ABSOLUTE        reduce using rule 47 (type_definition -> ID DOBLEDOT ID .)


state 435

    (44) type_definition -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 44 (type_definition -> LPAREN id_list RPAREN .)
    EQUAL           reduce using rule 44 (type_definition -> LPAREN id_list RPAREN .)
    ABSOLUTE        reduce using rule 44 (type_definition -> LPAREN id_list RPAREN .)


state 436

    (45) type_definition -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 45 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    EQUAL           reduce using rule 45 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 45 (type_definition -> NUMBER DOBLEDOT NUMBER .)


state 437

    (46) type_definition -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 46 (type_definition -> CHAR DOBLEDOT CHAR .)
    EQUAL           reduce using rule 46 (type_definition -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 46 (type_definition -> CHAR DOBLEDOT CHAR .)


state 438

    (115) var_declaration -> id_list COLON type_definition EQUAL expression . SEMICOLON
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    SEMICOLON       shift and go to state 477
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 439

    (116) var_declaration -> id_list COLON type_definition ABSOLUTE ID . SEMICOLON

    SEMICOLON       shift and go to state 478


state 440

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 479
    empty                          shift and go to state 11

state 441

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 480
    empty                          shift and go to state 11

state 442

    (94) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 481
    empty                          shift and go to state 11

state 443

    (131) parameter_list -> parameter_list SEMICOLON parameter_group .

    RPAREN          reduce using rule 131 (parameter_list -> parameter_list SEMICOLON parameter_group .)
    SEMICOLON       reduce using rule 131 (parameter_list -> parameter_list SEMICOLON parameter_group .)


state 444

    (133) parameter_group -> id_list COLON data_type_list .

    RPAREN          reduce using rule 133 (parameter_group -> id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 133 (parameter_group -> id_list COLON data_type_list .)


state 445

    (134) parameter_group -> VAR id_list COLON . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 482
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 446

    (135) parameter_group -> CONST id_list COLON . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 483
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 447

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON . data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 484
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 448

    (201) procedure_call -> variable DOT ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 201 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 201 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 449

    (208) if_statement -> IF expression THEN sentence ELSE sentence .

    SEMICOLON       reduce using rule 208 (if_statement -> IF expression THEN sentence ELSE sentence .)
    ELSE            reduce using rule 208 (if_statement -> IF expression THEN sentence ELSE sentence .)


state 450

    (280) function_call -> variable DOT ID LPAREN expression_list . RPAREN
    (283) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 485
    COMMA           shift and go to state 313


state 451

    (281) function_call -> variable DOT ID LPAREN RPAREN .

    TIMES           reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIV             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    MOD             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHL             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHR             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    PLUS            reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    MINUS           reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    EQUAL           reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DISTINT         reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESS            reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATER         reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    IN              reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    AND             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    THEN            reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    OR              reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    XOR             reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    OF              reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DO              reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    COMMA           reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    TO              reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 281 (function_call -> variable DOT ID LPAREN RPAREN .)


state 452

    (210) case_statement -> CASE expression OF case_list ELSE sentences_list . SEMICOLON END
    (211) case_statement -> CASE expression OF case_list ELSE sentences_list . END
    (169) sentences_list -> sentences_list . sentence SEMICOLON
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 486
    END             shift and go to state 487
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! SEMICOLON       [ reduce using rule 228 (empty -> .) ]

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 453

    (212) case_list -> case_list case_label COLON . sentence SEMICOLON
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 488
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 454

    (213) case_list -> case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 489


state 455

    (217) case_label -> case_label COMMA constant .

    COLON           reduce using rule 217 (case_label -> case_label COMMA constant .)
    COMMA           reduce using rule 217 (case_label -> case_label COMMA constant .)


state 456

    (216) case_label -> constant DOBLEDOT constant .

    COLON           reduce using rule 216 (case_label -> constant DOBLEDOT constant .)
    COMMA           reduce using rule 216 (case_label -> constant DOBLEDOT constant .)


state 457

    (218) for_statement -> FOR ID ASIGNATION expression TO expression . DO sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    DO              shift and go to state 490
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 458

    (219) for_statement -> FOR ID ASIGNATION expression DOWNTO expression . DO sentence
    (229) expression -> expression . OR simple_expression
    (230) expression -> expression . XOR simple_expression

    DO              shift and go to state 491
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 459

    (220) for_statement -> FOR ID IN expression DO sentence .

    SEMICOLON       reduce using rule 220 (for_statement -> FOR ID IN expression DO sentence .)
    ELSE            reduce using rule 220 (for_statement -> FOR ID IN expression DO sentence .)


state 460

    (31) const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .

    ID              reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONST           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    VAR             reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)


state 461

    (151) data_type_list -> STRING LBRACKET NUMBER RBRACKET .
    (56) string_type -> STRING LBRACKET NUMBER RBRACKET .

  ! reduce/reduce conflict for EQUAL resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for OF resolved using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ABSOLUTE        reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 56 (string_type -> STRING LBRACKET NUMBER RBRACKET .)

  ! EQUAL           [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ABSOLUTE        [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! END             [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ID              [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! OF              [ reduce using rule 151 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]


state 462

    (59) array_type -> ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 492


state 463

    (63) type_range_list -> type_range_list COMMA . type_range
    (64) type_range -> . NUMBER DOBLEDOT NUMBER
    (65) type_range -> . NUMBER DOBLEDOT ID
    (66) type_range -> . ID DOBLEDOT NUMBER
    (67) type_range -> . CHAR DOBLEDOT CHAR
    (68) type_range -> . ID DOBLEDOT ID
    (69) type_range -> . ID

    NUMBER          shift and go to state 412
    ID              shift and go to state 413
    CHAR            shift and go to state 414

    type_range                     shift and go to state 493

state 464

    (64) type_range -> NUMBER DOBLEDOT . NUMBER
    (65) type_range -> NUMBER DOBLEDOT . ID

    NUMBER          shift and go to state 494
    ID              shift and go to state 495


state 465

    (66) type_range -> ID DOBLEDOT . NUMBER
    (68) type_range -> ID DOBLEDOT . ID

    NUMBER          shift and go to state 497
    ID              shift and go to state 496


state 466

    (67) type_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 498


state 467

    (60) array_type -> PACKED ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (63) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 499
    COMMA           shift and go to state 463


state 468

    (58) record_type -> PACKED RECORD record_list END .

    EQUAL           reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    SEMICOLON       reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    ABSOLUTE        reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    RPAREN          reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    END             reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    CASE            reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    ID              reduce using rule 58 (record_type -> PACKED RECORD record_list END .)
    OF              reduce using rule 58 (record_type -> PACKED RECORD record_list END .)


state 469

    (102) record_declaration -> id_list COLON data_type_list . SEMICOLON
    (104) record_declaration -> id_list COLON data_type_list .

    SEMICOLON       shift and go to state 500
    END             reduce using rule 104 (record_declaration -> id_list COLON data_type_list .)
    CASE            reduce using rule 104 (record_declaration -> id_list COLON data_type_list .)
    ID              reduce using rule 104 (record_declaration -> id_list COLON data_type_list .)
    RPAREN          reduce using rule 104 (record_declaration -> id_list COLON data_type_list .)


state 470

    (103) record_declaration -> CASE ID COLON . data_type_list OF variant_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 501
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 471

    (71) set_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 502


state 472

    (72) set_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 503


state 473

    (79) object_type -> OBJECT object_heritage object_fields object_methods . END
    (84) object_methods -> object_methods . method_declaration
    (86) method_declaration -> . procedure_header SEMICOLON
    (87) method_declaration -> . function_header SEMICOLON
    (88) method_declaration -> . constructor_declaration
    (89) method_declaration -> . destructor_declaration
    (90) method_declaration -> . procedure_header SEMICOLON directive
    (91) method_declaration -> . function_header SEMICOLON directive
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list
    (96) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON
    (97) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON directive
    (98) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON
    (99) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON directive

    END             shift and go to state 504
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308
    CONSTRUCTOR     shift and go to state 510
    DESTRUCTOR      shift and go to state 511

    method_declaration             shift and go to state 505
    procedure_header               shift and go to state 506
    function_header                shift and go to state 507
    constructor_declaration        shift and go to state 508
    destructor_declaration         shift and go to state 509

state 474

    (82) object_fields -> object_fields var_declaration .

    ID              reduce using rule 82 (object_fields -> object_fields var_declaration .)
    END             reduce using rule 82 (object_fields -> object_fields var_declaration .)
    PROCEDURE       reduce using rule 82 (object_fields -> object_fields var_declaration .)
    FUNCTION        reduce using rule 82 (object_fields -> object_fields var_declaration .)
    CONSTRUCTOR     reduce using rule 82 (object_fields -> object_fields var_declaration .)
    DESTRUCTOR      reduce using rule 82 (object_fields -> object_fields var_declaration .)


state 475

    (85) object_methods -> empty .

    END             reduce using rule 85 (object_methods -> empty .)
    PROCEDURE       reduce using rule 85 (object_methods -> empty .)
    FUNCTION        reduce using rule 85 (object_methods -> empty .)
    CONSTRUCTOR     reduce using rule 85 (object_methods -> empty .)
    DESTRUCTOR      reduce using rule 85 (object_methods -> empty .)


state 476

    (80) object_heritage -> LPAREN ID RPAREN .

    ID              reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)
    END             reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)
    PROCEDURE       reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)
    FUNCTION        reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)
    CONSTRUCTOR     reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)
    DESTRUCTOR      reduce using rule 80 (object_heritage -> LPAREN ID RPAREN .)


state 477

    (115) var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .

    ID              reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    LABEL           reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONST           reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    TYPE            reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    VAR             reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    PROCEDURE       reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    IMPLEMENTATION  reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    END             reduce using rule 115 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)


state 478

    (116) var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .

    ID              reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    BEGIN           reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    LABEL           reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONST           reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    TYPE            reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    VAR             reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    PROCEDURE       reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    FUNCTION        reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    INTERFACE       reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    END             reduce using rule 116 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)


state 479

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 512
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 480

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 513
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 481

    (94) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 514
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 482

    (134) parameter_group -> VAR id_list COLON data_type_list .

    RPAREN          reduce using rule 134 (parameter_group -> VAR id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 134 (parameter_group -> VAR id_list COLON data_type_list .)


state 483

    (135) parameter_group -> CONST id_list COLON data_type_list .

    RPAREN          reduce using rule 135 (parameter_group -> CONST id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 135 (parameter_group -> CONST id_list COLON data_type_list .)


state 484

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 515


state 485

    (280) function_call -> variable DOT ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 280 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 486

    (210) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON . END

    END             shift and go to state 516


state 487

    (211) case_statement -> CASE expression OF case_list ELSE sentences_list END .

    SEMICOLON       reduce using rule 211 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)
    ELSE            reduce using rule 211 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)


state 488

    (212) case_list -> case_list case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 517


state 489

    (213) case_list -> case_label COLON sentence SEMICOLON .

    END             reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)
    LBRACKET        reduce using rule 213 (case_list -> case_label COLON sentence SEMICOLON .)


state 490

    (218) for_statement -> FOR ID ASIGNATION expression TO expression DO . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 518
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 491

    (219) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO . sentence
    (172) sentence -> . assignment
    (173) sentence -> . procedure_call
    (174) sentence -> . compound_statement
    (175) sentence -> . if_statement
    (176) sentence -> . case_statement
    (177) sentence -> . for_statement
    (178) sentence -> . while_statement
    (179) sentence -> . repeat_statement
    (180) sentence -> . with_statement
    (181) sentence -> . goto_statement
    (182) sentence -> . labeled_sentence
    (183) sentence -> . asm_statement
    (184) sentence -> . empty
    (186) assignment -> . variable ASIGNATION expression
    (187) assignment -> . ID ASIGNATION expression
    (188) assignment -> . variable PLUS_ASIGN expression
    (189) assignment -> . ID PLUS_ASIGN expression
    (190) assignment -> . variable MINUS_ASIGN expression
    (191) assignment -> . ID MINUS_ASIGN expression
    (192) assignment -> . variable TIMES_ASIGN expression
    (193) assignment -> . ID TIMES_ASIGN expression
    (194) assignment -> . variable DIVIDE_ASIGN expression
    (195) assignment -> . ID DIVIDE_ASIGN expression
    (196) assignment -> . variable EQUAL expression
    (197) assignment -> . ID EQUAL expression
    (198) procedure_call -> . ID
    (199) procedure_call -> . ID LPAREN expression_list RPAREN
    (200) procedure_call -> . ID LPAREN RPAREN
    (201) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (202) procedure_call -> . variable DOT ID LPAREN RPAREN
    (203) procedure_call -> . NEW LPAREN expression_list RPAREN
    (204) procedure_call -> . NEW LPAREN RPAREN
    (205) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (206) procedure_call -> . DISPOSE LPAREN RPAREN
    (168) compound_statement -> . BEGIN sentences_list END
    (207) if_statement -> . IF expression THEN sentence
    (208) if_statement -> . IF expression THEN sentence ELSE sentence
    (209) case_statement -> . CASE expression OF case_list END
    (210) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (218) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (219) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (220) for_statement -> . FOR ID IN expression DO sentence
    (221) while_statement -> . WHILE expression DO sentence
    (222) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (223) with_statement -> . WITH variable_list DO sentence
    (226) goto_statement -> . GOTO NUMBER
    (227) labeled_sentence -> . NUMBER COLON sentence
    (185) asm_statement -> . ASM
    (228) empty -> .
    (273) variable -> . ID
    (274) variable -> . variable DOT ID
    (275) variable -> . variable LBRACKET expression_list RBRACKET
    (276) variable -> . variable CARET
    (277) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 228 (empty -> .)
    ELSE            reduce using rule 228 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 519
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 492

    (59) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 520
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 493

    (63) type_range_list -> type_range_list COMMA type_range .

    RBRACKET        reduce using rule 63 (type_range_list -> type_range_list COMMA type_range .)
    COMMA           reduce using rule 63 (type_range_list -> type_range_list COMMA type_range .)


state 494

    (64) type_range -> NUMBER DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 64 (type_range -> NUMBER DOBLEDOT NUMBER .)
    COMMA           reduce using rule 64 (type_range -> NUMBER DOBLEDOT NUMBER .)


state 495

    (65) type_range -> NUMBER DOBLEDOT ID .

    RBRACKET        reduce using rule 65 (type_range -> NUMBER DOBLEDOT ID .)
    COMMA           reduce using rule 65 (type_range -> NUMBER DOBLEDOT ID .)


state 496

    (68) type_range -> ID DOBLEDOT ID .

    RBRACKET        reduce using rule 68 (type_range -> ID DOBLEDOT ID .)
    COMMA           reduce using rule 68 (type_range -> ID DOBLEDOT ID .)


state 497

    (66) type_range -> ID DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 66 (type_range -> ID DOBLEDOT NUMBER .)
    COMMA           reduce using rule 66 (type_range -> ID DOBLEDOT NUMBER .)


state 498

    (67) type_range -> CHAR DOBLEDOT CHAR .

    RBRACKET        reduce using rule 67 (type_range -> CHAR DOBLEDOT CHAR .)
    COMMA           reduce using rule 67 (type_range -> CHAR DOBLEDOT CHAR .)


state 499

    (60) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 521


state 500

    (102) record_declaration -> id_list COLON data_type_list SEMICOLON .

    END             reduce using rule 102 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    CASE            reduce using rule 102 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    ID              reduce using rule 102 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    RPAREN          reduce using rule 102 (record_declaration -> id_list COLON data_type_list SEMICOLON .)


state 501

    (103) record_declaration -> CASE ID COLON data_type_list . OF variant_list

    OF              shift and go to state 522


state 502

    (71) set_range -> NUMBER DOBLEDOT NUMBER .

    EQUAL           reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    SEMICOLON       reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    RPAREN          reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    END             reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    CASE            reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ID              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    OF              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)


state 503

    (72) set_range -> CHAR DOBLEDOT CHAR .

    EQUAL           reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    SEMICOLON       reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    RPAREN          reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    END             reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    CASE            reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ID              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    OF              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)


state 504

    (79) object_type -> OBJECT object_heritage object_fields object_methods END .

    EQUAL           reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    SEMICOLON       reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ABSOLUTE        reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    RPAREN          reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    END             reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    CASE            reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ID              reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    OF              reduce using rule 79 (object_type -> OBJECT object_heritage object_fields object_methods END .)


state 505

    (84) object_methods -> object_methods method_declaration .

    END             reduce using rule 84 (object_methods -> object_methods method_declaration .)
    PROCEDURE       reduce using rule 84 (object_methods -> object_methods method_declaration .)
    FUNCTION        reduce using rule 84 (object_methods -> object_methods method_declaration .)
    CONSTRUCTOR     reduce using rule 84 (object_methods -> object_methods method_declaration .)
    DESTRUCTOR      reduce using rule 84 (object_methods -> object_methods method_declaration .)


state 506

    (86) method_declaration -> procedure_header . SEMICOLON
    (90) method_declaration -> procedure_header . SEMICOLON directive

    SEMICOLON       shift and go to state 523


state 507

    (87) method_declaration -> function_header . SEMICOLON
    (91) method_declaration -> function_header . SEMICOLON directive

    SEMICOLON       shift and go to state 524


state 508

    (88) method_declaration -> constructor_declaration .

    END             reduce using rule 88 (method_declaration -> constructor_declaration .)
    PROCEDURE       reduce using rule 88 (method_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 88 (method_declaration -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 88 (method_declaration -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 88 (method_declaration -> constructor_declaration .)


state 509

    (89) method_declaration -> destructor_declaration .

    END             reduce using rule 89 (method_declaration -> destructor_declaration .)
    PROCEDURE       reduce using rule 89 (method_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 89 (method_declaration -> destructor_declaration .)
    CONSTRUCTOR     reduce using rule 89 (method_declaration -> destructor_declaration .)
    DESTRUCTOR      reduce using rule 89 (method_declaration -> destructor_declaration .)


state 510

    (96) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON
    (97) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 525


state 511

    (98) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON
    (99) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 526


state 512

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 527


state 513

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 528


state 514

    (94) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 529


state 515

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (228) empty -> .

    BEGIN           reduce using rule 228 (empty -> .)
    LABEL           reduce using rule 228 (empty -> .)
    CONST           reduce using rule 228 (empty -> .)
    TYPE            reduce using rule 228 (empty -> .)
    VAR             reduce using rule 228 (empty -> .)
    CONSTRUCTOR     reduce using rule 228 (empty -> .)
    DESTRUCTOR      reduce using rule 228 (empty -> .)
    PROCEDURE       reduce using rule 228 (empty -> .)
    FUNCTION        reduce using rule 228 (empty -> .)
    IMPLEMENTATION  reduce using rule 228 (empty -> .)
    INTERFACE       reduce using rule 228 (empty -> .)

    declaration_blocks             shift and go to state 530
    empty                          shift and go to state 11

state 516

    (210) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .

    SEMICOLON       reduce using rule 210 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)
    ELSE            reduce using rule 210 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)


state 517

    (212) case_list -> case_list case_label COLON sentence SEMICOLON .

    END             reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    LBRACKET        reduce using rule 212 (case_list -> case_list case_label COLON sentence SEMICOLON .)


state 518

    (218) for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .

    SEMICOLON       reduce using rule 218 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)
    ELSE            reduce using rule 218 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)


state 519

    (219) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .

    SEMICOLON       reduce using rule 219 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)
    ELSE            reduce using rule 219 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)


state 520

    (59) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 59 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 521

    (60) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (138) data_type_list -> . INTEGER
    (139) data_type_list -> . BYTE
    (140) data_type_list -> . LONGINT
    (141) data_type_list -> . SHORTINT
    (142) data_type_list -> . WORD
    (143) data_type_list -> . REAL
    (144) data_type_list -> . SINGLE
    (145) data_type_list -> . DOUBLE
    (146) data_type_list -> . EXTENDED
    (147) data_type_list -> . SHORT
    (148) data_type_list -> . BOOLEAN
    (149) data_type_list -> . CHAR
    (150) data_type_list -> . STRING
    (151) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (152) data_type_list -> . ID
    (153) data_type_list -> . ABSOLUTE ID
    (154) data_type_list -> . FILE
    (155) data_type_list -> . array_type
    (156) data_type_list -> . pointer_type
    (157) data_type_list -> . record_type
    (158) data_type_list -> . set_type
    (159) data_type_list -> . file_type
    (160) data_type_list -> . object_type
    (161) data_type_list -> . string_type
    (59) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (61) array_type -> . ARRAY OF data_type_list
    (75) pointer_type -> . CARET ID
    (76) pointer_type -> . CARET data_type_list
    (57) record_type -> . RECORD record_list END
    (58) record_type -> . PACKED RECORD record_list END
    (74) set_type -> . SET OF set_range
    (77) file_type -> . FILE OF data_type_list
    (78) file_type -> . FILE
    (79) object_type -> . OBJECT object_heritage object_fields object_methods END
    (55) string_type -> . STRING
    (56) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 531
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 522

    (103) record_declaration -> CASE ID COLON data_type_list OF . variant_list
    (105) variant_list -> . variant_list variant
    (106) variant_list -> . variant
    (107) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (108) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (109) constant_list -> . constant
    (110) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    variant_list                   shift and go to state 532
    variant                        shift and go to state 533
    constant_list                  shift and go to state 534
    constant                       shift and go to state 535
    set_constructor                shift and go to state 248

state 523

    (86) method_declaration -> procedure_header SEMICOLON .
    (90) method_declaration -> procedure_header SEMICOLON . directive
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL

    END             reduce using rule 86 (method_declaration -> procedure_header SEMICOLON .)
    PROCEDURE       reduce using rule 86 (method_declaration -> procedure_header SEMICOLON .)
    FUNCTION        reduce using rule 86 (method_declaration -> procedure_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 86 (method_declaration -> procedure_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 86 (method_declaration -> procedure_header SEMICOLON .)
    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164

    directive                      shift and go to state 536

state 524

    (87) method_declaration -> function_header SEMICOLON .
    (91) method_declaration -> function_header SEMICOLON . directive
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL

    END             reduce using rule 87 (method_declaration -> function_header SEMICOLON .)
    PROCEDURE       reduce using rule 87 (method_declaration -> function_header SEMICOLON .)
    FUNCTION        reduce using rule 87 (method_declaration -> function_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 87 (method_declaration -> function_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 87 (method_declaration -> function_header SEMICOLON .)
    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164

    directive                      shift and go to state 537

state 525

    (96) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON
    (97) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON directive
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 538
    empty                          shift and go to state 172

state 526

    (98) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON
    (99) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON directive
    (129) parameters -> . LPAREN parameter_list RPAREN
    (130) parameters -> . empty
    (228) empty -> .

    LPAREN          shift and go to state 171
    SEMICOLON       reduce using rule 228 (empty -> .)

    parameters                     shift and go to state 539
    empty                          shift and go to state 172

state 527

    (92) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 92 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 528

    (93) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 93 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 529

    (94) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 94 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 530

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (168) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (39) type_declaration_block -> . TYPE type_list
    (111) var_declaration_block -> . VAR var_list
    (117) procedure_declaration -> . procedure_header SEMICOLON directive
    (118) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) function_declaration -> . function_header SEMICOLON directive
    (127) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (95) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (119) procedure_header -> . PROCEDURE ID parameters
    (128) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 540
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 531

    (60) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 60 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 532

    (103) record_declaration -> CASE ID COLON data_type_list OF variant_list .
    (105) variant_list -> variant_list . variant
    (107) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (108) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (109) constant_list -> . constant
    (110) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    END             reduce using rule 103 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    CASE            reduce using rule 103 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    ID              reduce using rule 103 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    RPAREN          reduce using rule 103 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    variant                        shift and go to state 541
    constant_list                  shift and go to state 534
    constant                       shift and go to state 535
    set_constructor                shift and go to state 248

state 533

    (106) variant_list -> variant .

    NUMBER          reduce using rule 106 (variant_list -> variant .)
    STRING          reduce using rule 106 (variant_list -> variant .)
    TRUE            reduce using rule 106 (variant_list -> variant .)
    FALSE           reduce using rule 106 (variant_list -> variant .)
    NIL             reduce using rule 106 (variant_list -> variant .)
    ORDINAL_CONSTANT reduce using rule 106 (variant_list -> variant .)
    LBRACKET        reduce using rule 106 (variant_list -> variant .)
    END             reduce using rule 106 (variant_list -> variant .)
    CASE            reduce using rule 106 (variant_list -> variant .)
    ID              reduce using rule 106 (variant_list -> variant .)
    RPAREN          reduce using rule 106 (variant_list -> variant .)


state 534

    (107) variant -> constant_list . COLON LPAREN record_list RPAREN SEMICOLON
    (108) variant -> constant_list . COLON LPAREN RPAREN SEMICOLON
    (110) constant_list -> constant_list . COMMA constant

    COLON           shift and go to state 542
    COMMA           shift and go to state 543


state 535

    (109) constant_list -> constant .

    COLON           reduce using rule 109 (constant_list -> constant .)
    COMMA           reduce using rule 109 (constant_list -> constant .)


state 536

    (90) method_declaration -> procedure_header SEMICOLON directive .

    END             reduce using rule 90 (method_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 90 (method_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 90 (method_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 90 (method_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 90 (method_declaration -> procedure_header SEMICOLON directive .)


state 537

    (91) method_declaration -> function_header SEMICOLON directive .

    END             reduce using rule 91 (method_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 91 (method_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 91 (method_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 91 (method_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 91 (method_declaration -> function_header SEMICOLON directive .)


state 538

    (96) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON
    (97) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 544


state 539

    (98) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON
    (99) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 545


state 540

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 546


state 541

    (105) variant_list -> variant_list variant .

    NUMBER          reduce using rule 105 (variant_list -> variant_list variant .)
    STRING          reduce using rule 105 (variant_list -> variant_list variant .)
    TRUE            reduce using rule 105 (variant_list -> variant_list variant .)
    FALSE           reduce using rule 105 (variant_list -> variant_list variant .)
    NIL             reduce using rule 105 (variant_list -> variant_list variant .)
    ORDINAL_CONSTANT reduce using rule 105 (variant_list -> variant_list variant .)
    LBRACKET        reduce using rule 105 (variant_list -> variant_list variant .)
    END             reduce using rule 105 (variant_list -> variant_list variant .)
    CASE            reduce using rule 105 (variant_list -> variant_list variant .)
    ID              reduce using rule 105 (variant_list -> variant_list variant .)
    RPAREN          reduce using rule 105 (variant_list -> variant_list variant .)


state 542

    (107) variant -> constant_list COLON . LPAREN record_list RPAREN SEMICOLON
    (108) variant -> constant_list COLON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 547


state 543

    (110) constant_list -> constant_list COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (271) set_constructor -> . LBRACKET set_item_list RBRACKET
    (272) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 140

    constant                       shift and go to state 548
    set_constructor                shift and go to state 248

state 544

    (96) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .
    (97) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON . directive
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL

    END             reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164

    directive                      shift and go to state 549

state 545

    (98) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .
    (99) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON . directive
    (120) directive -> . FORWARD
    (121) directive -> . EXTERNAL
    (122) directive -> . EXTERNAL STRING
    (123) directive -> . ASM
    (124) directive -> . INLINE
    (125) directive -> . VIRTUAL

    END             reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 160
    EXTERNAL        shift and go to state 161
    ASM             shift and go to state 162
    INLINE          shift and go to state 163
    VIRTUAL         shift and go to state 164

    directive                      shift and go to state 550

state 546

    (95) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 95 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 547

    (107) variant -> constant_list COLON LPAREN . record_list RPAREN SEMICOLON
    (108) variant -> constant_list COLON LPAREN . RPAREN SEMICOLON
    (100) record_list -> . record_list record_declaration
    (101) record_list -> . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 552
    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_list                    shift and go to state 551
    record_declaration             shift and go to state 361
    id_list                        shift and go to state 362

state 548

    (110) constant_list -> constant_list COMMA constant .

    COLON           reduce using rule 110 (constant_list -> constant_list COMMA constant .)
    COMMA           reduce using rule 110 (constant_list -> constant_list COMMA constant .)


state 549

    (97) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 97 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 97 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 97 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 97 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 97 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)


state 550

    (99) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 99 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 99 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 99 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 99 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 99 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)


state 551

    (107) variant -> constant_list COLON LPAREN record_list . RPAREN SEMICOLON
    (100) record_list -> record_list . record_declaration
    (102) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (103) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (104) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 553
    CASE            shift and go to state 363
    ID              shift and go to state 13

    record_declaration             shift and go to state 419
    id_list                        shift and go to state 362

state 552

    (108) variant -> constant_list COLON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 554


state 553

    (107) variant -> constant_list COLON LPAREN record_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 555


state 554

    (108) variant -> constant_list COLON LPAREN RPAREN SEMICOLON .

    NUMBER          reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    NIL             reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 108 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)


state 555

    (107) variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .

    NUMBER          reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    STRING          reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    NIL             reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    END             reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    CASE            reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ID              reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 107 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NEW in state 30 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for CASE in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for WITH in state 30 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for ASM in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for ASIGNATION in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for TIMES_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for NEW in state 70 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 70 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for CASE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 70 resolved as shift
WARNING: shift/reduce conflict for WITH in state 70 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 70 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 70 resolved as shift
WARNING: shift/reduce conflict for ASM in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 92 resolved as shift
WARNING: shift/reduce conflict for CONST in state 92 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 92 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 92 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 93 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 93 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 226 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 232 resolved as shift
WARNING: shift/reduce conflict for STRING in state 232 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 232 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 232 resolved as shift
WARNING: shift/reduce conflict for NIL in state 232 resolved as shift
WARNING: shift/reduce conflict for ORDINAL_CONSTANT in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 232 resolved as shift
WARNING: shift/reduce conflict for OF in state 265 resolved as shift
WARNING: shift/reduce conflict for OF in state 265 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 319 resolved as shift
WARNING: shift/reduce conflict for ID in state 399 resolved as shift
WARNING: shift/reduce conflict for NEW in state 399 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 399 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 399 resolved as shift
WARNING: shift/reduce conflict for IF in state 399 resolved as shift
WARNING: shift/reduce conflict for CASE in state 399 resolved as shift
WARNING: shift/reduce conflict for FOR in state 399 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 399 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 399 resolved as shift
WARNING: shift/reduce conflict for WITH in state 399 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 399 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 399 resolved as shift
WARNING: shift/reduce conflict for ASM in state 399 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 399 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 452 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (sentences_list -> empty)
WARNING: rejected rule (sentence -> empty) in state 48
WARNING: reduce/reduce conflict in state 263 resolved using rule (string_type -> STRING)
WARNING: rejected rule (data_type_list -> STRING) in state 263
WARNING: reduce/reduce conflict in state 265 resolved using rule (file_type -> FILE)
WARNING: rejected rule (data_type_list -> FILE) in state 265
WARNING: reduce/reduce conflict in state 285 resolved using rule (type_definition -> record_type)
WARNING: rejected rule (data_type_list -> record_type) in state 285
WARNING: reduce/reduce conflict in state 286 resolved using rule (type_definition -> array_type)
WARNING: rejected rule (data_type_list -> array_type) in state 286
WARNING: reduce/reduce conflict in state 287 resolved using rule (type_definition -> set_type)
WARNING: rejected rule (data_type_list -> set_type) in state 287
WARNING: reduce/reduce conflict in state 288 resolved using rule (type_definition -> pointer_type)
WARNING: rejected rule (data_type_list -> pointer_type) in state 288
WARNING: reduce/reduce conflict in state 289 resolved using rule (type_definition -> file_type)
WARNING: rejected rule (data_type_list -> file_type) in state 289
WARNING: reduce/reduce conflict in state 290 resolved using rule (type_definition -> object_type)
WARNING: rejected rule (data_type_list -> object_type) in state 290
WARNING: reduce/reduce conflict in state 291 resolved using rule (type_definition -> string_type)
WARNING: rejected rule (data_type_list -> string_type) in state 291
WARNING: reduce/reduce conflict in state 358 resolved using rule (pointer_type -> CARET ID)
WARNING: rejected rule (data_type_list -> ID) in state 358
WARNING: reduce/reduce conflict in state 426 resolved using rule (set_range -> ID)
WARNING: rejected rule (data_type_set -> ID) in state 426
WARNING: reduce/reduce conflict in state 461 resolved using rule (string_type -> STRING LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) in state 461
WARNING: Rule (data_type_list -> STRING) is never reduced
WARNING: Rule (data_type_list -> FILE) is never reduced
WARNING: Rule (data_type_set -> ID) is never reduced
WARNING: Rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) is never reduced
