Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    INHERITED
    INTERRUPT
    PRIVATE
    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_header uses_clause declaration_blocks main_block
Rule 2     program_header -> PROGRAM ID SEMICOLON
Rule 3     program_header -> UNIT ID SEMICOLON
Rule 4     uses_clause -> USES id_list SEMICOLON
Rule 5     uses_clause -> empty
Rule 6     id_list -> ID
Rule 7     id_list -> id_list COMMA ID
Rule 8     declaration_blocks -> declaration_blocks declaration_block
Rule 9     declaration_blocks -> empty
Rule 10    declaration_block -> label_declaration
Rule 11    declaration_block -> const_declaration_block
Rule 12    declaration_block -> type_declaration_block
Rule 13    declaration_block -> var_declaration_block
Rule 14    declaration_block -> procedure_declaration
Rule 15    declaration_block -> function_declaration
Rule 16    declaration_block -> constructor_implementation
Rule 17    declaration_block -> destructor_implementation
Rule 18    declaration_block -> method_implementation
Rule 19    declaration_block -> implementation_block
Rule 20    declaration_block -> interface_block
Rule 21    main_block -> compound_statement DOT
Rule 22    interface_block -> INTERFACE declaration_blocks
Rule 23    implementation_block -> IMPLEMENTATION declaration_blocks
Rule 24    label_declaration -> LABEL number_list SEMICOLON
Rule 25    number_list -> NUMBER
Rule 26    number_list -> number_list COMMA NUMBER
Rule 27    const_declaration_block -> CONST const_list
Rule 28    const_list -> const_list const_declaration
Rule 29    const_list -> const_declaration
Rule 30    const_declaration -> ID EQUAL constant SEMICOLON
Rule 31    const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON
Rule 32    constant -> NUMBER
Rule 33    constant -> STRING
Rule 34    constant -> TRUE
Rule 35    constant -> FALSE
Rule 36    constant -> NIL
Rule 37    constant -> ORDINAL_CONSTANT
Rule 38    constant -> set_constructor
Rule 39    call_argument -> expression
Rule 40    call_argument -> expression COLON expression
Rule 41    call_argument -> expression COLON expression COLON expression
Rule 42    call_argument_list -> call_argument_list COMMA call_argument
Rule 43    call_argument_list -> call_argument
Rule 44    call_argument_list_opt -> call_argument_list
Rule 45    call_argument_list_opt -> empty
Rule 46    type_declaration_block -> TYPE type_list
Rule 47    type_list -> type_list type_declaration
Rule 48    type_list -> type_declaration
Rule 49    type_declaration -> ID EQUAL type_definition SEMICOLON
Rule 50    type_definition -> data_type_list
Rule 51    type_definition -> LPAREN id_list RPAREN
Rule 52    type_definition -> NUMBER DOBLEDOT NUMBER
Rule 53    type_definition -> CHAR DOBLEDOT CHAR
Rule 54    type_definition -> ID DOBLEDOT ID
Rule 55    type_definition -> record_type
Rule 56    type_definition -> array_type
Rule 57    type_definition -> set_type
Rule 58    type_definition -> pointer_type
Rule 59    type_definition -> file_type
Rule 60    type_definition -> object_type
Rule 61    type_definition -> string_type
Rule 62    string_type -> STRING
Rule 63    string_type -> STRING LBRACKET NUMBER RBRACKET
Rule 64    record_type -> RECORD record_list END
Rule 65    record_type -> PACKED RECORD record_list END
Rule 66    array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 67    array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 68    array_type -> ARRAY OF data_type_list
Rule 69    type_range_list -> type_range
Rule 70    type_range_list -> type_range_list COMMA type_range
Rule 71    type_range -> NUMBER DOBLEDOT NUMBER
Rule 72    type_range -> NUMBER DOBLEDOT ID
Rule 73    type_range -> ID DOBLEDOT NUMBER
Rule 74    type_range -> CHAR DOBLEDOT CHAR
Rule 75    type_range -> ID DOBLEDOT ID
Rule 76    type_range -> ID
Rule 77    set_range -> data_type_set
Rule 78    set_range -> NUMBER DOBLEDOT NUMBER
Rule 79    set_range -> CHAR DOBLEDOT CHAR
Rule 80    set_range -> ID
Rule 81    set_type -> SET OF set_range
Rule 82    pointer_type -> CARET ID
Rule 83    pointer_type -> CARET data_type_list
Rule 84    file_type -> FILE OF data_type_list
Rule 85    file_type -> FILE
Rule 86    object_type -> OBJECT object_heritage object_fields object_methods END
Rule 87    object_heritage -> LPAREN ID RPAREN
Rule 88    object_heritage -> empty
Rule 89    object_fields -> object_fields var_declaration
Rule 90    object_fields -> empty
Rule 91    object_methods -> object_methods method_declaration
Rule 92    object_methods -> empty
Rule 93    method_declaration -> procedure_header SEMICOLON
Rule 94    method_declaration -> function_header SEMICOLON
Rule 95    method_declaration -> constructor_declaration
Rule 96    method_declaration -> destructor_declaration
Rule 97    method_declaration -> procedure_header SEMICOLON directive
Rule 98    method_declaration -> function_header SEMICOLON directive
Rule 99    constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 100   destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 101   method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 102   method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 103   constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON
Rule 104   constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive
Rule 105   destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON
Rule 106   destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive
Rule 107   record_list -> record_list record_declaration
Rule 108   record_list -> record_declaration
Rule 109   record_declaration -> id_list COLON data_type_list SEMICOLON
Rule 110   record_declaration -> CASE ID COLON data_type_list OF variant_list
Rule 111   record_declaration -> id_list COLON data_type_list
Rule 112   variant_list -> variant_list variant
Rule 113   variant_list -> variant
Rule 114   variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON
Rule 115   variant -> constant_list COLON LPAREN RPAREN SEMICOLON
Rule 116   constant_list -> constant
Rule 117   constant_list -> constant_list COMMA constant
Rule 118   var_declaration_block -> VAR var_list
Rule 119   var_list -> var_list var_declaration
Rule 120   var_list -> var_declaration
Rule 121   var_declaration -> id_list COLON type_definition SEMICOLON
Rule 122   var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON
Rule 123   var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON
Rule 124   procedure_declaration -> procedure_header SEMICOLON directive
Rule 125   procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 126   procedure_header -> PROCEDURE ID parameters
Rule 127   directive -> FORWARD
Rule 128   directive -> EXTERNAL
Rule 129   directive -> EXTERNAL STRING
Rule 130   directive -> ASM
Rule 131   directive -> INLINE
Rule 132   directive -> VIRTUAL
Rule 133   function_declaration -> function_header SEMICOLON directive
Rule 134   function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 135   function_header -> FUNCTION ID parameters COLON data_type_list
Rule 136   parameters -> LPAREN parameter_list RPAREN
Rule 137   parameters -> empty
Rule 138   parameter_list -> parameter_list SEMICOLON parameter_group
Rule 139   parameter_list -> parameter_group
Rule 140   parameter_group -> id_list COLON data_type_list
Rule 141   parameter_group -> VAR id_list COLON data_type_list
Rule 142   parameter_group -> CONST id_list COLON data_type_list
Rule 143   parameter_group -> procedure_header
Rule 144   parameter_group -> function_header
Rule 145   data_type_list -> INTEGER
Rule 146   data_type_list -> BYTE
Rule 147   data_type_list -> LONGINT
Rule 148   data_type_list -> SHORTINT
Rule 149   data_type_list -> WORD
Rule 150   data_type_list -> REAL
Rule 151   data_type_list -> SINGLE
Rule 152   data_type_list -> DOUBLE
Rule 153   data_type_list -> EXTENDED
Rule 154   data_type_list -> SHORT
Rule 155   data_type_list -> BOOLEAN
Rule 156   data_type_list -> CHAR
Rule 157   data_type_list -> STRING
Rule 158   data_type_list -> STRING LBRACKET NUMBER RBRACKET
Rule 159   data_type_list -> ID
Rule 160   data_type_list -> ABSOLUTE ID
Rule 161   data_type_list -> FILE
Rule 162   data_type_list -> array_type
Rule 163   data_type_list -> pointer_type
Rule 164   data_type_list -> record_type
Rule 165   data_type_list -> set_type
Rule 166   data_type_list -> file_type
Rule 167   data_type_list -> object_type
Rule 168   data_type_list -> string_type
Rule 169   data_type_set -> BYTE
Rule 170   data_type_set -> SHORTINT
Rule 171   data_type_set -> WORD
Rule 172   data_type_set -> BOOLEAN
Rule 173   data_type_set -> CHAR
Rule 174   data_type_set -> ID
Rule 175   compound_statement -> BEGIN sentences_list END
Rule 176   sentences_list -> sentences_list sentence SEMICOLON
Rule 177   sentences_list -> sentence SEMICOLON
Rule 178   sentences_list -> empty
Rule 179   sentence -> assignment
Rule 180   sentence -> procedure_call
Rule 181   sentence -> compound_statement
Rule 182   sentence -> if_statement
Rule 183   sentence -> case_statement
Rule 184   sentence -> for_statement
Rule 185   sentence -> while_statement
Rule 186   sentence -> repeat_statement
Rule 187   sentence -> with_statement
Rule 188   sentence -> goto_statement
Rule 189   sentence -> labeled_sentence
Rule 190   sentence -> asm_statement
Rule 191   sentence -> empty
Rule 192   asm_statement -> ASM
Rule 193   assignment -> variable ASIGNATION expression
Rule 194   assignment -> ID ASIGNATION expression
Rule 195   assignment -> variable PLUS_ASIGN expression
Rule 196   assignment -> ID PLUS_ASIGN expression
Rule 197   assignment -> variable MINUS_ASIGN expression
Rule 198   assignment -> ID MINUS_ASIGN expression
Rule 199   assignment -> variable TIMES_ASIGN expression
Rule 200   assignment -> ID TIMES_ASIGN expression
Rule 201   assignment -> variable DIVIDE_ASIGN expression
Rule 202   assignment -> ID DIVIDE_ASIGN expression
Rule 203   procedure_call -> ID
Rule 204   procedure_call -> ID LPAREN call_argument_list_opt RPAREN
Rule 205   procedure_call -> variable DOT ID LPAREN call_argument_list_opt RPAREN
Rule 206   procedure_call -> NEW LPAREN call_argument_list_opt RPAREN
Rule 207   procedure_call -> DISPOSE LPAREN call_argument_list_opt RPAREN
Rule 208   if_statement -> IF expression THEN sentence
Rule 209   if_statement -> IF expression THEN sentence ELSE sentence
Rule 210   case_statement -> CASE expression OF case_list END
Rule 211   case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END
Rule 212   case_statement -> CASE expression OF case_list ELSE sentences_list END
Rule 213   case_list -> case_list case_label COLON sentence SEMICOLON
Rule 214   case_list -> case_label COLON sentence SEMICOLON
Rule 215   case_list -> empty
Rule 216   case_label -> constant
Rule 217   case_label -> constant DOBLEDOT constant
Rule 218   case_label -> case_label COMMA constant
Rule 219   for_control_variable_setup -> FOR ID
Rule 220   for_statement -> for_control_variable_setup ASIGNATION expression TO expression DO sentence
Rule 221   for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
Rule 222   for_statement -> for_control_variable_setup IN expression DO sentence
Rule 223   while_statement -> WHILE expression DO sentence
Rule 224   repeat_statement -> REPEAT sentences_list UNTIL expression
Rule 225   with_statement -> WITH variable_list DO sentence
Rule 226   variable_list -> variable
Rule 227   variable_list -> variable_list COMMA variable
Rule 228   goto_statement -> GOTO NUMBER
Rule 229   labeled_sentence -> NUMBER COLON sentence
Rule 230   empty -> <empty>
Rule 231   expression -> expression OR simple_expression
Rule 232   expression -> expression XOR simple_expression
Rule 233   expression -> simple_expression
Rule 234   simple_expression -> simple_expression AND relational_expression
Rule 235   simple_expression -> relational_expression
Rule 236   relational_expression -> relational_expression relational_operator additive_expression
Rule 237   relational_expression -> additive_expression
Rule 238   relational_operator -> EQUAL
Rule 239   relational_operator -> DISTINT
Rule 240   relational_operator -> LESS
Rule 241   relational_operator -> LESSEQUAL
Rule 242   relational_operator -> GREATER
Rule 243   relational_operator -> GREATEREQUAL
Rule 244   relational_operator -> IN
Rule 245   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 246   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 247   additive_expression -> multiplicative_expression
Rule 248   multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 249   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 250   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 251   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 252   multiplicative_expression -> multiplicative_expression SHL unary_expression
Rule 253   multiplicative_expression -> multiplicative_expression SHR unary_expression
Rule 254   multiplicative_expression -> unary_expression
Rule 255   unary_expression -> NOT unary_expression
Rule 256   unary_expression -> MINUS unary_expression
Rule 257   unary_expression -> PLUS unary_expression
Rule 258   unary_expression -> ADDRESS_OF unary_expression
Rule 259   unary_expression -> primary_expression
Rule 260   primary_expression -> variable
Rule 261   primary_expression -> NUMBER
Rule 262   primary_expression -> STRING
Rule 263   primary_expression -> TRUE
Rule 264   primary_expression -> FALSE
Rule 265   primary_expression -> NIL
Rule 266   primary_expression -> LPAREN expression RPAREN
Rule 267   primary_expression -> function_call
Rule 268   primary_expression -> set_constructor
Rule 269   set_item -> expression
Rule 270   set_item -> expression DOBLEDOT expression
Rule 271   set_item_list -> set_item
Rule 272   set_item_list -> set_item_list COMMA set_item
Rule 273   set_constructor -> LBRACKET set_item_list RBRACKET
Rule 274   set_constructor -> LBRACKET RBRACKET
Rule 275   variable -> ID
Rule 276   variable -> variable DOT ID
Rule 277   variable -> variable LBRACKET expression_list RBRACKET
Rule 278   variable -> variable CARET
Rule 279   variable -> LPAREN variable RPAREN CARET
Rule 280   function_call -> ID LPAREN expression_list RPAREN
Rule 281   function_call -> ID LPAREN RPAREN
Rule 282   function_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 283   function_call -> variable DOT ID LPAREN RPAREN
Rule 284   expression_list -> expression
Rule 285   expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

ABSOLUTE             : 123 160
ADDRESS_OF           : 258
AND                  : 234
ARRAY                : 66 67 68
ASIGNATION           : 193 194 220 221
ASM                  : 130 192
BEGIN                : 175
BOOLEAN              : 155 172
BYTE                 : 146 169
CARET                : 82 83 278 279
CASE                 : 110 210 211 212
CHAR                 : 53 53 74 74 79 79 156 173
COLON                : 31 40 41 41 102 109 110 111 114 115 121 122 123 135 140 141 142 213 214 229
COMMA                : 7 26 42 70 117 218 227 272 285
CONST                : 27 142
CONSTRUCTOR          : 99 103 104
DESTRUCTOR           : 100 105 106
DISPOSE              : 207
DISTINT              : 239
DIV                  : 250
DIVIDE               : 249
DIVIDE_ASIGN         : 201 202
DO                   : 220 221 222 223 225
DOBLEDOT             : 52 53 54 71 72 73 74 75 78 79 217 270
DOT                  : 21 99 100 101 102 205 276 282 283
DOUBLE               : 152
DOWNTO               : 221
ELSE                 : 209 211 212
END                  : 64 65 86 175 210 211 212
EQUAL                : 30 31 49 122 238
EXIT                 : 
EXTENDED             : 153
EXTERNAL             : 128 129
FALSE                : 35 264
FILE                 : 84 85 161
FOR                  : 219
FORWARD              : 127
FUNCTION             : 102 135
GOTO                 : 228
GREATER              : 242
GREATEREQUAL         : 243
ID                   : 2 3 6 7 30 31 49 54 54 72 73 75 75 76 80 82 87 99 99 100 100 101 101 102 102 103 104 105 106 110 123 126 135 159 160 174 194 196 198 200 202 203 204 205 219 275 276 280 281 282 283
IF                   : 208 209
IMPLEMENTATION       : 23
IN                   : 222 244
INHERITED            : 
INLINE               : 131
INTEGER              : 145
INTERFACE            : 22
INTERRUPT            : 
LABEL                : 24
LBRACKET             : 63 66 67 158 273 274 277
LESS                 : 240
LESSEQUAL            : 241
LONGINT              : 147
LPAREN               : 51 87 114 115 136 204 205 206 207 266 279 280 281 282 283
MINUS                : 246 256
MINUS_ASIGN          : 197 198
MOD                  : 251
NEW                  : 206
NIL                  : 36 265
NOT                  : 255
NUMBER               : 25 26 32 52 52 63 71 71 72 73 78 78 158 228 229 261
OBJECT               : 86
OF                   : 66 67 68 81 84 110 210 211 212
OR                   : 231
ORDINAL_CONSTANT     : 37
PACKED               : 65 67
PLUS                 : 245 257
PLUS_ASIGN           : 195 196
PRIVATE              : 
PROCEDURE            : 101 126
PROGRAM              : 2
RBRACKET             : 63 66 67 158 273 274 277
REAL                 : 150
RECORD               : 64 65
REPEAT               : 224
RPAREN               : 51 87 114 115 136 204 205 206 207 266 279 280 281 282 283
SEMICOLON            : 2 3 4 24 30 31 49 93 94 97 98 99 99 100 100 101 101 102 102 103 104 105 106 109 114 115 121 122 123 124 125 125 133 134 134 138 176 177 211 213 214
SET                  : 81
SHL                  : 252
SHORT                : 154
SHORTINT             : 148 170
SHR                  : 253
SINGLE               : 151
STRING               : 33 62 63 129 157 158 262
TEXT                 : 
THEN                 : 208 209
TIMES                : 248
TIMES_ASIGN          : 199 200
TO                   : 220
TRUE                 : 34 263
TYPE                 : 46
UNIT                 : 3
UNTIL                : 224
USES                 : 4
VAR                  : 118 141
VIRTUAL              : 132
WHILE                : 223
WITH                 : 225
WORD                 : 149 171
XOR                  : 232
error                : 

Nonterminals, with rules where they appear

additive_expression  : 236 237 245 246
array_type           : 56 162
asm_statement        : 190
assignment           : 179
call_argument        : 42 43
call_argument_list   : 42 44
call_argument_list_opt : 204 205 206 207
case_label           : 213 214 218
case_list            : 210 211 212 213
case_statement       : 183
compound_statement   : 21 99 100 101 102 125 134 181
const_declaration    : 28 29
const_declaration_block : 11
const_list           : 27 28
constant             : 30 31 116 117 216 217 217 218
constant_list        : 114 115 117
constructor_declaration : 95
constructor_implementation : 16
data_type_list       : 31 50 66 67 68 83 84 102 109 110 111 135 140 141 142
data_type_set        : 77
declaration_block    : 8
declaration_blocks   : 1 8 22 23 99 100 101 102 125 134
destructor_declaration : 96
destructor_implementation : 17
directive            : 97 98 104 106 124 133
empty                : 5 9 45 88 90 92 137 178 191 215
expression           : 39 40 40 41 41 41 122 193 194 195 196 197 198 199 200 201 202 208 209 210 211 212 220 220 221 221 222 223 224 231 232 266 269 270 270 284 285
expression_list      : 277 280 282 285
file_type            : 59 166
for_control_variable_setup : 220 221 222
for_statement        : 184
function_call        : 267
function_declaration : 15
function_header      : 94 98 133 134 144
goto_statement       : 188
id_list              : 4 7 51 109 111 121 122 123 140 141 142
if_statement         : 182
implementation_block : 19
interface_block      : 20
label_declaration    : 10
labeled_sentence     : 189
main_block           : 1
method_declaration   : 91
method_implementation : 18
multiplicative_expression : 245 246 247 248 249 250 251 252 253
number_list          : 24 26
object_fields        : 86 89
object_heritage      : 86
object_methods       : 86 91
object_type          : 60 167
parameter_group      : 138 139
parameter_list       : 136 138
parameters           : 99 100 101 102 103 104 105 106 126 135
pointer_type         : 58 163
primary_expression   : 259
procedure_call       : 180
procedure_declaration : 14
procedure_header     : 93 97 124 125 143
program              : 0
program_header       : 1
record_declaration   : 107 108
record_list          : 64 65 107 114
record_type          : 55 164
relational_expression : 234 235 236
relational_operator  : 236
repeat_statement     : 186
sentence             : 176 177 208 209 209 213 214 220 221 222 223 225 229
sentences_list       : 175 176 211 212 224
set_constructor      : 38 268
set_item             : 271 272
set_item_list        : 272 273
set_range            : 81
set_type             : 57 165
simple_expression    : 231 232 233 234
string_type          : 61 168
type_declaration     : 47 48
type_declaration_block : 12
type_definition      : 49 121 122 123
type_list            : 46 47
type_range           : 69 70
type_range_list      : 66 67 70
unary_expression     : 248 249 250 251 252 253 254 255 256 257 258
uses_clause          : 1
var_declaration      : 89 119 120
var_declaration_block : 13
var_list             : 118 119
variable             : 193 195 197 199 201 205 226 227 260 276 277 278 279 282 283
variable_list        : 225 227
variant              : 112 113
variant_list         : 110 112
while_statement      : 185
with_statement       : 187

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_header uses_clause declaration_blocks main_block
    (2) program_header -> . PROGRAM ID SEMICOLON
    (3) program_header -> . UNIT ID SEMICOLON

    PROGRAM         shift and go to state 3
    UNIT            shift and go to state 4

    program                        shift and go to state 1
    program_header                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_header . uses_clause declaration_blocks main_block
    (4) uses_clause -> . USES id_list SEMICOLON
    (5) uses_clause -> . empty
    (230) empty -> .

    USES            shift and go to state 6
    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    uses_clause                    shift and go to state 5
    empty                          shift and go to state 7

state 3

    (2) program_header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 8


state 4

    (3) program_header -> UNIT . ID SEMICOLON

    ID              shift and go to state 9


state 5

    (1) program -> program_header uses_clause . declaration_blocks main_block
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 10
    empty                          shift and go to state 11

state 6

    (4) uses_clause -> USES . id_list SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 12

state 7

    (5) uses_clause -> empty .

    BEGIN           reduce using rule 5 (uses_clause -> empty .)
    LABEL           reduce using rule 5 (uses_clause -> empty .)
    CONST           reduce using rule 5 (uses_clause -> empty .)
    TYPE            reduce using rule 5 (uses_clause -> empty .)
    VAR             reduce using rule 5 (uses_clause -> empty .)
    CONSTRUCTOR     reduce using rule 5 (uses_clause -> empty .)
    DESTRUCTOR      reduce using rule 5 (uses_clause -> empty .)
    PROCEDURE       reduce using rule 5 (uses_clause -> empty .)
    FUNCTION        reduce using rule 5 (uses_clause -> empty .)
    IMPLEMENTATION  reduce using rule 5 (uses_clause -> empty .)
    INTERFACE       reduce using rule 5 (uses_clause -> empty .)


state 8

    (2) program_header -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (3) program_header -> UNIT ID . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (1) program -> program_header uses_clause declaration_blocks . main_block
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (21) main_block -> . compound_statement DOT
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (175) compound_statement -> . BEGIN sentences_list END
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    main_block                     shift and go to state 16
    declaration_block              shift and go to state 17
    compound_statement             shift and go to state 18
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 11

    (9) declaration_blocks -> empty .

    BEGIN           reduce using rule 9 (declaration_blocks -> empty .)
    LABEL           reduce using rule 9 (declaration_blocks -> empty .)
    CONST           reduce using rule 9 (declaration_blocks -> empty .)
    TYPE            reduce using rule 9 (declaration_blocks -> empty .)
    VAR             reduce using rule 9 (declaration_blocks -> empty .)
    CONSTRUCTOR     reduce using rule 9 (declaration_blocks -> empty .)
    DESTRUCTOR      reduce using rule 9 (declaration_blocks -> empty .)
    PROCEDURE       reduce using rule 9 (declaration_blocks -> empty .)
    FUNCTION        reduce using rule 9 (declaration_blocks -> empty .)
    IMPLEMENTATION  reduce using rule 9 (declaration_blocks -> empty .)
    INTERFACE       reduce using rule 9 (declaration_blocks -> empty .)


state 12

    (4) uses_clause -> USES id_list . SEMICOLON
    (7) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44


state 13

    (6) id_list -> ID .

    SEMICOLON       reduce using rule 6 (id_list -> ID .)
    COMMA           reduce using rule 6 (id_list -> ID .)
    COLON           reduce using rule 6 (id_list -> ID .)
    RPAREN          reduce using rule 6 (id_list -> ID .)


state 14

    (2) program_header -> PROGRAM ID SEMICOLON .

    USES            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    BEGIN           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    LABEL           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONST           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    TYPE            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    INTERFACE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)


state 15

    (3) program_header -> UNIT ID SEMICOLON .

    USES            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    BEGIN           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    LABEL           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONST           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    TYPE            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    VAR             reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    INTERFACE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)


state 16

    (1) program -> program_header uses_clause declaration_blocks main_block .

    $end            reduce using rule 1 (program -> program_header uses_clause declaration_blocks main_block .)


state 17

    (8) declaration_blocks -> declaration_blocks declaration_block .

    BEGIN           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    LABEL           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONST           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    TYPE            reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    VAR             reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONSTRUCTOR     reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    DESTRUCTOR      reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    PROCEDURE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    FUNCTION        reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    IMPLEMENTATION  reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    INTERFACE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)


state 18

    (21) main_block -> compound_statement . DOT

    DOT             shift and go to state 45


state 19

    (10) declaration_block -> label_declaration .

    BEGIN           reduce using rule 10 (declaration_block -> label_declaration .)
    LABEL           reduce using rule 10 (declaration_block -> label_declaration .)
    CONST           reduce using rule 10 (declaration_block -> label_declaration .)
    TYPE            reduce using rule 10 (declaration_block -> label_declaration .)
    VAR             reduce using rule 10 (declaration_block -> label_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_block -> label_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_block -> label_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_block -> label_declaration .)
    FUNCTION        reduce using rule 10 (declaration_block -> label_declaration .)
    IMPLEMENTATION  reduce using rule 10 (declaration_block -> label_declaration .)
    INTERFACE       reduce using rule 10 (declaration_block -> label_declaration .)


state 20

    (11) declaration_block -> const_declaration_block .

    BEGIN           reduce using rule 11 (declaration_block -> const_declaration_block .)
    LABEL           reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONST           reduce using rule 11 (declaration_block -> const_declaration_block .)
    TYPE            reduce using rule 11 (declaration_block -> const_declaration_block .)
    VAR             reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONSTRUCTOR     reduce using rule 11 (declaration_block -> const_declaration_block .)
    DESTRUCTOR      reduce using rule 11 (declaration_block -> const_declaration_block .)
    PROCEDURE       reduce using rule 11 (declaration_block -> const_declaration_block .)
    FUNCTION        reduce using rule 11 (declaration_block -> const_declaration_block .)
    IMPLEMENTATION  reduce using rule 11 (declaration_block -> const_declaration_block .)
    INTERFACE       reduce using rule 11 (declaration_block -> const_declaration_block .)


state 21

    (12) declaration_block -> type_declaration_block .

    BEGIN           reduce using rule 12 (declaration_block -> type_declaration_block .)
    LABEL           reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONST           reduce using rule 12 (declaration_block -> type_declaration_block .)
    TYPE            reduce using rule 12 (declaration_block -> type_declaration_block .)
    VAR             reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONSTRUCTOR     reduce using rule 12 (declaration_block -> type_declaration_block .)
    DESTRUCTOR      reduce using rule 12 (declaration_block -> type_declaration_block .)
    PROCEDURE       reduce using rule 12 (declaration_block -> type_declaration_block .)
    FUNCTION        reduce using rule 12 (declaration_block -> type_declaration_block .)
    IMPLEMENTATION  reduce using rule 12 (declaration_block -> type_declaration_block .)
    INTERFACE       reduce using rule 12 (declaration_block -> type_declaration_block .)


state 22

    (13) declaration_block -> var_declaration_block .

    BEGIN           reduce using rule 13 (declaration_block -> var_declaration_block .)
    LABEL           reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONST           reduce using rule 13 (declaration_block -> var_declaration_block .)
    TYPE            reduce using rule 13 (declaration_block -> var_declaration_block .)
    VAR             reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONSTRUCTOR     reduce using rule 13 (declaration_block -> var_declaration_block .)
    DESTRUCTOR      reduce using rule 13 (declaration_block -> var_declaration_block .)
    PROCEDURE       reduce using rule 13 (declaration_block -> var_declaration_block .)
    FUNCTION        reduce using rule 13 (declaration_block -> var_declaration_block .)
    IMPLEMENTATION  reduce using rule 13 (declaration_block -> var_declaration_block .)
    INTERFACE       reduce using rule 13 (declaration_block -> var_declaration_block .)


state 23

    (14) declaration_block -> procedure_declaration .

    BEGIN           reduce using rule 14 (declaration_block -> procedure_declaration .)
    LABEL           reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONST           reduce using rule 14 (declaration_block -> procedure_declaration .)
    TYPE            reduce using rule 14 (declaration_block -> procedure_declaration .)
    VAR             reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 14 (declaration_block -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 14 (declaration_block -> procedure_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_block -> procedure_declaration .)
    FUNCTION        reduce using rule 14 (declaration_block -> procedure_declaration .)
    IMPLEMENTATION  reduce using rule 14 (declaration_block -> procedure_declaration .)
    INTERFACE       reduce using rule 14 (declaration_block -> procedure_declaration .)


state 24

    (15) declaration_block -> function_declaration .

    BEGIN           reduce using rule 15 (declaration_block -> function_declaration .)
    LABEL           reduce using rule 15 (declaration_block -> function_declaration .)
    CONST           reduce using rule 15 (declaration_block -> function_declaration .)
    TYPE            reduce using rule 15 (declaration_block -> function_declaration .)
    VAR             reduce using rule 15 (declaration_block -> function_declaration .)
    CONSTRUCTOR     reduce using rule 15 (declaration_block -> function_declaration .)
    DESTRUCTOR      reduce using rule 15 (declaration_block -> function_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_block -> function_declaration .)
    FUNCTION        reduce using rule 15 (declaration_block -> function_declaration .)
    IMPLEMENTATION  reduce using rule 15 (declaration_block -> function_declaration .)
    INTERFACE       reduce using rule 15 (declaration_block -> function_declaration .)


state 25

    (16) declaration_block -> constructor_implementation .

    BEGIN           reduce using rule 16 (declaration_block -> constructor_implementation .)
    LABEL           reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONST           reduce using rule 16 (declaration_block -> constructor_implementation .)
    TYPE            reduce using rule 16 (declaration_block -> constructor_implementation .)
    VAR             reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONSTRUCTOR     reduce using rule 16 (declaration_block -> constructor_implementation .)
    DESTRUCTOR      reduce using rule 16 (declaration_block -> constructor_implementation .)
    PROCEDURE       reduce using rule 16 (declaration_block -> constructor_implementation .)
    FUNCTION        reduce using rule 16 (declaration_block -> constructor_implementation .)
    IMPLEMENTATION  reduce using rule 16 (declaration_block -> constructor_implementation .)
    INTERFACE       reduce using rule 16 (declaration_block -> constructor_implementation .)


state 26

    (17) declaration_block -> destructor_implementation .

    BEGIN           reduce using rule 17 (declaration_block -> destructor_implementation .)
    LABEL           reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONST           reduce using rule 17 (declaration_block -> destructor_implementation .)
    TYPE            reduce using rule 17 (declaration_block -> destructor_implementation .)
    VAR             reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONSTRUCTOR     reduce using rule 17 (declaration_block -> destructor_implementation .)
    DESTRUCTOR      reduce using rule 17 (declaration_block -> destructor_implementation .)
    PROCEDURE       reduce using rule 17 (declaration_block -> destructor_implementation .)
    FUNCTION        reduce using rule 17 (declaration_block -> destructor_implementation .)
    IMPLEMENTATION  reduce using rule 17 (declaration_block -> destructor_implementation .)
    INTERFACE       reduce using rule 17 (declaration_block -> destructor_implementation .)


state 27

    (18) declaration_block -> method_implementation .

    BEGIN           reduce using rule 18 (declaration_block -> method_implementation .)
    LABEL           reduce using rule 18 (declaration_block -> method_implementation .)
    CONST           reduce using rule 18 (declaration_block -> method_implementation .)
    TYPE            reduce using rule 18 (declaration_block -> method_implementation .)
    VAR             reduce using rule 18 (declaration_block -> method_implementation .)
    CONSTRUCTOR     reduce using rule 18 (declaration_block -> method_implementation .)
    DESTRUCTOR      reduce using rule 18 (declaration_block -> method_implementation .)
    PROCEDURE       reduce using rule 18 (declaration_block -> method_implementation .)
    FUNCTION        reduce using rule 18 (declaration_block -> method_implementation .)
    IMPLEMENTATION  reduce using rule 18 (declaration_block -> method_implementation .)
    INTERFACE       reduce using rule 18 (declaration_block -> method_implementation .)


state 28

    (19) declaration_block -> implementation_block .

    BEGIN           reduce using rule 19 (declaration_block -> implementation_block .)
    LABEL           reduce using rule 19 (declaration_block -> implementation_block .)
    CONST           reduce using rule 19 (declaration_block -> implementation_block .)
    TYPE            reduce using rule 19 (declaration_block -> implementation_block .)
    VAR             reduce using rule 19 (declaration_block -> implementation_block .)
    CONSTRUCTOR     reduce using rule 19 (declaration_block -> implementation_block .)
    DESTRUCTOR      reduce using rule 19 (declaration_block -> implementation_block .)
    PROCEDURE       reduce using rule 19 (declaration_block -> implementation_block .)
    FUNCTION        reduce using rule 19 (declaration_block -> implementation_block .)
    IMPLEMENTATION  reduce using rule 19 (declaration_block -> implementation_block .)
    INTERFACE       reduce using rule 19 (declaration_block -> implementation_block .)


state 29

    (20) declaration_block -> interface_block .

    BEGIN           reduce using rule 20 (declaration_block -> interface_block .)
    LABEL           reduce using rule 20 (declaration_block -> interface_block .)
    CONST           reduce using rule 20 (declaration_block -> interface_block .)
    TYPE            reduce using rule 20 (declaration_block -> interface_block .)
    VAR             reduce using rule 20 (declaration_block -> interface_block .)
    CONSTRUCTOR     reduce using rule 20 (declaration_block -> interface_block .)
    DESTRUCTOR      reduce using rule 20 (declaration_block -> interface_block .)
    PROCEDURE       reduce using rule 20 (declaration_block -> interface_block .)
    FUNCTION        reduce using rule 20 (declaration_block -> interface_block .)
    IMPLEMENTATION  reduce using rule 20 (declaration_block -> interface_block .)
    INTERFACE       reduce using rule 20 (declaration_block -> interface_block .)


state 30

    (175) compound_statement -> BEGIN . sentences_list END
    (176) sentences_list -> . sentences_list sentence SEMICOLON
    (177) sentences_list -> . sentence SEMICOLON
    (178) sentences_list -> . empty
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (230) empty -> .
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             reduce using rule 230 (empty -> .)
    SEMICOLON       reduce using rule 230 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

  ! ID              [ reduce using rule 230 (empty -> .) ]
  ! NEW             [ reduce using rule 230 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 230 (empty -> .) ]
  ! BEGIN           [ reduce using rule 230 (empty -> .) ]
  ! IF              [ reduce using rule 230 (empty -> .) ]
  ! CASE            [ reduce using rule 230 (empty -> .) ]
  ! WHILE           [ reduce using rule 230 (empty -> .) ]
  ! REPEAT          [ reduce using rule 230 (empty -> .) ]
  ! WITH            [ reduce using rule 230 (empty -> .) ]
  ! GOTO            [ reduce using rule 230 (empty -> .) ]
  ! NUMBER          [ reduce using rule 230 (empty -> .) ]
  ! ASM             [ reduce using rule 230 (empty -> .) ]
  ! LPAREN          [ reduce using rule 230 (empty -> .) ]
  ! FOR             [ reduce using rule 230 (empty -> .) ]

    sentences_list                 shift and go to state 46
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 31

    (24) label_declaration -> LABEL . number_list SEMICOLON
    (25) number_list -> . NUMBER
    (26) number_list -> . number_list COMMA NUMBER

    NUMBER          shift and go to state 77

    number_list                    shift and go to state 76

state 32

    (27) const_declaration_block -> CONST . const_list
    (28) const_list -> . const_list const_declaration
    (29) const_list -> . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    ID              shift and go to state 80

    const_list                     shift and go to state 78
    const_declaration              shift and go to state 79

state 33

    (46) type_declaration_block -> TYPE . type_list
    (47) type_list -> . type_list type_declaration
    (48) type_list -> . type_declaration
    (49) type_declaration -> . ID EQUAL type_definition SEMICOLON

    ID              shift and go to state 83

    type_list                      shift and go to state 81
    type_declaration               shift and go to state 82

state 34

    (118) var_declaration_block -> VAR . var_list
    (119) var_list -> . var_list var_declaration
    (120) var_list -> . var_declaration
    (121) var_declaration -> . id_list COLON type_definition SEMICOLON
    (122) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (123) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    var_list                       shift and go to state 84
    var_declaration                shift and go to state 85
    id_list                        shift and go to state 86

state 35

    (124) procedure_declaration -> procedure_header . SEMICOLON directive
    (125) procedure_declaration -> procedure_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 87


state 36

    (133) function_declaration -> function_header . SEMICOLON directive
    (134) function_declaration -> function_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 88


state 37

    (99) constructor_implementation -> CONSTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 89


state 38

    (100) destructor_implementation -> DESTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 90


state 39

    (101) method_implementation -> PROCEDURE . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 91


state 40

    (102) method_implementation -> FUNCTION . ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (135) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 92


state 41

    (23) implementation_block -> IMPLEMENTATION . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)
    BEGIN           reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 93
    empty                          shift and go to state 11

state 42

    (22) interface_block -> INTERFACE . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)
    BEGIN           reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 94
    empty                          shift and go to state 11

state 43

    (4) uses_clause -> USES id_list SEMICOLON .

    BEGIN           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    LABEL           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONST           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    VAR             reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    INTERFACE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)


state 44

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 95


state 45

    (21) main_block -> compound_statement DOT .

    $end            reduce using rule 21 (main_block -> compound_statement DOT .)


state 46

    (175) compound_statement -> BEGIN sentences_list . END
    (176) sentences_list -> sentences_list . sentence SEMICOLON
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    END             shift and go to state 96
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 97
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 47

    (177) sentences_list -> sentence . SEMICOLON

    SEMICOLON       shift and go to state 99


state 48

    (178) sentences_list -> empty .
    (191) sentence -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 178 (sentences_list -> empty .)
    END             reduce using rule 178 (sentences_list -> empty .)
    ID              reduce using rule 178 (sentences_list -> empty .)
    NEW             reduce using rule 178 (sentences_list -> empty .)
    DISPOSE         reduce using rule 178 (sentences_list -> empty .)
    BEGIN           reduce using rule 178 (sentences_list -> empty .)
    IF              reduce using rule 178 (sentences_list -> empty .)
    CASE            reduce using rule 178 (sentences_list -> empty .)
    WHILE           reduce using rule 178 (sentences_list -> empty .)
    REPEAT          reduce using rule 178 (sentences_list -> empty .)
    WITH            reduce using rule 178 (sentences_list -> empty .)
    GOTO            reduce using rule 178 (sentences_list -> empty .)
    NUMBER          reduce using rule 178 (sentences_list -> empty .)
    ASM             reduce using rule 178 (sentences_list -> empty .)
    LPAREN          reduce using rule 178 (sentences_list -> empty .)
    FOR             reduce using rule 178 (sentences_list -> empty .)
    SEMICOLON       reduce using rule 178 (sentences_list -> empty .)
    UNTIL           reduce using rule 178 (sentences_list -> empty .)

  ! SEMICOLON       [ reduce using rule 191 (sentence -> empty .) ]


state 49

    (179) sentence -> assignment .

    SEMICOLON       reduce using rule 179 (sentence -> assignment .)
    ELSE            reduce using rule 179 (sentence -> assignment .)


state 50

    (180) sentence -> procedure_call .

    SEMICOLON       reduce using rule 180 (sentence -> procedure_call .)
    ELSE            reduce using rule 180 (sentence -> procedure_call .)


state 51

    (181) sentence -> compound_statement .

    SEMICOLON       reduce using rule 181 (sentence -> compound_statement .)
    ELSE            reduce using rule 181 (sentence -> compound_statement .)


state 52

    (182) sentence -> if_statement .

    SEMICOLON       reduce using rule 182 (sentence -> if_statement .)
    ELSE            reduce using rule 182 (sentence -> if_statement .)


state 53

    (183) sentence -> case_statement .

    SEMICOLON       reduce using rule 183 (sentence -> case_statement .)
    ELSE            reduce using rule 183 (sentence -> case_statement .)


state 54

    (184) sentence -> for_statement .

    SEMICOLON       reduce using rule 184 (sentence -> for_statement .)
    ELSE            reduce using rule 184 (sentence -> for_statement .)


state 55

    (185) sentence -> while_statement .

    SEMICOLON       reduce using rule 185 (sentence -> while_statement .)
    ELSE            reduce using rule 185 (sentence -> while_statement .)


state 56

    (186) sentence -> repeat_statement .

    SEMICOLON       reduce using rule 186 (sentence -> repeat_statement .)
    ELSE            reduce using rule 186 (sentence -> repeat_statement .)


state 57

    (187) sentence -> with_statement .

    SEMICOLON       reduce using rule 187 (sentence -> with_statement .)
    ELSE            reduce using rule 187 (sentence -> with_statement .)


state 58

    (188) sentence -> goto_statement .

    SEMICOLON       reduce using rule 188 (sentence -> goto_statement .)
    ELSE            reduce using rule 188 (sentence -> goto_statement .)


state 59

    (189) sentence -> labeled_sentence .

    SEMICOLON       reduce using rule 189 (sentence -> labeled_sentence .)
    ELSE            reduce using rule 189 (sentence -> labeled_sentence .)


state 60

    (190) sentence -> asm_statement .

    SEMICOLON       reduce using rule 190 (sentence -> asm_statement .)
    ELSE            reduce using rule 190 (sentence -> asm_statement .)


state 61

    (193) assignment -> variable . ASIGNATION expression
    (195) assignment -> variable . PLUS_ASIGN expression
    (197) assignment -> variable . MINUS_ASIGN expression
    (199) assignment -> variable . TIMES_ASIGN expression
    (201) assignment -> variable . DIVIDE_ASIGN expression
    (205) procedure_call -> variable . DOT ID LPAREN call_argument_list_opt RPAREN
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET

    ASIGNATION      shift and go to state 100
    PLUS_ASIGN      shift and go to state 101
    MINUS_ASIGN     shift and go to state 102
    TIMES_ASIGN     shift and go to state 103
    DIVIDE_ASIGN    shift and go to state 104
    DOT             shift and go to state 105
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 62

    (194) assignment -> ID . ASIGNATION expression
    (196) assignment -> ID . PLUS_ASIGN expression
    (198) assignment -> ID . MINUS_ASIGN expression
    (200) assignment -> ID . TIMES_ASIGN expression
    (202) assignment -> ID . DIVIDE_ASIGN expression
    (203) procedure_call -> ID .
    (204) procedure_call -> ID . LPAREN call_argument_list_opt RPAREN
    (275) variable -> ID .

  ! shift/reduce conflict for ASIGNATION resolved as shift
  ! shift/reduce conflict for PLUS_ASIGN resolved as shift
  ! shift/reduce conflict for MINUS_ASIGN resolved as shift
  ! shift/reduce conflict for TIMES_ASIGN resolved as shift
  ! shift/reduce conflict for DIVIDE_ASIGN resolved as shift
    ASIGNATION      shift and go to state 108
    PLUS_ASIGN      shift and go to state 109
    MINUS_ASIGN     shift and go to state 110
    TIMES_ASIGN     shift and go to state 111
    DIVIDE_ASIGN    shift and go to state 112
    SEMICOLON       reduce using rule 203 (procedure_call -> ID .)
    ELSE            reduce using rule 203 (procedure_call -> ID .)
    LPAREN          shift and go to state 113
    DOT             reduce using rule 275 (variable -> ID .)
    LBRACKET        reduce using rule 275 (variable -> ID .)
    CARET           reduce using rule 275 (variable -> ID .)

  ! ASIGNATION      [ reduce using rule 275 (variable -> ID .) ]
  ! PLUS_ASIGN      [ reduce using rule 275 (variable -> ID .) ]
  ! MINUS_ASIGN     [ reduce using rule 275 (variable -> ID .) ]
  ! TIMES_ASIGN     [ reduce using rule 275 (variable -> ID .) ]
  ! DIVIDE_ASIGN    [ reduce using rule 275 (variable -> ID .) ]


state 63

    (279) variable -> LPAREN . variable RPAREN CARET
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 115
    LPAREN          shift and go to state 63

    variable                       shift and go to state 114

state 64

    (206) procedure_call -> NEW . LPAREN call_argument_list_opt RPAREN

    LPAREN          shift and go to state 116


state 65

    (207) procedure_call -> DISPOSE . LPAREN call_argument_list_opt RPAREN

    LPAREN          shift and go to state 117


state 66

    (208) if_statement -> IF . expression THEN sentence
    (209) if_statement -> IF . expression THEN sentence ELSE sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 118
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 67

    (210) case_statement -> CASE . expression OF case_list END
    (211) case_statement -> CASE . expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> CASE . expression OF case_list ELSE sentences_list END
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 140
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 68

    (220) for_statement -> for_control_variable_setup . ASIGNATION expression TO expression DO sentence
    (221) for_statement -> for_control_variable_setup . ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> for_control_variable_setup . IN expression DO sentence

    ASIGNATION      shift and go to state 141
    IN              shift and go to state 142


state 69

    (223) while_statement -> WHILE . expression DO sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 143
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 70

    (224) repeat_statement -> REPEAT . sentences_list UNTIL expression
    (176) sentences_list -> . sentences_list sentence SEMICOLON
    (177) sentences_list -> . sentence SEMICOLON
    (178) sentences_list -> . empty
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (230) empty -> .
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    UNTIL           reduce using rule 230 (empty -> .)
    SEMICOLON       reduce using rule 230 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

  ! ID              [ reduce using rule 230 (empty -> .) ]
  ! NEW             [ reduce using rule 230 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 230 (empty -> .) ]
  ! BEGIN           [ reduce using rule 230 (empty -> .) ]
  ! IF              [ reduce using rule 230 (empty -> .) ]
  ! CASE            [ reduce using rule 230 (empty -> .) ]
  ! WHILE           [ reduce using rule 230 (empty -> .) ]
  ! REPEAT          [ reduce using rule 230 (empty -> .) ]
  ! WITH            [ reduce using rule 230 (empty -> .) ]
  ! GOTO            [ reduce using rule 230 (empty -> .) ]
  ! NUMBER          [ reduce using rule 230 (empty -> .) ]
  ! ASM             [ reduce using rule 230 (empty -> .) ]
  ! LPAREN          [ reduce using rule 230 (empty -> .) ]
  ! FOR             [ reduce using rule 230 (empty -> .) ]

    sentences_list                 shift and go to state 144
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 71

    (225) with_statement -> WITH . variable_list DO sentence
    (226) variable_list -> . variable
    (227) variable_list -> . variable_list COMMA variable
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 115
    LPAREN          shift and go to state 63

    variable_list                  shift and go to state 145
    variable                       shift and go to state 146

state 72

    (228) goto_statement -> GOTO . NUMBER

    NUMBER          shift and go to state 147


state 73

    (229) labeled_sentence -> NUMBER . COLON sentence

    COLON           shift and go to state 148


state 74

    (192) asm_statement -> ASM .

    SEMICOLON       reduce using rule 192 (asm_statement -> ASM .)
    ELSE            reduce using rule 192 (asm_statement -> ASM .)


state 75

    (219) for_control_variable_setup -> FOR . ID

    ID              shift and go to state 149


state 76

    (24) label_declaration -> LABEL number_list . SEMICOLON
    (26) number_list -> number_list . COMMA NUMBER

    SEMICOLON       shift and go to state 150
    COMMA           shift and go to state 151


state 77

    (25) number_list -> NUMBER .

    SEMICOLON       reduce using rule 25 (number_list -> NUMBER .)
    COMMA           reduce using rule 25 (number_list -> NUMBER .)


state 78

    (27) const_declaration_block -> CONST const_list .
    (28) const_list -> const_list . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    BEGIN           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    LABEL           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONST           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    TYPE            reduce using rule 27 (const_declaration_block -> CONST const_list .)
    VAR             reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONSTRUCTOR     reduce using rule 27 (const_declaration_block -> CONST const_list .)
    DESTRUCTOR      reduce using rule 27 (const_declaration_block -> CONST const_list .)
    PROCEDURE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    FUNCTION        reduce using rule 27 (const_declaration_block -> CONST const_list .)
    IMPLEMENTATION  reduce using rule 27 (const_declaration_block -> CONST const_list .)
    INTERFACE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    ID              shift and go to state 80

    const_declaration              shift and go to state 152

state 79

    (29) const_list -> const_declaration .

    ID              reduce using rule 29 (const_list -> const_declaration .)
    BEGIN           reduce using rule 29 (const_list -> const_declaration .)
    LABEL           reduce using rule 29 (const_list -> const_declaration .)
    CONST           reduce using rule 29 (const_list -> const_declaration .)
    TYPE            reduce using rule 29 (const_list -> const_declaration .)
    VAR             reduce using rule 29 (const_list -> const_declaration .)
    CONSTRUCTOR     reduce using rule 29 (const_list -> const_declaration .)
    DESTRUCTOR      reduce using rule 29 (const_list -> const_declaration .)
    PROCEDURE       reduce using rule 29 (const_list -> const_declaration .)
    FUNCTION        reduce using rule 29 (const_list -> const_declaration .)
    IMPLEMENTATION  reduce using rule 29 (const_list -> const_declaration .)
    INTERFACE       reduce using rule 29 (const_list -> const_declaration .)


state 80

    (30) const_declaration -> ID . EQUAL constant SEMICOLON
    (31) const_declaration -> ID . COLON data_type_list EQUAL constant SEMICOLON

    EQUAL           shift and go to state 153
    COLON           shift and go to state 154


state 81

    (46) type_declaration_block -> TYPE type_list .
    (47) type_list -> type_list . type_declaration
    (49) type_declaration -> . ID EQUAL type_definition SEMICOLON

    BEGIN           reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    LABEL           reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    CONST           reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    TYPE            reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    VAR             reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    PROCEDURE       reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    FUNCTION        reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    IMPLEMENTATION  reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    INTERFACE       reduce using rule 46 (type_declaration_block -> TYPE type_list .)
    ID              shift and go to state 83

    type_declaration               shift and go to state 155

state 82

    (48) type_list -> type_declaration .

    ID              reduce using rule 48 (type_list -> type_declaration .)
    BEGIN           reduce using rule 48 (type_list -> type_declaration .)
    LABEL           reduce using rule 48 (type_list -> type_declaration .)
    CONST           reduce using rule 48 (type_list -> type_declaration .)
    TYPE            reduce using rule 48 (type_list -> type_declaration .)
    VAR             reduce using rule 48 (type_list -> type_declaration .)
    CONSTRUCTOR     reduce using rule 48 (type_list -> type_declaration .)
    DESTRUCTOR      reduce using rule 48 (type_list -> type_declaration .)
    PROCEDURE       reduce using rule 48 (type_list -> type_declaration .)
    FUNCTION        reduce using rule 48 (type_list -> type_declaration .)
    IMPLEMENTATION  reduce using rule 48 (type_list -> type_declaration .)
    INTERFACE       reduce using rule 48 (type_list -> type_declaration .)


state 83

    (49) type_declaration -> ID . EQUAL type_definition SEMICOLON

    EQUAL           shift and go to state 156


state 84

    (118) var_declaration_block -> VAR var_list .
    (119) var_list -> var_list . var_declaration
    (121) var_declaration -> . id_list COLON type_definition SEMICOLON
    (122) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (123) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 118 (var_declaration_block -> VAR var_list .)
    LABEL           reduce using rule 118 (var_declaration_block -> VAR var_list .)
    CONST           reduce using rule 118 (var_declaration_block -> VAR var_list .)
    TYPE            reduce using rule 118 (var_declaration_block -> VAR var_list .)
    VAR             reduce using rule 118 (var_declaration_block -> VAR var_list .)
    CONSTRUCTOR     reduce using rule 118 (var_declaration_block -> VAR var_list .)
    DESTRUCTOR      reduce using rule 118 (var_declaration_block -> VAR var_list .)
    PROCEDURE       reduce using rule 118 (var_declaration_block -> VAR var_list .)
    FUNCTION        reduce using rule 118 (var_declaration_block -> VAR var_list .)
    IMPLEMENTATION  reduce using rule 118 (var_declaration_block -> VAR var_list .)
    INTERFACE       reduce using rule 118 (var_declaration_block -> VAR var_list .)
    ID              shift and go to state 13

    var_declaration                shift and go to state 157
    id_list                        shift and go to state 86

state 85

    (120) var_list -> var_declaration .

    ID              reduce using rule 120 (var_list -> var_declaration .)
    BEGIN           reduce using rule 120 (var_list -> var_declaration .)
    LABEL           reduce using rule 120 (var_list -> var_declaration .)
    CONST           reduce using rule 120 (var_list -> var_declaration .)
    TYPE            reduce using rule 120 (var_list -> var_declaration .)
    VAR             reduce using rule 120 (var_list -> var_declaration .)
    CONSTRUCTOR     reduce using rule 120 (var_list -> var_declaration .)
    DESTRUCTOR      reduce using rule 120 (var_list -> var_declaration .)
    PROCEDURE       reduce using rule 120 (var_list -> var_declaration .)
    FUNCTION        reduce using rule 120 (var_list -> var_declaration .)
    IMPLEMENTATION  reduce using rule 120 (var_list -> var_declaration .)
    INTERFACE       reduce using rule 120 (var_list -> var_declaration .)


state 86

    (121) var_declaration -> id_list . COLON type_definition SEMICOLON
    (122) var_declaration -> id_list . COLON type_definition EQUAL expression SEMICOLON
    (123) var_declaration -> id_list . COLON type_definition ABSOLUTE ID SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 158
    COMMA           shift and go to state 44


state 87

    (124) procedure_declaration -> procedure_header SEMICOLON . directive
    (125) procedure_declaration -> procedure_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165
    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    directive                      shift and go to state 159
    declaration_blocks             shift and go to state 160
    empty                          shift and go to state 11

state 88

    (133) function_declaration -> function_header SEMICOLON . directive
    (134) function_declaration -> function_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165
    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    directive                      shift and go to state 166
    declaration_blocks             shift and go to state 167
    empty                          shift and go to state 11

state 89

    (99) constructor_implementation -> CONSTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 168


state 90

    (100) destructor_implementation -> DESTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 169


state 91

    (101) method_implementation -> PROCEDURE ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (126) procedure_header -> PROCEDURE ID . parameters
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    DOT             shift and go to state 170
    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 171
    empty                          shift and go to state 173

state 92

    (102) method_implementation -> FUNCTION ID . DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (135) function_header -> FUNCTION ID . parameters COLON data_type_list
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    DOT             shift and go to state 174
    LPAREN          shift and go to state 172
    COLON           reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 175
    empty                          shift and go to state 173

state 93

    (23) implementation_block -> IMPLEMENTATION declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONST           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! TYPE            [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! VAR             [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 94

    (22) interface_block -> INTERFACE declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONST           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! TYPE            [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! VAR             [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 95

    (7) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 7 (id_list -> id_list COMMA ID .)


state 96

    (175) compound_statement -> BEGIN sentences_list END .

    DOT             reduce using rule 175 (compound_statement -> BEGIN sentences_list END .)
    SEMICOLON       reduce using rule 175 (compound_statement -> BEGIN sentences_list END .)
    ELSE            reduce using rule 175 (compound_statement -> BEGIN sentences_list END .)


state 97

    (176) sentences_list -> sentences_list sentence . SEMICOLON

    SEMICOLON       shift and go to state 176


state 98

    (191) sentence -> empty .

    SEMICOLON       reduce using rule 191 (sentence -> empty .)
    ELSE            reduce using rule 191 (sentence -> empty .)


state 99

    (177) sentences_list -> sentence SEMICOLON .

    END             reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    ID              reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    NEW             reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    DISPOSE         reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    BEGIN           reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    IF              reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    CASE            reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    WHILE           reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    REPEAT          reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    WITH            reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    GOTO            reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    NUMBER          reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    ASM             reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    LPAREN          reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    FOR             reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    SEMICOLON       reduce using rule 177 (sentences_list -> sentence SEMICOLON .)
    UNTIL           reduce using rule 177 (sentences_list -> sentence SEMICOLON .)


state 100

    (193) assignment -> variable ASIGNATION . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression                     shift and go to state 177
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 101

    (195) assignment -> variable PLUS_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression                     shift and go to state 178
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 102

    (197) assignment -> variable MINUS_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression                     shift and go to state 179
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 103

    (199) assignment -> variable TIMES_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression                     shift and go to state 180
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 104

    (201) assignment -> variable DIVIDE_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression                     shift and go to state 181
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 105

    (205) procedure_call -> variable DOT . ID LPAREN call_argument_list_opt RPAREN
    (276) variable -> variable DOT . ID

    ID              shift and go to state 182


state 106

    (277) variable -> variable LBRACKET . expression_list RBRACKET
    (284) expression_list -> . expression
    (285) expression_list -> . expression_list COMMA expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression_list                shift and go to state 183
    expression                     shift and go to state 184
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 107

    (278) variable -> variable CARET .

    ASIGNATION      reduce using rule 278 (variable -> variable CARET .)
    PLUS_ASIGN      reduce using rule 278 (variable -> variable CARET .)
    MINUS_ASIGN     reduce using rule 278 (variable -> variable CARET .)
    TIMES_ASIGN     reduce using rule 278 (variable -> variable CARET .)
    DIVIDE_ASIGN    reduce using rule 278 (variable -> variable CARET .)
    DOT             reduce using rule 278 (variable -> variable CARET .)
    LBRACKET        reduce using rule 278 (variable -> variable CARET .)
    CARET           reduce using rule 278 (variable -> variable CARET .)
    RPAREN          reduce using rule 278 (variable -> variable CARET .)
    TIMES           reduce using rule 278 (variable -> variable CARET .)
    DIVIDE          reduce using rule 278 (variable -> variable CARET .)
    DIV             reduce using rule 278 (variable -> variable CARET .)
    MOD             reduce using rule 278 (variable -> variable CARET .)
    SHL             reduce using rule 278 (variable -> variable CARET .)
    SHR             reduce using rule 278 (variable -> variable CARET .)
    PLUS            reduce using rule 278 (variable -> variable CARET .)
    MINUS           reduce using rule 278 (variable -> variable CARET .)
    EQUAL           reduce using rule 278 (variable -> variable CARET .)
    DISTINT         reduce using rule 278 (variable -> variable CARET .)
    LESS            reduce using rule 278 (variable -> variable CARET .)
    LESSEQUAL       reduce using rule 278 (variable -> variable CARET .)
    GREATER         reduce using rule 278 (variable -> variable CARET .)
    GREATEREQUAL    reduce using rule 278 (variable -> variable CARET .)
    IN              reduce using rule 278 (variable -> variable CARET .)
    AND             reduce using rule 278 (variable -> variable CARET .)
    THEN            reduce using rule 278 (variable -> variable CARET .)
    OR              reduce using rule 278 (variable -> variable CARET .)
    XOR             reduce using rule 278 (variable -> variable CARET .)
    OF              reduce using rule 278 (variable -> variable CARET .)
    DO              reduce using rule 278 (variable -> variable CARET .)
    COMMA           reduce using rule 278 (variable -> variable CARET .)
    SEMICOLON       reduce using rule 278 (variable -> variable CARET .)
    ELSE            reduce using rule 278 (variable -> variable CARET .)
    RBRACKET        reduce using rule 278 (variable -> variable CARET .)
    COLON           reduce using rule 278 (variable -> variable CARET .)
    DOBLEDOT        reduce using rule 278 (variable -> variable CARET .)
    TO              reduce using rule 278 (variable -> variable CARET .)
    DOWNTO          reduce using rule 278 (variable -> variable CARET .)


state 108

    (194) assignment -> ID ASIGNATION . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 185
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 109

    (196) assignment -> ID PLUS_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 186
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 110

    (198) assignment -> ID MINUS_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 187
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 111

    (200) assignment -> ID TIMES_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 188
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 112

    (202) assignment -> ID DIVIDE_ASIGN . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 189
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 113

    (204) procedure_call -> ID LPAREN . call_argument_list_opt RPAREN
    (44) call_argument_list_opt -> . call_argument_list
    (45) call_argument_list_opt -> . empty
    (42) call_argument_list -> . call_argument_list COMMA call_argument
    (43) call_argument_list -> . call_argument
    (230) empty -> .
    (39) call_argument -> . expression
    (40) call_argument -> . expression COLON expression
    (41) call_argument -> . expression COLON expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          reduce using rule 230 (empty -> .)
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    call_argument_list_opt         shift and go to state 190
    call_argument_list             shift and go to state 191
    empty                          shift and go to state 192
    call_argument                  shift and go to state 193
    expression                     shift and go to state 194
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 114

    (279) variable -> LPAREN variable . RPAREN CARET
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET

    RPAREN          shift and go to state 195
    DOT             shift and go to state 196
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 115

    (275) variable -> ID .

    RPAREN          reduce using rule 275 (variable -> ID .)
    DOT             reduce using rule 275 (variable -> ID .)
    LBRACKET        reduce using rule 275 (variable -> ID .)
    CARET           reduce using rule 275 (variable -> ID .)
    DO              reduce using rule 275 (variable -> ID .)
    COMMA           reduce using rule 275 (variable -> ID .)


state 116

    (206) procedure_call -> NEW LPAREN . call_argument_list_opt RPAREN
    (44) call_argument_list_opt -> . call_argument_list
    (45) call_argument_list_opt -> . empty
    (42) call_argument_list -> . call_argument_list COMMA call_argument
    (43) call_argument_list -> . call_argument
    (230) empty -> .
    (39) call_argument -> . expression
    (40) call_argument -> . expression COLON expression
    (41) call_argument -> . expression COLON expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          reduce using rule 230 (empty -> .)
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    call_argument_list_opt         shift and go to state 197
    call_argument_list             shift and go to state 191
    empty                          shift and go to state 192
    call_argument                  shift and go to state 193
    expression                     shift and go to state 194
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 117

    (207) procedure_call -> DISPOSE LPAREN . call_argument_list_opt RPAREN
    (44) call_argument_list_opt -> . call_argument_list
    (45) call_argument_list_opt -> . empty
    (42) call_argument_list -> . call_argument_list COMMA call_argument
    (43) call_argument_list -> . call_argument
    (230) empty -> .
    (39) call_argument -> . expression
    (40) call_argument -> . expression COLON expression
    (41) call_argument -> . expression COLON expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          reduce using rule 230 (empty -> .)
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    call_argument_list_opt         shift and go to state 198
    call_argument_list             shift and go to state 191
    empty                          shift and go to state 192
    call_argument                  shift and go to state 193
    expression                     shift and go to state 194
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 118

    (208) if_statement -> IF expression . THEN sentence
    (209) if_statement -> IF expression . THEN sentence ELSE sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    THEN            shift and go to state 199
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 119

    (233) expression -> simple_expression .
    (234) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 233 (expression -> simple_expression .)
    OR              reduce using rule 233 (expression -> simple_expression .)
    XOR             reduce using rule 233 (expression -> simple_expression .)
    OF              reduce using rule 233 (expression -> simple_expression .)
    DO              reduce using rule 233 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 233 (expression -> simple_expression .)
    ELSE            reduce using rule 233 (expression -> simple_expression .)
    RBRACKET        reduce using rule 233 (expression -> simple_expression .)
    COMMA           reduce using rule 233 (expression -> simple_expression .)
    COLON           reduce using rule 233 (expression -> simple_expression .)
    RPAREN          reduce using rule 233 (expression -> simple_expression .)
    DOBLEDOT        reduce using rule 233 (expression -> simple_expression .)
    TO              reduce using rule 233 (expression -> simple_expression .)
    DOWNTO          reduce using rule 233 (expression -> simple_expression .)
    AND             shift and go to state 202


state 120

    (235) simple_expression -> relational_expression .
    (236) relational_expression -> relational_expression . relational_operator additive_expression
    (238) relational_operator -> . EQUAL
    (239) relational_operator -> . DISTINT
    (240) relational_operator -> . LESS
    (241) relational_operator -> . LESSEQUAL
    (242) relational_operator -> . GREATER
    (243) relational_operator -> . GREATEREQUAL
    (244) relational_operator -> . IN

    AND             reduce using rule 235 (simple_expression -> relational_expression .)
    THEN            reduce using rule 235 (simple_expression -> relational_expression .)
    OR              reduce using rule 235 (simple_expression -> relational_expression .)
    XOR             reduce using rule 235 (simple_expression -> relational_expression .)
    OF              reduce using rule 235 (simple_expression -> relational_expression .)
    DO              reduce using rule 235 (simple_expression -> relational_expression .)
    SEMICOLON       reduce using rule 235 (simple_expression -> relational_expression .)
    ELSE            reduce using rule 235 (simple_expression -> relational_expression .)
    RBRACKET        reduce using rule 235 (simple_expression -> relational_expression .)
    COMMA           reduce using rule 235 (simple_expression -> relational_expression .)
    COLON           reduce using rule 235 (simple_expression -> relational_expression .)
    RPAREN          reduce using rule 235 (simple_expression -> relational_expression .)
    DOBLEDOT        reduce using rule 235 (simple_expression -> relational_expression .)
    TO              reduce using rule 235 (simple_expression -> relational_expression .)
    DOWNTO          reduce using rule 235 (simple_expression -> relational_expression .)
    EQUAL           shift and go to state 204
    DISTINT         shift and go to state 205
    LESS            shift and go to state 206
    LESSEQUAL       shift and go to state 207
    GREATER         shift and go to state 208
    GREATEREQUAL    shift and go to state 209
    IN              shift and go to state 210

    relational_operator            shift and go to state 203

state 121

    (237) relational_expression -> additive_expression .
    (245) additive_expression -> additive_expression . PLUS multiplicative_expression
    (246) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 237 (relational_expression -> additive_expression .)
    DISTINT         reduce using rule 237 (relational_expression -> additive_expression .)
    LESS            reduce using rule 237 (relational_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 237 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 237 (relational_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 237 (relational_expression -> additive_expression .)
    IN              reduce using rule 237 (relational_expression -> additive_expression .)
    AND             reduce using rule 237 (relational_expression -> additive_expression .)
    THEN            reduce using rule 237 (relational_expression -> additive_expression .)
    OR              reduce using rule 237 (relational_expression -> additive_expression .)
    XOR             reduce using rule 237 (relational_expression -> additive_expression .)
    OF              reduce using rule 237 (relational_expression -> additive_expression .)
    DO              reduce using rule 237 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 237 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 237 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 237 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 237 (relational_expression -> additive_expression .)
    COLON           reduce using rule 237 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 237 (relational_expression -> additive_expression .)
    DOBLEDOT        reduce using rule 237 (relational_expression -> additive_expression .)
    TO              reduce using rule 237 (relational_expression -> additive_expression .)
    DOWNTO          reduce using rule 237 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 211
    MINUS           shift and go to state 212


state 122

    (257) unary_expression -> PLUS . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 213
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 123

    (247) additive_expression -> multiplicative_expression .
    (248) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (249) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (250) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (251) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (252) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (253) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 247 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 247 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 247 (additive_expression -> multiplicative_expression .)
    DISTINT         reduce using rule 247 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 247 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 247 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 247 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 247 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 247 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 247 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 247 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 247 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 247 (additive_expression -> multiplicative_expression .)
    OF              reduce using rule 247 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 247 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 247 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 247 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 247 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 247 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 247 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 247 (additive_expression -> multiplicative_expression .)
    DOBLEDOT        reduce using rule 247 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 247 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 247 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 124

    (256) unary_expression -> MINUS . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 220
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 125

    (254) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 254 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 254 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DISTINT         reduce using rule 254 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 254 (multiplicative_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 254 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 254 (multiplicative_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 254 (multiplicative_expression -> unary_expression .)
    IN              reduce using rule 254 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    THEN            reduce using rule 254 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 254 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 254 (multiplicative_expression -> unary_expression .)
    OF              reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DO              reduce using rule 254 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 254 (multiplicative_expression -> unary_expression .)
    ELSE            reduce using rule 254 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 254 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 254 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 254 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DOBLEDOT        reduce using rule 254 (multiplicative_expression -> unary_expression .)
    TO              reduce using rule 254 (multiplicative_expression -> unary_expression .)
    DOWNTO          reduce using rule 254 (multiplicative_expression -> unary_expression .)


state 126

    (255) unary_expression -> NOT . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 221
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 127

    (258) unary_expression -> ADDRESS_OF . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 222
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 128

    (259) unary_expression -> primary_expression .

    TIMES           reduce using rule 259 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 259 (unary_expression -> primary_expression .)
    DIV             reduce using rule 259 (unary_expression -> primary_expression .)
    MOD             reduce using rule 259 (unary_expression -> primary_expression .)
    SHL             reduce using rule 259 (unary_expression -> primary_expression .)
    SHR             reduce using rule 259 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 259 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 259 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 259 (unary_expression -> primary_expression .)
    DISTINT         reduce using rule 259 (unary_expression -> primary_expression .)
    LESS            reduce using rule 259 (unary_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 259 (unary_expression -> primary_expression .)
    GREATER         reduce using rule 259 (unary_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 259 (unary_expression -> primary_expression .)
    IN              reduce using rule 259 (unary_expression -> primary_expression .)
    AND             reduce using rule 259 (unary_expression -> primary_expression .)
    THEN            reduce using rule 259 (unary_expression -> primary_expression .)
    OR              reduce using rule 259 (unary_expression -> primary_expression .)
    XOR             reduce using rule 259 (unary_expression -> primary_expression .)
    OF              reduce using rule 259 (unary_expression -> primary_expression .)
    DO              reduce using rule 259 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 259 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 259 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 259 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 259 (unary_expression -> primary_expression .)
    COLON           reduce using rule 259 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 259 (unary_expression -> primary_expression .)
    DOBLEDOT        reduce using rule 259 (unary_expression -> primary_expression .)
    TO              reduce using rule 259 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 259 (unary_expression -> primary_expression .)


state 129

    (260) primary_expression -> variable .
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET
    (282) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (283) function_call -> variable . DOT ID LPAREN RPAREN

    TIMES           reduce using rule 260 (primary_expression -> variable .)
    DIVIDE          reduce using rule 260 (primary_expression -> variable .)
    DIV             reduce using rule 260 (primary_expression -> variable .)
    MOD             reduce using rule 260 (primary_expression -> variable .)
    SHL             reduce using rule 260 (primary_expression -> variable .)
    SHR             reduce using rule 260 (primary_expression -> variable .)
    PLUS            reduce using rule 260 (primary_expression -> variable .)
    MINUS           reduce using rule 260 (primary_expression -> variable .)
    EQUAL           reduce using rule 260 (primary_expression -> variable .)
    DISTINT         reduce using rule 260 (primary_expression -> variable .)
    LESS            reduce using rule 260 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 260 (primary_expression -> variable .)
    GREATER         reduce using rule 260 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 260 (primary_expression -> variable .)
    IN              reduce using rule 260 (primary_expression -> variable .)
    AND             reduce using rule 260 (primary_expression -> variable .)
    THEN            reduce using rule 260 (primary_expression -> variable .)
    OR              reduce using rule 260 (primary_expression -> variable .)
    XOR             reduce using rule 260 (primary_expression -> variable .)
    OF              reduce using rule 260 (primary_expression -> variable .)
    DO              reduce using rule 260 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 260 (primary_expression -> variable .)
    ELSE            reduce using rule 260 (primary_expression -> variable .)
    RBRACKET        reduce using rule 260 (primary_expression -> variable .)
    COMMA           reduce using rule 260 (primary_expression -> variable .)
    COLON           reduce using rule 260 (primary_expression -> variable .)
    RPAREN          reduce using rule 260 (primary_expression -> variable .)
    DOBLEDOT        reduce using rule 260 (primary_expression -> variable .)
    TO              reduce using rule 260 (primary_expression -> variable .)
    DOWNTO          reduce using rule 260 (primary_expression -> variable .)
    DOT             shift and go to state 223
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 130

    (261) primary_expression -> NUMBER .

    TIMES           reduce using rule 261 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 261 (primary_expression -> NUMBER .)
    DIV             reduce using rule 261 (primary_expression -> NUMBER .)
    MOD             reduce using rule 261 (primary_expression -> NUMBER .)
    SHL             reduce using rule 261 (primary_expression -> NUMBER .)
    SHR             reduce using rule 261 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 261 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 261 (primary_expression -> NUMBER .)
    EQUAL           reduce using rule 261 (primary_expression -> NUMBER .)
    DISTINT         reduce using rule 261 (primary_expression -> NUMBER .)
    LESS            reduce using rule 261 (primary_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 261 (primary_expression -> NUMBER .)
    GREATER         reduce using rule 261 (primary_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 261 (primary_expression -> NUMBER .)
    IN              reduce using rule 261 (primary_expression -> NUMBER .)
    AND             reduce using rule 261 (primary_expression -> NUMBER .)
    THEN            reduce using rule 261 (primary_expression -> NUMBER .)
    OR              reduce using rule 261 (primary_expression -> NUMBER .)
    XOR             reduce using rule 261 (primary_expression -> NUMBER .)
    OF              reduce using rule 261 (primary_expression -> NUMBER .)
    DO              reduce using rule 261 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 261 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 261 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 261 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 261 (primary_expression -> NUMBER .)
    COLON           reduce using rule 261 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 261 (primary_expression -> NUMBER .)
    DOBLEDOT        reduce using rule 261 (primary_expression -> NUMBER .)
    TO              reduce using rule 261 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 261 (primary_expression -> NUMBER .)


state 131

    (262) primary_expression -> STRING .

    TIMES           reduce using rule 262 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 262 (primary_expression -> STRING .)
    DIV             reduce using rule 262 (primary_expression -> STRING .)
    MOD             reduce using rule 262 (primary_expression -> STRING .)
    SHL             reduce using rule 262 (primary_expression -> STRING .)
    SHR             reduce using rule 262 (primary_expression -> STRING .)
    PLUS            reduce using rule 262 (primary_expression -> STRING .)
    MINUS           reduce using rule 262 (primary_expression -> STRING .)
    EQUAL           reduce using rule 262 (primary_expression -> STRING .)
    DISTINT         reduce using rule 262 (primary_expression -> STRING .)
    LESS            reduce using rule 262 (primary_expression -> STRING .)
    LESSEQUAL       reduce using rule 262 (primary_expression -> STRING .)
    GREATER         reduce using rule 262 (primary_expression -> STRING .)
    GREATEREQUAL    reduce using rule 262 (primary_expression -> STRING .)
    IN              reduce using rule 262 (primary_expression -> STRING .)
    AND             reduce using rule 262 (primary_expression -> STRING .)
    THEN            reduce using rule 262 (primary_expression -> STRING .)
    OR              reduce using rule 262 (primary_expression -> STRING .)
    XOR             reduce using rule 262 (primary_expression -> STRING .)
    OF              reduce using rule 262 (primary_expression -> STRING .)
    DO              reduce using rule 262 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 262 (primary_expression -> STRING .)
    ELSE            reduce using rule 262 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 262 (primary_expression -> STRING .)
    COMMA           reduce using rule 262 (primary_expression -> STRING .)
    COLON           reduce using rule 262 (primary_expression -> STRING .)
    RPAREN          reduce using rule 262 (primary_expression -> STRING .)
    DOBLEDOT        reduce using rule 262 (primary_expression -> STRING .)
    TO              reduce using rule 262 (primary_expression -> STRING .)
    DOWNTO          reduce using rule 262 (primary_expression -> STRING .)


state 132

    (263) primary_expression -> TRUE .

    TIMES           reduce using rule 263 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 263 (primary_expression -> TRUE .)
    DIV             reduce using rule 263 (primary_expression -> TRUE .)
    MOD             reduce using rule 263 (primary_expression -> TRUE .)
    SHL             reduce using rule 263 (primary_expression -> TRUE .)
    SHR             reduce using rule 263 (primary_expression -> TRUE .)
    PLUS            reduce using rule 263 (primary_expression -> TRUE .)
    MINUS           reduce using rule 263 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 263 (primary_expression -> TRUE .)
    DISTINT         reduce using rule 263 (primary_expression -> TRUE .)
    LESS            reduce using rule 263 (primary_expression -> TRUE .)
    LESSEQUAL       reduce using rule 263 (primary_expression -> TRUE .)
    GREATER         reduce using rule 263 (primary_expression -> TRUE .)
    GREATEREQUAL    reduce using rule 263 (primary_expression -> TRUE .)
    IN              reduce using rule 263 (primary_expression -> TRUE .)
    AND             reduce using rule 263 (primary_expression -> TRUE .)
    THEN            reduce using rule 263 (primary_expression -> TRUE .)
    OR              reduce using rule 263 (primary_expression -> TRUE .)
    XOR             reduce using rule 263 (primary_expression -> TRUE .)
    OF              reduce using rule 263 (primary_expression -> TRUE .)
    DO              reduce using rule 263 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 263 (primary_expression -> TRUE .)
    ELSE            reduce using rule 263 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 263 (primary_expression -> TRUE .)
    COMMA           reduce using rule 263 (primary_expression -> TRUE .)
    COLON           reduce using rule 263 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 263 (primary_expression -> TRUE .)
    DOBLEDOT        reduce using rule 263 (primary_expression -> TRUE .)
    TO              reduce using rule 263 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 263 (primary_expression -> TRUE .)


state 133

    (264) primary_expression -> FALSE .

    TIMES           reduce using rule 264 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 264 (primary_expression -> FALSE .)
    DIV             reduce using rule 264 (primary_expression -> FALSE .)
    MOD             reduce using rule 264 (primary_expression -> FALSE .)
    SHL             reduce using rule 264 (primary_expression -> FALSE .)
    SHR             reduce using rule 264 (primary_expression -> FALSE .)
    PLUS            reduce using rule 264 (primary_expression -> FALSE .)
    MINUS           reduce using rule 264 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 264 (primary_expression -> FALSE .)
    DISTINT         reduce using rule 264 (primary_expression -> FALSE .)
    LESS            reduce using rule 264 (primary_expression -> FALSE .)
    LESSEQUAL       reduce using rule 264 (primary_expression -> FALSE .)
    GREATER         reduce using rule 264 (primary_expression -> FALSE .)
    GREATEREQUAL    reduce using rule 264 (primary_expression -> FALSE .)
    IN              reduce using rule 264 (primary_expression -> FALSE .)
    AND             reduce using rule 264 (primary_expression -> FALSE .)
    THEN            reduce using rule 264 (primary_expression -> FALSE .)
    OR              reduce using rule 264 (primary_expression -> FALSE .)
    XOR             reduce using rule 264 (primary_expression -> FALSE .)
    OF              reduce using rule 264 (primary_expression -> FALSE .)
    DO              reduce using rule 264 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 264 (primary_expression -> FALSE .)
    ELSE            reduce using rule 264 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 264 (primary_expression -> FALSE .)
    COMMA           reduce using rule 264 (primary_expression -> FALSE .)
    COLON           reduce using rule 264 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 264 (primary_expression -> FALSE .)
    DOBLEDOT        reduce using rule 264 (primary_expression -> FALSE .)
    TO              reduce using rule 264 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 264 (primary_expression -> FALSE .)


state 134

    (265) primary_expression -> NIL .

    TIMES           reduce using rule 265 (primary_expression -> NIL .)
    DIVIDE          reduce using rule 265 (primary_expression -> NIL .)
    DIV             reduce using rule 265 (primary_expression -> NIL .)
    MOD             reduce using rule 265 (primary_expression -> NIL .)
    SHL             reduce using rule 265 (primary_expression -> NIL .)
    SHR             reduce using rule 265 (primary_expression -> NIL .)
    PLUS            reduce using rule 265 (primary_expression -> NIL .)
    MINUS           reduce using rule 265 (primary_expression -> NIL .)
    EQUAL           reduce using rule 265 (primary_expression -> NIL .)
    DISTINT         reduce using rule 265 (primary_expression -> NIL .)
    LESS            reduce using rule 265 (primary_expression -> NIL .)
    LESSEQUAL       reduce using rule 265 (primary_expression -> NIL .)
    GREATER         reduce using rule 265 (primary_expression -> NIL .)
    GREATEREQUAL    reduce using rule 265 (primary_expression -> NIL .)
    IN              reduce using rule 265 (primary_expression -> NIL .)
    AND             reduce using rule 265 (primary_expression -> NIL .)
    THEN            reduce using rule 265 (primary_expression -> NIL .)
    OR              reduce using rule 265 (primary_expression -> NIL .)
    XOR             reduce using rule 265 (primary_expression -> NIL .)
    OF              reduce using rule 265 (primary_expression -> NIL .)
    DO              reduce using rule 265 (primary_expression -> NIL .)
    SEMICOLON       reduce using rule 265 (primary_expression -> NIL .)
    ELSE            reduce using rule 265 (primary_expression -> NIL .)
    RBRACKET        reduce using rule 265 (primary_expression -> NIL .)
    COMMA           reduce using rule 265 (primary_expression -> NIL .)
    COLON           reduce using rule 265 (primary_expression -> NIL .)
    RPAREN          reduce using rule 265 (primary_expression -> NIL .)
    DOBLEDOT        reduce using rule 265 (primary_expression -> NIL .)
    TO              reduce using rule 265 (primary_expression -> NIL .)
    DOWNTO          reduce using rule 265 (primary_expression -> NIL .)


state 135

    (266) primary_expression -> LPAREN . expression RPAREN
    (279) variable -> LPAREN . variable RPAREN CARET
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 138
    LPAREN          shift and go to state 224
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 225
    variable                       shift and go to state 226
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 136

    (267) primary_expression -> function_call .

    TIMES           reduce using rule 267 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 267 (primary_expression -> function_call .)
    DIV             reduce using rule 267 (primary_expression -> function_call .)
    MOD             reduce using rule 267 (primary_expression -> function_call .)
    SHL             reduce using rule 267 (primary_expression -> function_call .)
    SHR             reduce using rule 267 (primary_expression -> function_call .)
    PLUS            reduce using rule 267 (primary_expression -> function_call .)
    MINUS           reduce using rule 267 (primary_expression -> function_call .)
    EQUAL           reduce using rule 267 (primary_expression -> function_call .)
    DISTINT         reduce using rule 267 (primary_expression -> function_call .)
    LESS            reduce using rule 267 (primary_expression -> function_call .)
    LESSEQUAL       reduce using rule 267 (primary_expression -> function_call .)
    GREATER         reduce using rule 267 (primary_expression -> function_call .)
    GREATEREQUAL    reduce using rule 267 (primary_expression -> function_call .)
    IN              reduce using rule 267 (primary_expression -> function_call .)
    AND             reduce using rule 267 (primary_expression -> function_call .)
    THEN            reduce using rule 267 (primary_expression -> function_call .)
    OR              reduce using rule 267 (primary_expression -> function_call .)
    XOR             reduce using rule 267 (primary_expression -> function_call .)
    OF              reduce using rule 267 (primary_expression -> function_call .)
    DO              reduce using rule 267 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 267 (primary_expression -> function_call .)
    ELSE            reduce using rule 267 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 267 (primary_expression -> function_call .)
    COMMA           reduce using rule 267 (primary_expression -> function_call .)
    COLON           reduce using rule 267 (primary_expression -> function_call .)
    RPAREN          reduce using rule 267 (primary_expression -> function_call .)
    DOBLEDOT        reduce using rule 267 (primary_expression -> function_call .)
    TO              reduce using rule 267 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 267 (primary_expression -> function_call .)


state 137

    (268) primary_expression -> set_constructor .

    TIMES           reduce using rule 268 (primary_expression -> set_constructor .)
    DIVIDE          reduce using rule 268 (primary_expression -> set_constructor .)
    DIV             reduce using rule 268 (primary_expression -> set_constructor .)
    MOD             reduce using rule 268 (primary_expression -> set_constructor .)
    SHL             reduce using rule 268 (primary_expression -> set_constructor .)
    SHR             reduce using rule 268 (primary_expression -> set_constructor .)
    PLUS            reduce using rule 268 (primary_expression -> set_constructor .)
    MINUS           reduce using rule 268 (primary_expression -> set_constructor .)
    EQUAL           reduce using rule 268 (primary_expression -> set_constructor .)
    DISTINT         reduce using rule 268 (primary_expression -> set_constructor .)
    LESS            reduce using rule 268 (primary_expression -> set_constructor .)
    LESSEQUAL       reduce using rule 268 (primary_expression -> set_constructor .)
    GREATER         reduce using rule 268 (primary_expression -> set_constructor .)
    GREATEREQUAL    reduce using rule 268 (primary_expression -> set_constructor .)
    IN              reduce using rule 268 (primary_expression -> set_constructor .)
    AND             reduce using rule 268 (primary_expression -> set_constructor .)
    THEN            reduce using rule 268 (primary_expression -> set_constructor .)
    OR              reduce using rule 268 (primary_expression -> set_constructor .)
    XOR             reduce using rule 268 (primary_expression -> set_constructor .)
    OF              reduce using rule 268 (primary_expression -> set_constructor .)
    DO              reduce using rule 268 (primary_expression -> set_constructor .)
    SEMICOLON       reduce using rule 268 (primary_expression -> set_constructor .)
    ELSE            reduce using rule 268 (primary_expression -> set_constructor .)
    RBRACKET        reduce using rule 268 (primary_expression -> set_constructor .)
    COMMA           reduce using rule 268 (primary_expression -> set_constructor .)
    COLON           reduce using rule 268 (primary_expression -> set_constructor .)
    RPAREN          reduce using rule 268 (primary_expression -> set_constructor .)
    DOBLEDOT        reduce using rule 268 (primary_expression -> set_constructor .)
    TO              reduce using rule 268 (primary_expression -> set_constructor .)
    DOWNTO          reduce using rule 268 (primary_expression -> set_constructor .)


state 138

    (275) variable -> ID .
    (280) function_call -> ID . LPAREN expression_list RPAREN
    (281) function_call -> ID . LPAREN RPAREN

    DOT             reduce using rule 275 (variable -> ID .)
    LBRACKET        reduce using rule 275 (variable -> ID .)
    CARET           reduce using rule 275 (variable -> ID .)
    TIMES           reduce using rule 275 (variable -> ID .)
    DIVIDE          reduce using rule 275 (variable -> ID .)
    DIV             reduce using rule 275 (variable -> ID .)
    MOD             reduce using rule 275 (variable -> ID .)
    SHL             reduce using rule 275 (variable -> ID .)
    SHR             reduce using rule 275 (variable -> ID .)
    PLUS            reduce using rule 275 (variable -> ID .)
    MINUS           reduce using rule 275 (variable -> ID .)
    EQUAL           reduce using rule 275 (variable -> ID .)
    DISTINT         reduce using rule 275 (variable -> ID .)
    LESS            reduce using rule 275 (variable -> ID .)
    LESSEQUAL       reduce using rule 275 (variable -> ID .)
    GREATER         reduce using rule 275 (variable -> ID .)
    GREATEREQUAL    reduce using rule 275 (variable -> ID .)
    IN              reduce using rule 275 (variable -> ID .)
    AND             reduce using rule 275 (variable -> ID .)
    THEN            reduce using rule 275 (variable -> ID .)
    OR              reduce using rule 275 (variable -> ID .)
    XOR             reduce using rule 275 (variable -> ID .)
    OF              reduce using rule 275 (variable -> ID .)
    DO              reduce using rule 275 (variable -> ID .)
    SEMICOLON       reduce using rule 275 (variable -> ID .)
    ELSE            reduce using rule 275 (variable -> ID .)
    RBRACKET        reduce using rule 275 (variable -> ID .)
    COMMA           reduce using rule 275 (variable -> ID .)
    COLON           reduce using rule 275 (variable -> ID .)
    RPAREN          reduce using rule 275 (variable -> ID .)
    DOBLEDOT        reduce using rule 275 (variable -> ID .)
    TO              reduce using rule 275 (variable -> ID .)
    DOWNTO          reduce using rule 275 (variable -> ID .)
    LPAREN          shift and go to state 227


state 139

    (273) set_constructor -> LBRACKET . set_item_list RBRACKET
    (274) set_constructor -> LBRACKET . RBRACKET
    (271) set_item_list -> . set_item
    (272) set_item_list -> . set_item_list COMMA set_item
    (269) set_item -> . expression
    (270) set_item -> . expression DOBLEDOT expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 229
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    set_item_list                  shift and go to state 228
    set_item                       shift and go to state 230
    expression                     shift and go to state 231
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 140

    (210) case_statement -> CASE expression . OF case_list END
    (211) case_statement -> CASE expression . OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> CASE expression . OF case_list ELSE sentences_list END
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    OF              shift and go to state 232
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 141

    (220) for_statement -> for_control_variable_setup ASIGNATION . expression TO expression DO sentence
    (221) for_statement -> for_control_variable_setup ASIGNATION . expression DOWNTO expression DO sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 233
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 142

    (222) for_statement -> for_control_variable_setup IN . expression DO sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 234
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 143

    (223) while_statement -> WHILE expression . DO sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    DO              shift and go to state 235
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 144

    (224) repeat_statement -> REPEAT sentences_list . UNTIL expression
    (176) sentences_list -> sentences_list . sentence SEMICOLON
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    UNTIL           shift and go to state 236
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 97
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 145

    (225) with_statement -> WITH variable_list . DO sentence
    (227) variable_list -> variable_list . COMMA variable

    DO              shift and go to state 237
    COMMA           shift and go to state 238


state 146

    (226) variable_list -> variable .
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET

    DO              reduce using rule 226 (variable_list -> variable .)
    COMMA           reduce using rule 226 (variable_list -> variable .)
    DOT             shift and go to state 196
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 147

    (228) goto_statement -> GOTO NUMBER .

    SEMICOLON       reduce using rule 228 (goto_statement -> GOTO NUMBER .)
    ELSE            reduce using rule 228 (goto_statement -> GOTO NUMBER .)


state 148

    (229) labeled_sentence -> NUMBER COLON . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 239
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 149

    (219) for_control_variable_setup -> FOR ID .

    ASIGNATION      reduce using rule 219 (for_control_variable_setup -> FOR ID .)
    IN              reduce using rule 219 (for_control_variable_setup -> FOR ID .)


state 150

    (24) label_declaration -> LABEL number_list SEMICOLON .

    BEGIN           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    LABEL           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONST           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    TYPE            reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    VAR             reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    PROCEDURE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    FUNCTION        reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    INTERFACE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)


state 151

    (26) number_list -> number_list COMMA . NUMBER

    NUMBER          shift and go to state 240


state 152

    (28) const_list -> const_list const_declaration .

    ID              reduce using rule 28 (const_list -> const_list const_declaration .)
    BEGIN           reduce using rule 28 (const_list -> const_list const_declaration .)
    LABEL           reduce using rule 28 (const_list -> const_list const_declaration .)
    CONST           reduce using rule 28 (const_list -> const_list const_declaration .)
    TYPE            reduce using rule 28 (const_list -> const_list const_declaration .)
    VAR             reduce using rule 28 (const_list -> const_list const_declaration .)
    CONSTRUCTOR     reduce using rule 28 (const_list -> const_list const_declaration .)
    DESTRUCTOR      reduce using rule 28 (const_list -> const_list const_declaration .)
    PROCEDURE       reduce using rule 28 (const_list -> const_list const_declaration .)
    FUNCTION        reduce using rule 28 (const_list -> const_list const_declaration .)
    IMPLEMENTATION  reduce using rule 28 (const_list -> const_list const_declaration .)
    INTERFACE       reduce using rule 28 (const_list -> const_list const_declaration .)


state 153

    (30) const_declaration -> ID EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    constant                       shift and go to state 241
    set_constructor                shift and go to state 248

state 154

    (31) const_declaration -> ID COLON . data_type_list EQUAL constant SEMICOLON
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 250
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 155

    (47) type_list -> type_list type_declaration .

    ID              reduce using rule 47 (type_list -> type_list type_declaration .)
    BEGIN           reduce using rule 47 (type_list -> type_list type_declaration .)
    LABEL           reduce using rule 47 (type_list -> type_list type_declaration .)
    CONST           reduce using rule 47 (type_list -> type_list type_declaration .)
    TYPE            reduce using rule 47 (type_list -> type_list type_declaration .)
    VAR             reduce using rule 47 (type_list -> type_list type_declaration .)
    CONSTRUCTOR     reduce using rule 47 (type_list -> type_list type_declaration .)
    DESTRUCTOR      reduce using rule 47 (type_list -> type_list type_declaration .)
    PROCEDURE       reduce using rule 47 (type_list -> type_list type_declaration .)
    FUNCTION        reduce using rule 47 (type_list -> type_list type_declaration .)
    IMPLEMENTATION  reduce using rule 47 (type_list -> type_list type_declaration .)
    INTERFACE       reduce using rule 47 (type_list -> type_list type_declaration .)


state 156

    (49) type_declaration -> ID EQUAL . type_definition SEMICOLON
    (50) type_definition -> . data_type_list
    (51) type_definition -> . LPAREN id_list RPAREN
    (52) type_definition -> . NUMBER DOBLEDOT NUMBER
    (53) type_definition -> . CHAR DOBLEDOT CHAR
    (54) type_definition -> . ID DOBLEDOT ID
    (55) type_definition -> . record_type
    (56) type_definition -> . array_type
    (57) type_definition -> . set_type
    (58) type_definition -> . pointer_type
    (59) type_definition -> . file_type
    (60) type_definition -> . object_type
    (61) type_definition -> . string_type
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (81) set_type -> . SET OF set_range
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 282
    NUMBER          shift and go to state 283
    CHAR            shift and go to state 284
    ID              shift and go to state 279
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    RECORD          shift and go to state 276
    PACKED          shift and go to state 292
    ARRAY           shift and go to state 273
    SET             shift and go to state 277
    CARET           shift and go to state 275
    OBJECT          shift and go to state 278

    type_definition                shift and go to state 280
    data_type_list                 shift and go to state 281
    record_type                    shift and go to state 285
    array_type                     shift and go to state 286
    set_type                       shift and go to state 287
    pointer_type                   shift and go to state 288
    file_type                      shift and go to state 289
    object_type                    shift and go to state 290
    string_type                    shift and go to state 291

state 157

    (119) var_list -> var_list var_declaration .

    ID              reduce using rule 119 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 119 (var_list -> var_list var_declaration .)
    LABEL           reduce using rule 119 (var_list -> var_list var_declaration .)
    CONST           reduce using rule 119 (var_list -> var_list var_declaration .)
    TYPE            reduce using rule 119 (var_list -> var_list var_declaration .)
    VAR             reduce using rule 119 (var_list -> var_list var_declaration .)
    CONSTRUCTOR     reduce using rule 119 (var_list -> var_list var_declaration .)
    DESTRUCTOR      reduce using rule 119 (var_list -> var_list var_declaration .)
    PROCEDURE       reduce using rule 119 (var_list -> var_list var_declaration .)
    FUNCTION        reduce using rule 119 (var_list -> var_list var_declaration .)
    IMPLEMENTATION  reduce using rule 119 (var_list -> var_list var_declaration .)
    INTERFACE       reduce using rule 119 (var_list -> var_list var_declaration .)


state 158

    (121) var_declaration -> id_list COLON . type_definition SEMICOLON
    (122) var_declaration -> id_list COLON . type_definition EQUAL expression SEMICOLON
    (123) var_declaration -> id_list COLON . type_definition ABSOLUTE ID SEMICOLON
    (50) type_definition -> . data_type_list
    (51) type_definition -> . LPAREN id_list RPAREN
    (52) type_definition -> . NUMBER DOBLEDOT NUMBER
    (53) type_definition -> . CHAR DOBLEDOT CHAR
    (54) type_definition -> . ID DOBLEDOT ID
    (55) type_definition -> . record_type
    (56) type_definition -> . array_type
    (57) type_definition -> . set_type
    (58) type_definition -> . pointer_type
    (59) type_definition -> . file_type
    (60) type_definition -> . object_type
    (61) type_definition -> . string_type
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (81) set_type -> . SET OF set_range
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 282
    NUMBER          shift and go to state 283
    CHAR            shift and go to state 284
    ID              shift and go to state 279
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    RECORD          shift and go to state 276
    PACKED          shift and go to state 292
    ARRAY           shift and go to state 273
    SET             shift and go to state 277
    CARET           shift and go to state 275
    OBJECT          shift and go to state 278

    type_definition                shift and go to state 293
    data_type_list                 shift and go to state 281
    record_type                    shift and go to state 285
    array_type                     shift and go to state 286
    set_type                       shift and go to state 287
    pointer_type                   shift and go to state 288
    file_type                      shift and go to state 289
    object_type                    shift and go to state 290
    string_type                    shift and go to state 291

state 159

    (124) procedure_declaration -> procedure_header SEMICOLON directive .

    BEGIN           reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    LABEL           reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    CONST           reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    TYPE            reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    VAR             reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)
    INTERFACE       reduce using rule 124 (procedure_declaration -> procedure_header SEMICOLON directive .)


state 160

    (125) procedure_declaration -> procedure_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    procedure_header               shift and go to state 35
    compound_statement             shift and go to state 294
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    function_header                shift and go to state 36

state 161

    (127) directive -> FORWARD .

    BEGIN           reduce using rule 127 (directive -> FORWARD .)
    LABEL           reduce using rule 127 (directive -> FORWARD .)
    CONST           reduce using rule 127 (directive -> FORWARD .)
    TYPE            reduce using rule 127 (directive -> FORWARD .)
    VAR             reduce using rule 127 (directive -> FORWARD .)
    CONSTRUCTOR     reduce using rule 127 (directive -> FORWARD .)
    DESTRUCTOR      reduce using rule 127 (directive -> FORWARD .)
    PROCEDURE       reduce using rule 127 (directive -> FORWARD .)
    FUNCTION        reduce using rule 127 (directive -> FORWARD .)
    IMPLEMENTATION  reduce using rule 127 (directive -> FORWARD .)
    INTERFACE       reduce using rule 127 (directive -> FORWARD .)
    END             reduce using rule 127 (directive -> FORWARD .)


state 162

    (128) directive -> EXTERNAL .
    (129) directive -> EXTERNAL . STRING

    BEGIN           reduce using rule 128 (directive -> EXTERNAL .)
    LABEL           reduce using rule 128 (directive -> EXTERNAL .)
    CONST           reduce using rule 128 (directive -> EXTERNAL .)
    TYPE            reduce using rule 128 (directive -> EXTERNAL .)
    VAR             reduce using rule 128 (directive -> EXTERNAL .)
    CONSTRUCTOR     reduce using rule 128 (directive -> EXTERNAL .)
    DESTRUCTOR      reduce using rule 128 (directive -> EXTERNAL .)
    PROCEDURE       reduce using rule 128 (directive -> EXTERNAL .)
    FUNCTION        reduce using rule 128 (directive -> EXTERNAL .)
    IMPLEMENTATION  reduce using rule 128 (directive -> EXTERNAL .)
    INTERFACE       reduce using rule 128 (directive -> EXTERNAL .)
    END             reduce using rule 128 (directive -> EXTERNAL .)
    STRING          shift and go to state 295


state 163

    (130) directive -> ASM .

    BEGIN           reduce using rule 130 (directive -> ASM .)
    LABEL           reduce using rule 130 (directive -> ASM .)
    CONST           reduce using rule 130 (directive -> ASM .)
    TYPE            reduce using rule 130 (directive -> ASM .)
    VAR             reduce using rule 130 (directive -> ASM .)
    CONSTRUCTOR     reduce using rule 130 (directive -> ASM .)
    DESTRUCTOR      reduce using rule 130 (directive -> ASM .)
    PROCEDURE       reduce using rule 130 (directive -> ASM .)
    FUNCTION        reduce using rule 130 (directive -> ASM .)
    IMPLEMENTATION  reduce using rule 130 (directive -> ASM .)
    INTERFACE       reduce using rule 130 (directive -> ASM .)
    END             reduce using rule 130 (directive -> ASM .)


state 164

    (131) directive -> INLINE .

    BEGIN           reduce using rule 131 (directive -> INLINE .)
    LABEL           reduce using rule 131 (directive -> INLINE .)
    CONST           reduce using rule 131 (directive -> INLINE .)
    TYPE            reduce using rule 131 (directive -> INLINE .)
    VAR             reduce using rule 131 (directive -> INLINE .)
    CONSTRUCTOR     reduce using rule 131 (directive -> INLINE .)
    DESTRUCTOR      reduce using rule 131 (directive -> INLINE .)
    PROCEDURE       reduce using rule 131 (directive -> INLINE .)
    FUNCTION        reduce using rule 131 (directive -> INLINE .)
    IMPLEMENTATION  reduce using rule 131 (directive -> INLINE .)
    INTERFACE       reduce using rule 131 (directive -> INLINE .)
    END             reduce using rule 131 (directive -> INLINE .)


state 165

    (132) directive -> VIRTUAL .

    BEGIN           reduce using rule 132 (directive -> VIRTUAL .)
    LABEL           reduce using rule 132 (directive -> VIRTUAL .)
    CONST           reduce using rule 132 (directive -> VIRTUAL .)
    TYPE            reduce using rule 132 (directive -> VIRTUAL .)
    VAR             reduce using rule 132 (directive -> VIRTUAL .)
    CONSTRUCTOR     reduce using rule 132 (directive -> VIRTUAL .)
    DESTRUCTOR      reduce using rule 132 (directive -> VIRTUAL .)
    PROCEDURE       reduce using rule 132 (directive -> VIRTUAL .)
    FUNCTION        reduce using rule 132 (directive -> VIRTUAL .)
    IMPLEMENTATION  reduce using rule 132 (directive -> VIRTUAL .)
    INTERFACE       reduce using rule 132 (directive -> VIRTUAL .)
    END             reduce using rule 132 (directive -> VIRTUAL .)


state 166

    (133) function_declaration -> function_header SEMICOLON directive .

    BEGIN           reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    LABEL           reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    CONST           reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    TYPE            reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    VAR             reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)
    INTERFACE       reduce using rule 133 (function_declaration -> function_header SEMICOLON directive .)


state 167

    (134) function_declaration -> function_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    function_header                shift and go to state 36
    compound_statement             shift and go to state 296
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35

state 168

    (99) constructor_implementation -> CONSTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 297


state 169

    (100) destructor_implementation -> DESTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 298


state 170

    (101) method_implementation -> PROCEDURE ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 299


state 171

    (126) procedure_header -> PROCEDURE ID parameters .

    SEMICOLON       reduce using rule 126 (procedure_header -> PROCEDURE ID parameters .)
    RPAREN          reduce using rule 126 (procedure_header -> PROCEDURE ID parameters .)


state 172

    (136) parameters -> LPAREN . parameter_list RPAREN
    (138) parameter_list -> . parameter_list SEMICOLON parameter_group
    (139) parameter_list -> . parameter_group
    (140) parameter_group -> . id_list COLON data_type_list
    (141) parameter_group -> . VAR id_list COLON data_type_list
    (142) parameter_group -> . CONST id_list COLON data_type_list
    (143) parameter_group -> . procedure_header
    (144) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 303
    CONST           shift and go to state 304
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308

    parameter_list                 shift and go to state 300
    parameter_group                shift and go to state 301
    id_list                        shift and go to state 302
    procedure_header               shift and go to state 305
    function_header                shift and go to state 306

state 173

    (137) parameters -> empty .

    SEMICOLON       reduce using rule 137 (parameters -> empty .)
    COLON           reduce using rule 137 (parameters -> empty .)
    RPAREN          reduce using rule 137 (parameters -> empty .)


state 174

    (102) method_implementation -> FUNCTION ID DOT . ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 309


state 175

    (135) function_header -> FUNCTION ID parameters . COLON data_type_list

    COLON           shift and go to state 310


state 176

    (176) sentences_list -> sentences_list sentence SEMICOLON .

    END             reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    ID              reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    NEW             reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    DISPOSE         reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    BEGIN           reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    IF              reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    CASE            reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    WHILE           reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    REPEAT          reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    WITH            reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    GOTO            reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    NUMBER          reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    ASM             reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    LPAREN          reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    FOR             reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    SEMICOLON       reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)
    UNTIL           reduce using rule 176 (sentences_list -> sentences_list sentence SEMICOLON .)


state 177

    (193) assignment -> variable ASIGNATION expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 193 (assignment -> variable ASIGNATION expression .)
    ELSE            reduce using rule 193 (assignment -> variable ASIGNATION expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 178

    (195) assignment -> variable PLUS_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 195 (assignment -> variable PLUS_ASIGN expression .)
    ELSE            reduce using rule 195 (assignment -> variable PLUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 179

    (197) assignment -> variable MINUS_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 197 (assignment -> variable MINUS_ASIGN expression .)
    ELSE            reduce using rule 197 (assignment -> variable MINUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 180

    (199) assignment -> variable TIMES_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 199 (assignment -> variable TIMES_ASIGN expression .)
    ELSE            reduce using rule 199 (assignment -> variable TIMES_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 181

    (201) assignment -> variable DIVIDE_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 201 (assignment -> variable DIVIDE_ASIGN expression .)
    ELSE            reduce using rule 201 (assignment -> variable DIVIDE_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 182

    (205) procedure_call -> variable DOT ID . LPAREN call_argument_list_opt RPAREN
    (276) variable -> variable DOT ID .

    LPAREN          shift and go to state 311
    ASIGNATION      reduce using rule 276 (variable -> variable DOT ID .)
    PLUS_ASIGN      reduce using rule 276 (variable -> variable DOT ID .)
    MINUS_ASIGN     reduce using rule 276 (variable -> variable DOT ID .)
    TIMES_ASIGN     reduce using rule 276 (variable -> variable DOT ID .)
    DIVIDE_ASIGN    reduce using rule 276 (variable -> variable DOT ID .)
    DOT             reduce using rule 276 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 276 (variable -> variable DOT ID .)
    CARET           reduce using rule 276 (variable -> variable DOT ID .)


state 183

    (277) variable -> variable LBRACKET expression_list . RBRACKET
    (285) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 312
    COMMA           shift and go to state 313


state 184

    (284) expression_list -> expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 284 (expression_list -> expression .)
    COMMA           reduce using rule 284 (expression_list -> expression .)
    RPAREN          reduce using rule 284 (expression_list -> expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 185

    (194) assignment -> ID ASIGNATION expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 194 (assignment -> ID ASIGNATION expression .)
    ELSE            reduce using rule 194 (assignment -> ID ASIGNATION expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 186

    (196) assignment -> ID PLUS_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 196 (assignment -> ID PLUS_ASIGN expression .)
    ELSE            reduce using rule 196 (assignment -> ID PLUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 187

    (198) assignment -> ID MINUS_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 198 (assignment -> ID MINUS_ASIGN expression .)
    ELSE            reduce using rule 198 (assignment -> ID MINUS_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 188

    (200) assignment -> ID TIMES_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 200 (assignment -> ID TIMES_ASIGN expression .)
    ELSE            reduce using rule 200 (assignment -> ID TIMES_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 189

    (202) assignment -> ID DIVIDE_ASIGN expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 202 (assignment -> ID DIVIDE_ASIGN expression .)
    ELSE            reduce using rule 202 (assignment -> ID DIVIDE_ASIGN expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 190

    (204) procedure_call -> ID LPAREN call_argument_list_opt . RPAREN

    RPAREN          shift and go to state 314


state 191

    (44) call_argument_list_opt -> call_argument_list .
    (42) call_argument_list -> call_argument_list . COMMA call_argument

    RPAREN          reduce using rule 44 (call_argument_list_opt -> call_argument_list .)
    COMMA           shift and go to state 315


state 192

    (45) call_argument_list_opt -> empty .

    RPAREN          reduce using rule 45 (call_argument_list_opt -> empty .)


state 193

    (43) call_argument_list -> call_argument .

    COMMA           reduce using rule 43 (call_argument_list -> call_argument .)
    RPAREN          reduce using rule 43 (call_argument_list -> call_argument .)


state 194

    (39) call_argument -> expression .
    (40) call_argument -> expression . COLON expression
    (41) call_argument -> expression . COLON expression COLON expression
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    COMMA           reduce using rule 39 (call_argument -> expression .)
    RPAREN          reduce using rule 39 (call_argument -> expression .)
    COLON           shift and go to state 316
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 195

    (279) variable -> LPAREN variable RPAREN . CARET

    CARET           shift and go to state 317


state 196

    (276) variable -> variable DOT . ID

    ID              shift and go to state 318


state 197

    (206) procedure_call -> NEW LPAREN call_argument_list_opt . RPAREN

    RPAREN          shift and go to state 319


state 198

    (207) procedure_call -> DISPOSE LPAREN call_argument_list_opt . RPAREN

    RPAREN          shift and go to state 320


state 199

    (208) if_statement -> IF expression THEN . sentence
    (209) if_statement -> IF expression THEN . sentence ELSE sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 321
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 200

    (231) expression -> expression OR . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    simple_expression              shift and go to state 322
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 201

    (232) expression -> expression XOR . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    simple_expression              shift and go to state 323
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 202

    (234) simple_expression -> simple_expression AND . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    relational_expression          shift and go to state 324
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 203

    (236) relational_expression -> relational_expression relational_operator . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    additive_expression            shift and go to state 325
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 204

    (238) relational_operator -> EQUAL .

    NOT             reduce using rule 238 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 238 (relational_operator -> EQUAL .)
    PLUS            reduce using rule 238 (relational_operator -> EQUAL .)
    ADDRESS_OF      reduce using rule 238 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 238 (relational_operator -> EQUAL .)
    STRING          reduce using rule 238 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 238 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 238 (relational_operator -> EQUAL .)
    NIL             reduce using rule 238 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 238 (relational_operator -> EQUAL .)
    ID              reduce using rule 238 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 238 (relational_operator -> EQUAL .)


state 205

    (239) relational_operator -> DISTINT .

    NOT             reduce using rule 239 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 239 (relational_operator -> DISTINT .)
    PLUS            reduce using rule 239 (relational_operator -> DISTINT .)
    ADDRESS_OF      reduce using rule 239 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 239 (relational_operator -> DISTINT .)
    STRING          reduce using rule 239 (relational_operator -> DISTINT .)
    TRUE            reduce using rule 239 (relational_operator -> DISTINT .)
    FALSE           reduce using rule 239 (relational_operator -> DISTINT .)
    NIL             reduce using rule 239 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 239 (relational_operator -> DISTINT .)
    ID              reduce using rule 239 (relational_operator -> DISTINT .)
    LBRACKET        reduce using rule 239 (relational_operator -> DISTINT .)


state 206

    (240) relational_operator -> LESS .

    NOT             reduce using rule 240 (relational_operator -> LESS .)
    MINUS           reduce using rule 240 (relational_operator -> LESS .)
    PLUS            reduce using rule 240 (relational_operator -> LESS .)
    ADDRESS_OF      reduce using rule 240 (relational_operator -> LESS .)
    NUMBER          reduce using rule 240 (relational_operator -> LESS .)
    STRING          reduce using rule 240 (relational_operator -> LESS .)
    TRUE            reduce using rule 240 (relational_operator -> LESS .)
    FALSE           reduce using rule 240 (relational_operator -> LESS .)
    NIL             reduce using rule 240 (relational_operator -> LESS .)
    LPAREN          reduce using rule 240 (relational_operator -> LESS .)
    ID              reduce using rule 240 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 240 (relational_operator -> LESS .)


state 207

    (241) relational_operator -> LESSEQUAL .

    NOT             reduce using rule 241 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 241 (relational_operator -> LESSEQUAL .)
    PLUS            reduce using rule 241 (relational_operator -> LESSEQUAL .)
    ADDRESS_OF      reduce using rule 241 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 241 (relational_operator -> LESSEQUAL .)
    STRING          reduce using rule 241 (relational_operator -> LESSEQUAL .)
    TRUE            reduce using rule 241 (relational_operator -> LESSEQUAL .)
    FALSE           reduce using rule 241 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 241 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 241 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 241 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 241 (relational_operator -> LESSEQUAL .)


state 208

    (242) relational_operator -> GREATER .

    NOT             reduce using rule 242 (relational_operator -> GREATER .)
    MINUS           reduce using rule 242 (relational_operator -> GREATER .)
    PLUS            reduce using rule 242 (relational_operator -> GREATER .)
    ADDRESS_OF      reduce using rule 242 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 242 (relational_operator -> GREATER .)
    STRING          reduce using rule 242 (relational_operator -> GREATER .)
    TRUE            reduce using rule 242 (relational_operator -> GREATER .)
    FALSE           reduce using rule 242 (relational_operator -> GREATER .)
    NIL             reduce using rule 242 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 242 (relational_operator -> GREATER .)
    ID              reduce using rule 242 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 242 (relational_operator -> GREATER .)


state 209

    (243) relational_operator -> GREATEREQUAL .

    NOT             reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    PLUS            reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    ADDRESS_OF      reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    STRING          reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    TRUE            reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    FALSE           reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 243 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 243 (relational_operator -> GREATEREQUAL .)


state 210

    (244) relational_operator -> IN .

    NOT             reduce using rule 244 (relational_operator -> IN .)
    MINUS           reduce using rule 244 (relational_operator -> IN .)
    PLUS            reduce using rule 244 (relational_operator -> IN .)
    ADDRESS_OF      reduce using rule 244 (relational_operator -> IN .)
    NUMBER          reduce using rule 244 (relational_operator -> IN .)
    STRING          reduce using rule 244 (relational_operator -> IN .)
    TRUE            reduce using rule 244 (relational_operator -> IN .)
    FALSE           reduce using rule 244 (relational_operator -> IN .)
    NIL             reduce using rule 244 (relational_operator -> IN .)
    LPAREN          reduce using rule 244 (relational_operator -> IN .)
    ID              reduce using rule 244 (relational_operator -> IN .)
    LBRACKET        reduce using rule 244 (relational_operator -> IN .)


state 211

    (245) additive_expression -> additive_expression PLUS . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    multiplicative_expression      shift and go to state 326
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 212

    (246) additive_expression -> additive_expression MINUS . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    multiplicative_expression      shift and go to state 327
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 213

    (257) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    SHL             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    SHR             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DISTINT         reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    LESSEQUAL       reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    GREATEREQUAL    reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    IN              reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    THEN            reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    OF              reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DO              reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    COLON           reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DOBLEDOT        reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    TO              reduce using rule 257 (unary_expression -> PLUS unary_expression .)
    DOWNTO          reduce using rule 257 (unary_expression -> PLUS unary_expression .)


state 214

    (248) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 328
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 215

    (249) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 329
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 216

    (250) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 330
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 217

    (251) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 331
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 218

    (252) multiplicative_expression -> multiplicative_expression SHL . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 332
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 219

    (253) multiplicative_expression -> multiplicative_expression SHR . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    unary_expression               shift and go to state 333
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 220

    (256) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    SHL             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    SHR             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DISTINT         reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    LESSEQUAL       reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    GREATEREQUAL    reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    IN              reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    THEN            reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    OF              reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DO              reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DOBLEDOT        reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    TO              reduce using rule 256 (unary_expression -> MINUS unary_expression .)
    DOWNTO          reduce using rule 256 (unary_expression -> MINUS unary_expression .)


state 221

    (255) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    SHL             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    SHR             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 255 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 255 (unary_expression -> NOT unary_expression .)
    EQUAL           reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DISTINT         reduce using rule 255 (unary_expression -> NOT unary_expression .)
    LESS            reduce using rule 255 (unary_expression -> NOT unary_expression .)
    LESSEQUAL       reduce using rule 255 (unary_expression -> NOT unary_expression .)
    GREATER         reduce using rule 255 (unary_expression -> NOT unary_expression .)
    GREATEREQUAL    reduce using rule 255 (unary_expression -> NOT unary_expression .)
    IN              reduce using rule 255 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    THEN            reduce using rule 255 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 255 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 255 (unary_expression -> NOT unary_expression .)
    OF              reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DO              reduce using rule 255 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 255 (unary_expression -> NOT unary_expression .)
    ELSE            reduce using rule 255 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 255 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 255 (unary_expression -> NOT unary_expression .)
    COLON           reduce using rule 255 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DOBLEDOT        reduce using rule 255 (unary_expression -> NOT unary_expression .)
    TO              reduce using rule 255 (unary_expression -> NOT unary_expression .)
    DOWNTO          reduce using rule 255 (unary_expression -> NOT unary_expression .)


state 222

    (258) unary_expression -> ADDRESS_OF unary_expression .

    TIMES           reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DIVIDE          reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DIV             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    MOD             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    SHL             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    SHR             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    PLUS            reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    MINUS           reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    EQUAL           reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DISTINT         reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    LESS            reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    LESSEQUAL       reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATER         reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATEREQUAL    reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    IN              reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    AND             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    THEN            reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    OR              reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    XOR             reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    OF              reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DO              reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    SEMICOLON       reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    ELSE            reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    RBRACKET        reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    COMMA           reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    COLON           reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    RPAREN          reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DOBLEDOT        reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    TO              reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)
    DOWNTO          reduce using rule 258 (unary_expression -> ADDRESS_OF unary_expression .)


state 223

    (276) variable -> variable DOT . ID
    (282) function_call -> variable DOT . ID LPAREN expression_list RPAREN
    (283) function_call -> variable DOT . ID LPAREN RPAREN

    ID              shift and go to state 334


state 224

    (279) variable -> LPAREN . variable RPAREN CARET
    (266) primary_expression -> LPAREN . expression RPAREN
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 138
    LPAREN          shift and go to state 224
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 226
    expression                     shift and go to state 225
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 225

    (266) primary_expression -> LPAREN expression . RPAREN
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    RPAREN          shift and go to state 335
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 226

    (279) variable -> LPAREN variable . RPAREN CARET
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET
    (260) primary_expression -> variable .
    (282) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (283) function_call -> variable . DOT ID LPAREN RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 195
    DOT             shift and go to state 223
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107
    TIMES           reduce using rule 260 (primary_expression -> variable .)
    DIVIDE          reduce using rule 260 (primary_expression -> variable .)
    DIV             reduce using rule 260 (primary_expression -> variable .)
    MOD             reduce using rule 260 (primary_expression -> variable .)
    SHL             reduce using rule 260 (primary_expression -> variable .)
    SHR             reduce using rule 260 (primary_expression -> variable .)
    PLUS            reduce using rule 260 (primary_expression -> variable .)
    MINUS           reduce using rule 260 (primary_expression -> variable .)
    EQUAL           reduce using rule 260 (primary_expression -> variable .)
    DISTINT         reduce using rule 260 (primary_expression -> variable .)
    LESS            reduce using rule 260 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 260 (primary_expression -> variable .)
    GREATER         reduce using rule 260 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 260 (primary_expression -> variable .)
    IN              reduce using rule 260 (primary_expression -> variable .)
    AND             reduce using rule 260 (primary_expression -> variable .)
    OR              reduce using rule 260 (primary_expression -> variable .)
    XOR             reduce using rule 260 (primary_expression -> variable .)

  ! RPAREN          [ reduce using rule 260 (primary_expression -> variable .) ]


state 227

    (280) function_call -> ID LPAREN . expression_list RPAREN
    (281) function_call -> ID LPAREN . RPAREN
    (284) expression_list -> . expression
    (285) expression_list -> . expression_list COMMA expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 337
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression_list                shift and go to state 336
    expression                     shift and go to state 184
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 228

    (273) set_constructor -> LBRACKET set_item_list . RBRACKET
    (272) set_item_list -> set_item_list . COMMA set_item

    RBRACKET        shift and go to state 338
    COMMA           shift and go to state 339


state 229

    (274) set_constructor -> LBRACKET RBRACKET .

    TIMES           reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DIV             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    MOD             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    SHL             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    SHR             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DISTINT         reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    LESS            reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    IN              reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    AND             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    THEN            reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    OR              reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    XOR             reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    OF              reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DO              reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    COLON           reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DOBLEDOT        reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    TO              reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)
    DOWNTO          reduce using rule 274 (set_constructor -> LBRACKET RBRACKET .)


state 230

    (271) set_item_list -> set_item .

    RBRACKET        reduce using rule 271 (set_item_list -> set_item .)
    COMMA           reduce using rule 271 (set_item_list -> set_item .)


state 231

    (269) set_item -> expression .
    (270) set_item -> expression . DOBLEDOT expression
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 269 (set_item -> expression .)
    COMMA           reduce using rule 269 (set_item -> expression .)
    DOBLEDOT        shift and go to state 340
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 232

    (210) case_statement -> CASE expression OF . case_list END
    (211) case_statement -> CASE expression OF . case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> CASE expression OF . case_list ELSE sentences_list END
    (213) case_list -> . case_list case_label COLON sentence SEMICOLON
    (214) case_list -> . case_label COLON sentence SEMICOLON
    (215) case_list -> . empty
    (216) case_label -> . constant
    (217) case_label -> . constant DOBLEDOT constant
    (218) case_label -> . case_label COMMA constant
    (230) empty -> .
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for ORDINAL_CONSTANT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    END             reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

  ! NUMBER          [ reduce using rule 230 (empty -> .) ]
  ! STRING          [ reduce using rule 230 (empty -> .) ]
  ! TRUE            [ reduce using rule 230 (empty -> .) ]
  ! FALSE           [ reduce using rule 230 (empty -> .) ]
  ! NIL             [ reduce using rule 230 (empty -> .) ]
  ! ORDINAL_CONSTANT [ reduce using rule 230 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 230 (empty -> .) ]

    case_list                      shift and go to state 341
    case_label                     shift and go to state 342
    empty                          shift and go to state 343
    constant                       shift and go to state 344
    set_constructor                shift and go to state 248

state 233

    (220) for_statement -> for_control_variable_setup ASIGNATION expression . TO expression DO sentence
    (221) for_statement -> for_control_variable_setup ASIGNATION expression . DOWNTO expression DO sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    TO              shift and go to state 345
    DOWNTO          shift and go to state 346
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 234

    (222) for_statement -> for_control_variable_setup IN expression . DO sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    DO              shift and go to state 347
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 235

    (223) while_statement -> WHILE expression DO . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 348
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 236

    (224) repeat_statement -> REPEAT sentences_list UNTIL . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 349
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 237

    (225) with_statement -> WITH variable_list DO . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 350
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 238

    (227) variable_list -> variable_list COMMA . variable
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 115
    LPAREN          shift and go to state 63

    variable                       shift and go to state 351

state 239

    (229) labeled_sentence -> NUMBER COLON sentence .

    SEMICOLON       reduce using rule 229 (labeled_sentence -> NUMBER COLON sentence .)
    ELSE            reduce using rule 229 (labeled_sentence -> NUMBER COLON sentence .)


state 240

    (26) number_list -> number_list COMMA NUMBER .

    SEMICOLON       reduce using rule 26 (number_list -> number_list COMMA NUMBER .)
    COMMA           reduce using rule 26 (number_list -> number_list COMMA NUMBER .)


state 241

    (30) const_declaration -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 352


state 242

    (32) constant -> NUMBER .

    SEMICOLON       reduce using rule 32 (constant -> NUMBER .)
    DOBLEDOT        reduce using rule 32 (constant -> NUMBER .)
    COLON           reduce using rule 32 (constant -> NUMBER .)
    COMMA           reduce using rule 32 (constant -> NUMBER .)


state 243

    (33) constant -> STRING .

    SEMICOLON       reduce using rule 33 (constant -> STRING .)
    DOBLEDOT        reduce using rule 33 (constant -> STRING .)
    COLON           reduce using rule 33 (constant -> STRING .)
    COMMA           reduce using rule 33 (constant -> STRING .)


state 244

    (34) constant -> TRUE .

    SEMICOLON       reduce using rule 34 (constant -> TRUE .)
    DOBLEDOT        reduce using rule 34 (constant -> TRUE .)
    COLON           reduce using rule 34 (constant -> TRUE .)
    COMMA           reduce using rule 34 (constant -> TRUE .)


state 245

    (35) constant -> FALSE .

    SEMICOLON       reduce using rule 35 (constant -> FALSE .)
    DOBLEDOT        reduce using rule 35 (constant -> FALSE .)
    COLON           reduce using rule 35 (constant -> FALSE .)
    COMMA           reduce using rule 35 (constant -> FALSE .)


state 246

    (36) constant -> NIL .

    SEMICOLON       reduce using rule 36 (constant -> NIL .)
    DOBLEDOT        reduce using rule 36 (constant -> NIL .)
    COLON           reduce using rule 36 (constant -> NIL .)
    COMMA           reduce using rule 36 (constant -> NIL .)


state 247

    (37) constant -> ORDINAL_CONSTANT .

    SEMICOLON       reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    DOBLEDOT        reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COLON           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COMMA           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)


state 248

    (38) constant -> set_constructor .

    SEMICOLON       reduce using rule 38 (constant -> set_constructor .)
    DOBLEDOT        reduce using rule 38 (constant -> set_constructor .)
    COLON           reduce using rule 38 (constant -> set_constructor .)
    COMMA           reduce using rule 38 (constant -> set_constructor .)


state 249

    (159) data_type_list -> ID .

    EQUAL           reduce using rule 159 (data_type_list -> ID .)
    SEMICOLON       reduce using rule 159 (data_type_list -> ID .)
    RPAREN          reduce using rule 159 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 159 (data_type_list -> ID .)
    END             reduce using rule 159 (data_type_list -> ID .)
    CASE            reduce using rule 159 (data_type_list -> ID .)
    ID              reduce using rule 159 (data_type_list -> ID .)
    OF              reduce using rule 159 (data_type_list -> ID .)


state 250

    (31) const_declaration -> ID COLON data_type_list . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 353


state 251

    (145) data_type_list -> INTEGER .

    EQUAL           reduce using rule 145 (data_type_list -> INTEGER .)
    SEMICOLON       reduce using rule 145 (data_type_list -> INTEGER .)
    ABSOLUTE        reduce using rule 145 (data_type_list -> INTEGER .)
    RPAREN          reduce using rule 145 (data_type_list -> INTEGER .)
    END             reduce using rule 145 (data_type_list -> INTEGER .)
    CASE            reduce using rule 145 (data_type_list -> INTEGER .)
    ID              reduce using rule 145 (data_type_list -> INTEGER .)
    OF              reduce using rule 145 (data_type_list -> INTEGER .)


state 252

    (146) data_type_list -> BYTE .

    EQUAL           reduce using rule 146 (data_type_list -> BYTE .)
    SEMICOLON       reduce using rule 146 (data_type_list -> BYTE .)
    ABSOLUTE        reduce using rule 146 (data_type_list -> BYTE .)
    RPAREN          reduce using rule 146 (data_type_list -> BYTE .)
    END             reduce using rule 146 (data_type_list -> BYTE .)
    CASE            reduce using rule 146 (data_type_list -> BYTE .)
    ID              reduce using rule 146 (data_type_list -> BYTE .)
    OF              reduce using rule 146 (data_type_list -> BYTE .)


state 253

    (147) data_type_list -> LONGINT .

    EQUAL           reduce using rule 147 (data_type_list -> LONGINT .)
    SEMICOLON       reduce using rule 147 (data_type_list -> LONGINT .)
    ABSOLUTE        reduce using rule 147 (data_type_list -> LONGINT .)
    RPAREN          reduce using rule 147 (data_type_list -> LONGINT .)
    END             reduce using rule 147 (data_type_list -> LONGINT .)
    CASE            reduce using rule 147 (data_type_list -> LONGINT .)
    ID              reduce using rule 147 (data_type_list -> LONGINT .)
    OF              reduce using rule 147 (data_type_list -> LONGINT .)


state 254

    (148) data_type_list -> SHORTINT .

    EQUAL           reduce using rule 148 (data_type_list -> SHORTINT .)
    SEMICOLON       reduce using rule 148 (data_type_list -> SHORTINT .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> SHORTINT .)
    RPAREN          reduce using rule 148 (data_type_list -> SHORTINT .)
    END             reduce using rule 148 (data_type_list -> SHORTINT .)
    CASE            reduce using rule 148 (data_type_list -> SHORTINT .)
    ID              reduce using rule 148 (data_type_list -> SHORTINT .)
    OF              reduce using rule 148 (data_type_list -> SHORTINT .)


state 255

    (149) data_type_list -> WORD .

    EQUAL           reduce using rule 149 (data_type_list -> WORD .)
    SEMICOLON       reduce using rule 149 (data_type_list -> WORD .)
    ABSOLUTE        reduce using rule 149 (data_type_list -> WORD .)
    RPAREN          reduce using rule 149 (data_type_list -> WORD .)
    END             reduce using rule 149 (data_type_list -> WORD .)
    CASE            reduce using rule 149 (data_type_list -> WORD .)
    ID              reduce using rule 149 (data_type_list -> WORD .)
    OF              reduce using rule 149 (data_type_list -> WORD .)


state 256

    (150) data_type_list -> REAL .

    EQUAL           reduce using rule 150 (data_type_list -> REAL .)
    SEMICOLON       reduce using rule 150 (data_type_list -> REAL .)
    ABSOLUTE        reduce using rule 150 (data_type_list -> REAL .)
    RPAREN          reduce using rule 150 (data_type_list -> REAL .)
    END             reduce using rule 150 (data_type_list -> REAL .)
    CASE            reduce using rule 150 (data_type_list -> REAL .)
    ID              reduce using rule 150 (data_type_list -> REAL .)
    OF              reduce using rule 150 (data_type_list -> REAL .)


state 257

    (151) data_type_list -> SINGLE .

    EQUAL           reduce using rule 151 (data_type_list -> SINGLE .)
    SEMICOLON       reduce using rule 151 (data_type_list -> SINGLE .)
    ABSOLUTE        reduce using rule 151 (data_type_list -> SINGLE .)
    RPAREN          reduce using rule 151 (data_type_list -> SINGLE .)
    END             reduce using rule 151 (data_type_list -> SINGLE .)
    CASE            reduce using rule 151 (data_type_list -> SINGLE .)
    ID              reduce using rule 151 (data_type_list -> SINGLE .)
    OF              reduce using rule 151 (data_type_list -> SINGLE .)


state 258

    (152) data_type_list -> DOUBLE .

    EQUAL           reduce using rule 152 (data_type_list -> DOUBLE .)
    SEMICOLON       reduce using rule 152 (data_type_list -> DOUBLE .)
    ABSOLUTE        reduce using rule 152 (data_type_list -> DOUBLE .)
    RPAREN          reduce using rule 152 (data_type_list -> DOUBLE .)
    END             reduce using rule 152 (data_type_list -> DOUBLE .)
    CASE            reduce using rule 152 (data_type_list -> DOUBLE .)
    ID              reduce using rule 152 (data_type_list -> DOUBLE .)
    OF              reduce using rule 152 (data_type_list -> DOUBLE .)


state 259

    (153) data_type_list -> EXTENDED .

    EQUAL           reduce using rule 153 (data_type_list -> EXTENDED .)
    SEMICOLON       reduce using rule 153 (data_type_list -> EXTENDED .)
    ABSOLUTE        reduce using rule 153 (data_type_list -> EXTENDED .)
    RPAREN          reduce using rule 153 (data_type_list -> EXTENDED .)
    END             reduce using rule 153 (data_type_list -> EXTENDED .)
    CASE            reduce using rule 153 (data_type_list -> EXTENDED .)
    ID              reduce using rule 153 (data_type_list -> EXTENDED .)
    OF              reduce using rule 153 (data_type_list -> EXTENDED .)


state 260

    (154) data_type_list -> SHORT .

    EQUAL           reduce using rule 154 (data_type_list -> SHORT .)
    SEMICOLON       reduce using rule 154 (data_type_list -> SHORT .)
    ABSOLUTE        reduce using rule 154 (data_type_list -> SHORT .)
    RPAREN          reduce using rule 154 (data_type_list -> SHORT .)
    END             reduce using rule 154 (data_type_list -> SHORT .)
    CASE            reduce using rule 154 (data_type_list -> SHORT .)
    ID              reduce using rule 154 (data_type_list -> SHORT .)
    OF              reduce using rule 154 (data_type_list -> SHORT .)


state 261

    (155) data_type_list -> BOOLEAN .

    EQUAL           reduce using rule 155 (data_type_list -> BOOLEAN .)
    SEMICOLON       reduce using rule 155 (data_type_list -> BOOLEAN .)
    ABSOLUTE        reduce using rule 155 (data_type_list -> BOOLEAN .)
    RPAREN          reduce using rule 155 (data_type_list -> BOOLEAN .)
    END             reduce using rule 155 (data_type_list -> BOOLEAN .)
    CASE            reduce using rule 155 (data_type_list -> BOOLEAN .)
    ID              reduce using rule 155 (data_type_list -> BOOLEAN .)
    OF              reduce using rule 155 (data_type_list -> BOOLEAN .)


state 262

    (156) data_type_list -> CHAR .

    EQUAL           reduce using rule 156 (data_type_list -> CHAR .)
    SEMICOLON       reduce using rule 156 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 156 (data_type_list -> CHAR .)
    RPAREN          reduce using rule 156 (data_type_list -> CHAR .)
    END             reduce using rule 156 (data_type_list -> CHAR .)
    CASE            reduce using rule 156 (data_type_list -> CHAR .)
    ID              reduce using rule 156 (data_type_list -> CHAR .)
    OF              reduce using rule 156 (data_type_list -> CHAR .)


state 263

    (157) data_type_list -> STRING .
    (158) data_type_list -> STRING . LBRACKET NUMBER RBRACKET
    (62) string_type -> STRING .
    (63) string_type -> STRING . LBRACKET NUMBER RBRACKET

  ! reduce/reduce conflict for EQUAL resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for CASE resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 62 (string_type -> STRING .)
  ! reduce/reduce conflict for OF resolved using rule 62 (string_type -> STRING .)
    LBRACKET        shift and go to state 354
    EQUAL           reduce using rule 62 (string_type -> STRING .)
    SEMICOLON       reduce using rule 62 (string_type -> STRING .)
    ABSOLUTE        reduce using rule 62 (string_type -> STRING .)
    RPAREN          reduce using rule 62 (string_type -> STRING .)
    END             reduce using rule 62 (string_type -> STRING .)
    CASE            reduce using rule 62 (string_type -> STRING .)
    ID              reduce using rule 62 (string_type -> STRING .)
    OF              reduce using rule 62 (string_type -> STRING .)

  ! EQUAL           [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! ABSOLUTE        [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! RPAREN          [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! END             [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! CASE            [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! ID              [ reduce using rule 157 (data_type_list -> STRING .) ]
  ! OF              [ reduce using rule 157 (data_type_list -> STRING .) ]


state 264

    (160) data_type_list -> ABSOLUTE . ID

    ID              shift and go to state 355


state 265

    (161) data_type_list -> FILE .
    (84) file_type -> FILE . OF data_type_list
    (85) file_type -> FILE .

  ! shift/reduce conflict for OF resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for END resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for CASE resolved using rule 85 (file_type -> FILE .)
  ! reduce/reduce conflict for ID resolved using rule 85 (file_type -> FILE .)
  ! shift/reduce conflict for OF resolved as shift
    OF              shift and go to state 356
    EQUAL           reduce using rule 85 (file_type -> FILE .)
    SEMICOLON       reduce using rule 85 (file_type -> FILE .)
    ABSOLUTE        reduce using rule 85 (file_type -> FILE .)
    RPAREN          reduce using rule 85 (file_type -> FILE .)
    END             reduce using rule 85 (file_type -> FILE .)
    CASE            reduce using rule 85 (file_type -> FILE .)
    ID              reduce using rule 85 (file_type -> FILE .)

  ! EQUAL           [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! SEMICOLON       [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! ABSOLUTE        [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! RPAREN          [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! END             [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! CASE            [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! ID              [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 161 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 85 (file_type -> FILE .) ]


state 266

    (162) data_type_list -> array_type .

    EQUAL           reduce using rule 162 (data_type_list -> array_type .)
    SEMICOLON       reduce using rule 162 (data_type_list -> array_type .)
    ABSOLUTE        reduce using rule 162 (data_type_list -> array_type .)
    RPAREN          reduce using rule 162 (data_type_list -> array_type .)
    END             reduce using rule 162 (data_type_list -> array_type .)
    CASE            reduce using rule 162 (data_type_list -> array_type .)
    ID              reduce using rule 162 (data_type_list -> array_type .)
    OF              reduce using rule 162 (data_type_list -> array_type .)


state 267

    (163) data_type_list -> pointer_type .

    EQUAL           reduce using rule 163 (data_type_list -> pointer_type .)
    SEMICOLON       reduce using rule 163 (data_type_list -> pointer_type .)
    ABSOLUTE        reduce using rule 163 (data_type_list -> pointer_type .)
    RPAREN          reduce using rule 163 (data_type_list -> pointer_type .)
    END             reduce using rule 163 (data_type_list -> pointer_type .)
    CASE            reduce using rule 163 (data_type_list -> pointer_type .)
    ID              reduce using rule 163 (data_type_list -> pointer_type .)
    OF              reduce using rule 163 (data_type_list -> pointer_type .)


state 268

    (164) data_type_list -> record_type .

    EQUAL           reduce using rule 164 (data_type_list -> record_type .)
    SEMICOLON       reduce using rule 164 (data_type_list -> record_type .)
    ABSOLUTE        reduce using rule 164 (data_type_list -> record_type .)
    RPAREN          reduce using rule 164 (data_type_list -> record_type .)
    END             reduce using rule 164 (data_type_list -> record_type .)
    CASE            reduce using rule 164 (data_type_list -> record_type .)
    ID              reduce using rule 164 (data_type_list -> record_type .)
    OF              reduce using rule 164 (data_type_list -> record_type .)


state 269

    (165) data_type_list -> set_type .

    EQUAL           reduce using rule 165 (data_type_list -> set_type .)
    SEMICOLON       reduce using rule 165 (data_type_list -> set_type .)
    ABSOLUTE        reduce using rule 165 (data_type_list -> set_type .)
    RPAREN          reduce using rule 165 (data_type_list -> set_type .)
    END             reduce using rule 165 (data_type_list -> set_type .)
    CASE            reduce using rule 165 (data_type_list -> set_type .)
    ID              reduce using rule 165 (data_type_list -> set_type .)
    OF              reduce using rule 165 (data_type_list -> set_type .)


state 270

    (166) data_type_list -> file_type .

    EQUAL           reduce using rule 166 (data_type_list -> file_type .)
    SEMICOLON       reduce using rule 166 (data_type_list -> file_type .)
    ABSOLUTE        reduce using rule 166 (data_type_list -> file_type .)
    RPAREN          reduce using rule 166 (data_type_list -> file_type .)
    END             reduce using rule 166 (data_type_list -> file_type .)
    CASE            reduce using rule 166 (data_type_list -> file_type .)
    ID              reduce using rule 166 (data_type_list -> file_type .)
    OF              reduce using rule 166 (data_type_list -> file_type .)


state 271

    (167) data_type_list -> object_type .

    EQUAL           reduce using rule 167 (data_type_list -> object_type .)
    SEMICOLON       reduce using rule 167 (data_type_list -> object_type .)
    ABSOLUTE        reduce using rule 167 (data_type_list -> object_type .)
    RPAREN          reduce using rule 167 (data_type_list -> object_type .)
    END             reduce using rule 167 (data_type_list -> object_type .)
    CASE            reduce using rule 167 (data_type_list -> object_type .)
    ID              reduce using rule 167 (data_type_list -> object_type .)
    OF              reduce using rule 167 (data_type_list -> object_type .)


state 272

    (168) data_type_list -> string_type .

    EQUAL           reduce using rule 168 (data_type_list -> string_type .)
    SEMICOLON       reduce using rule 168 (data_type_list -> string_type .)
    ABSOLUTE        reduce using rule 168 (data_type_list -> string_type .)
    RPAREN          reduce using rule 168 (data_type_list -> string_type .)
    END             reduce using rule 168 (data_type_list -> string_type .)
    CASE            reduce using rule 168 (data_type_list -> string_type .)
    ID              reduce using rule 168 (data_type_list -> string_type .)
    OF              reduce using rule 168 (data_type_list -> string_type .)


state 273

    (66) array_type -> ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> ARRAY . OF data_type_list

    LBRACKET        shift and go to state 357
    OF              shift and go to state 358


state 274

    (67) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (65) record_type -> PACKED . RECORD record_list END

    ARRAY           shift and go to state 359
    RECORD          shift and go to state 360


state 275

    (82) pointer_type -> CARET . ID
    (83) pointer_type -> CARET . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    ID              shift and go to state 361
    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 362
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 276

    (64) record_type -> RECORD . record_list END
    (107) record_list -> . record_list record_declaration
    (108) record_list -> . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_list                    shift and go to state 363
    record_declaration             shift and go to state 364
    id_list                        shift and go to state 365

state 277

    (81) set_type -> SET . OF set_range

    OF              shift and go to state 367


state 278

    (86) object_type -> OBJECT . object_heritage object_fields object_methods END
    (87) object_heritage -> . LPAREN ID RPAREN
    (88) object_heritage -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 369
    ID              reduce using rule 230 (empty -> .)
    END             reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)

    object_heritage                shift and go to state 368
    empty                          shift and go to state 370

state 279

    (54) type_definition -> ID . DOBLEDOT ID
    (159) data_type_list -> ID .

    DOBLEDOT        shift and go to state 371
    SEMICOLON       reduce using rule 159 (data_type_list -> ID .)
    EQUAL           reduce using rule 159 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 159 (data_type_list -> ID .)


state 280

    (49) type_declaration -> ID EQUAL type_definition . SEMICOLON

    SEMICOLON       shift and go to state 372


state 281

    (50) type_definition -> data_type_list .

    SEMICOLON       reduce using rule 50 (type_definition -> data_type_list .)
    EQUAL           reduce using rule 50 (type_definition -> data_type_list .)
    ABSOLUTE        reduce using rule 50 (type_definition -> data_type_list .)


state 282

    (51) type_definition -> LPAREN . id_list RPAREN
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 373

state 283

    (52) type_definition -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 374


state 284

    (53) type_definition -> CHAR . DOBLEDOT CHAR
    (156) data_type_list -> CHAR .

    DOBLEDOT        shift and go to state 375
    SEMICOLON       reduce using rule 156 (data_type_list -> CHAR .)
    EQUAL           reduce using rule 156 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 156 (data_type_list -> CHAR .)


state 285

    (55) type_definition -> record_type .
    (164) data_type_list -> record_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (type_definition -> record_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 55 (type_definition -> record_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 55 (type_definition -> record_type .)
    SEMICOLON       reduce using rule 55 (type_definition -> record_type .)
    EQUAL           reduce using rule 55 (type_definition -> record_type .)
    ABSOLUTE        reduce using rule 55 (type_definition -> record_type .)

  ! SEMICOLON       [ reduce using rule 164 (data_type_list -> record_type .) ]
  ! EQUAL           [ reduce using rule 164 (data_type_list -> record_type .) ]
  ! ABSOLUTE        [ reduce using rule 164 (data_type_list -> record_type .) ]


state 286

    (56) type_definition -> array_type .
    (162) data_type_list -> array_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (type_definition -> array_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 56 (type_definition -> array_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 56 (type_definition -> array_type .)
    SEMICOLON       reduce using rule 56 (type_definition -> array_type .)
    EQUAL           reduce using rule 56 (type_definition -> array_type .)
    ABSOLUTE        reduce using rule 56 (type_definition -> array_type .)

  ! SEMICOLON       [ reduce using rule 162 (data_type_list -> array_type .) ]
  ! EQUAL           [ reduce using rule 162 (data_type_list -> array_type .) ]
  ! ABSOLUTE        [ reduce using rule 162 (data_type_list -> array_type .) ]


state 287

    (57) type_definition -> set_type .
    (165) data_type_list -> set_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (type_definition -> set_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 57 (type_definition -> set_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 57 (type_definition -> set_type .)
    SEMICOLON       reduce using rule 57 (type_definition -> set_type .)
    EQUAL           reduce using rule 57 (type_definition -> set_type .)
    ABSOLUTE        reduce using rule 57 (type_definition -> set_type .)

  ! SEMICOLON       [ reduce using rule 165 (data_type_list -> set_type .) ]
  ! EQUAL           [ reduce using rule 165 (data_type_list -> set_type .) ]
  ! ABSOLUTE        [ reduce using rule 165 (data_type_list -> set_type .) ]


state 288

    (58) type_definition -> pointer_type .
    (163) data_type_list -> pointer_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 58 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 58 (type_definition -> pointer_type .)
    SEMICOLON       reduce using rule 58 (type_definition -> pointer_type .)
    EQUAL           reduce using rule 58 (type_definition -> pointer_type .)
    ABSOLUTE        reduce using rule 58 (type_definition -> pointer_type .)

  ! SEMICOLON       [ reduce using rule 163 (data_type_list -> pointer_type .) ]
  ! EQUAL           [ reduce using rule 163 (data_type_list -> pointer_type .) ]
  ! ABSOLUTE        [ reduce using rule 163 (data_type_list -> pointer_type .) ]


state 289

    (59) type_definition -> file_type .
    (166) data_type_list -> file_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (type_definition -> file_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 59 (type_definition -> file_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 59 (type_definition -> file_type .)
    SEMICOLON       reduce using rule 59 (type_definition -> file_type .)
    EQUAL           reduce using rule 59 (type_definition -> file_type .)
    ABSOLUTE        reduce using rule 59 (type_definition -> file_type .)

  ! SEMICOLON       [ reduce using rule 166 (data_type_list -> file_type .) ]
  ! EQUAL           [ reduce using rule 166 (data_type_list -> file_type .) ]
  ! ABSOLUTE        [ reduce using rule 166 (data_type_list -> file_type .) ]


state 290

    (60) type_definition -> object_type .
    (167) data_type_list -> object_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (type_definition -> object_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 60 (type_definition -> object_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 60 (type_definition -> object_type .)
    SEMICOLON       reduce using rule 60 (type_definition -> object_type .)
    EQUAL           reduce using rule 60 (type_definition -> object_type .)
    ABSOLUTE        reduce using rule 60 (type_definition -> object_type .)

  ! SEMICOLON       [ reduce using rule 167 (data_type_list -> object_type .) ]
  ! EQUAL           [ reduce using rule 167 (data_type_list -> object_type .) ]
  ! ABSOLUTE        [ reduce using rule 167 (data_type_list -> object_type .) ]


state 291

    (61) type_definition -> string_type .
    (168) data_type_list -> string_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (type_definition -> string_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 61 (type_definition -> string_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 61 (type_definition -> string_type .)
    SEMICOLON       reduce using rule 61 (type_definition -> string_type .)
    EQUAL           reduce using rule 61 (type_definition -> string_type .)
    ABSOLUTE        reduce using rule 61 (type_definition -> string_type .)

  ! SEMICOLON       [ reduce using rule 168 (data_type_list -> string_type .) ]
  ! EQUAL           [ reduce using rule 168 (data_type_list -> string_type .) ]
  ! ABSOLUTE        [ reduce using rule 168 (data_type_list -> string_type .) ]


state 292

    (65) record_type -> PACKED . RECORD record_list END
    (67) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list

    RECORD          shift and go to state 360
    ARRAY           shift and go to state 359


state 293

    (121) var_declaration -> id_list COLON type_definition . SEMICOLON
    (122) var_declaration -> id_list COLON type_definition . EQUAL expression SEMICOLON
    (123) var_declaration -> id_list COLON type_definition . ABSOLUTE ID SEMICOLON

    SEMICOLON       shift and go to state 376
    EQUAL           shift and go to state 377
    ABSOLUTE        shift and go to state 378


state 294

    (125) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 379


state 295

    (129) directive -> EXTERNAL STRING .

    BEGIN           reduce using rule 129 (directive -> EXTERNAL STRING .)
    LABEL           reduce using rule 129 (directive -> EXTERNAL STRING .)
    CONST           reduce using rule 129 (directive -> EXTERNAL STRING .)
    TYPE            reduce using rule 129 (directive -> EXTERNAL STRING .)
    VAR             reduce using rule 129 (directive -> EXTERNAL STRING .)
    CONSTRUCTOR     reduce using rule 129 (directive -> EXTERNAL STRING .)
    DESTRUCTOR      reduce using rule 129 (directive -> EXTERNAL STRING .)
    PROCEDURE       reduce using rule 129 (directive -> EXTERNAL STRING .)
    FUNCTION        reduce using rule 129 (directive -> EXTERNAL STRING .)
    IMPLEMENTATION  reduce using rule 129 (directive -> EXTERNAL STRING .)
    INTERFACE       reduce using rule 129 (directive -> EXTERNAL STRING .)
    END             reduce using rule 129 (directive -> EXTERNAL STRING .)


state 296

    (134) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 380


state 297

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 381
    empty                          shift and go to state 173

state 298

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 382
    empty                          shift and go to state 173

state 299

    (101) method_implementation -> PROCEDURE ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 383
    empty                          shift and go to state 173

state 300

    (136) parameters -> LPAREN parameter_list . RPAREN
    (138) parameter_list -> parameter_list . SEMICOLON parameter_group

    RPAREN          shift and go to state 384
    SEMICOLON       shift and go to state 385


state 301

    (139) parameter_list -> parameter_group .

    RPAREN          reduce using rule 139 (parameter_list -> parameter_group .)
    SEMICOLON       reduce using rule 139 (parameter_list -> parameter_group .)


state 302

    (140) parameter_group -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 386
    COMMA           shift and go to state 44


state 303

    (141) parameter_group -> VAR . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 387

state 304

    (142) parameter_group -> CONST . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 388

state 305

    (143) parameter_group -> procedure_header .

    RPAREN          reduce using rule 143 (parameter_group -> procedure_header .)
    SEMICOLON       reduce using rule 143 (parameter_group -> procedure_header .)


state 306

    (144) parameter_group -> function_header .

    RPAREN          reduce using rule 144 (parameter_group -> function_header .)
    SEMICOLON       reduce using rule 144 (parameter_group -> function_header .)


state 307

    (126) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 389


state 308

    (135) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 390


state 309

    (102) method_implementation -> FUNCTION ID DOT ID . parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    COLON           reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 391
    empty                          shift and go to state 173

state 310

    (135) function_header -> FUNCTION ID parameters COLON . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 392
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 311

    (205) procedure_call -> variable DOT ID LPAREN . call_argument_list_opt RPAREN
    (44) call_argument_list_opt -> . call_argument_list
    (45) call_argument_list_opt -> . empty
    (42) call_argument_list -> . call_argument_list COMMA call_argument
    (43) call_argument_list -> . call_argument
    (230) empty -> .
    (39) call_argument -> . expression
    (40) call_argument -> . expression COLON expression
    (41) call_argument -> . expression COLON expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          reduce using rule 230 (empty -> .)
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    call_argument_list_opt         shift and go to state 393
    call_argument_list             shift and go to state 191
    empty                          shift and go to state 192
    call_argument                  shift and go to state 193
    expression                     shift and go to state 194
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 312

    (277) variable -> variable LBRACKET expression_list RBRACKET .

    ASIGNATION      reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS_ASIGN      reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS_ASIGN     reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES_ASIGN     reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE_ASIGN    reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    CARET           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DISTINT         reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOBLEDOT        reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 277 (variable -> variable LBRACKET expression_list RBRACKET .)


state 313

    (285) expression_list -> expression_list COMMA . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 394
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 314

    (204) procedure_call -> ID LPAREN call_argument_list_opt RPAREN .

    SEMICOLON       reduce using rule 204 (procedure_call -> ID LPAREN call_argument_list_opt RPAREN .)
    ELSE            reduce using rule 204 (procedure_call -> ID LPAREN call_argument_list_opt RPAREN .)


state 315

    (42) call_argument_list -> call_argument_list COMMA . call_argument
    (39) call_argument -> . expression
    (40) call_argument -> . expression COLON expression
    (41) call_argument -> . expression COLON expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    call_argument                  shift and go to state 395
    expression                     shift and go to state 194
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 316

    (40) call_argument -> expression COLON . expression
    (41) call_argument -> expression COLON . expression COLON expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 396
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 317

    (279) variable -> LPAREN variable RPAREN CARET .

    ASIGNATION      reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    PLUS_ASIGN      reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    MINUS_ASIGN     reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    TIMES_ASIGN     reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE_ASIGN    reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DOT             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    LBRACKET        reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    CARET           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    RPAREN          reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    TIMES           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE          reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DIV             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    MOD             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    SHL             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    SHR             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    PLUS            reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    MINUS           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    EQUAL           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DISTINT         reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    LESS            reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    LESSEQUAL       reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    GREATER         reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    GREATEREQUAL    reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    IN              reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    AND             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    THEN            reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    OR              reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    XOR             reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    OF              reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DO              reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    COMMA           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    SEMICOLON       reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    ELSE            reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    RBRACKET        reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    COLON           reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DOBLEDOT        reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    TO              reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)
    DOWNTO          reduce using rule 279 (variable -> LPAREN variable RPAREN CARET .)


state 318

    (276) variable -> variable DOT ID .

    RPAREN          reduce using rule 276 (variable -> variable DOT ID .)
    DOT             reduce using rule 276 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 276 (variable -> variable DOT ID .)
    CARET           reduce using rule 276 (variable -> variable DOT ID .)
    DO              reduce using rule 276 (variable -> variable DOT ID .)
    COMMA           reduce using rule 276 (variable -> variable DOT ID .)


state 319

    (206) procedure_call -> NEW LPAREN call_argument_list_opt RPAREN .

    SEMICOLON       reduce using rule 206 (procedure_call -> NEW LPAREN call_argument_list_opt RPAREN .)
    ELSE            reduce using rule 206 (procedure_call -> NEW LPAREN call_argument_list_opt RPAREN .)


state 320

    (207) procedure_call -> DISPOSE LPAREN call_argument_list_opt RPAREN .

    SEMICOLON       reduce using rule 207 (procedure_call -> DISPOSE LPAREN call_argument_list_opt RPAREN .)
    ELSE            reduce using rule 207 (procedure_call -> DISPOSE LPAREN call_argument_list_opt RPAREN .)


state 321

    (208) if_statement -> IF expression THEN sentence .
    (209) if_statement -> IF expression THEN sentence . ELSE sentence

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 208 (if_statement -> IF expression THEN sentence .)
    ELSE            shift and go to state 397

  ! ELSE            [ reduce using rule 208 (if_statement -> IF expression THEN sentence .) ]


state 322

    (231) expression -> expression OR simple_expression .
    (234) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 231 (expression -> expression OR simple_expression .)
    OR              reduce using rule 231 (expression -> expression OR simple_expression .)
    XOR             reduce using rule 231 (expression -> expression OR simple_expression .)
    OF              reduce using rule 231 (expression -> expression OR simple_expression .)
    DO              reduce using rule 231 (expression -> expression OR simple_expression .)
    SEMICOLON       reduce using rule 231 (expression -> expression OR simple_expression .)
    ELSE            reduce using rule 231 (expression -> expression OR simple_expression .)
    RBRACKET        reduce using rule 231 (expression -> expression OR simple_expression .)
    COMMA           reduce using rule 231 (expression -> expression OR simple_expression .)
    COLON           reduce using rule 231 (expression -> expression OR simple_expression .)
    RPAREN          reduce using rule 231 (expression -> expression OR simple_expression .)
    DOBLEDOT        reduce using rule 231 (expression -> expression OR simple_expression .)
    TO              reduce using rule 231 (expression -> expression OR simple_expression .)
    DOWNTO          reduce using rule 231 (expression -> expression OR simple_expression .)
    AND             shift and go to state 202


state 323

    (232) expression -> expression XOR simple_expression .
    (234) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 232 (expression -> expression XOR simple_expression .)
    OR              reduce using rule 232 (expression -> expression XOR simple_expression .)
    XOR             reduce using rule 232 (expression -> expression XOR simple_expression .)
    OF              reduce using rule 232 (expression -> expression XOR simple_expression .)
    DO              reduce using rule 232 (expression -> expression XOR simple_expression .)
    SEMICOLON       reduce using rule 232 (expression -> expression XOR simple_expression .)
    ELSE            reduce using rule 232 (expression -> expression XOR simple_expression .)
    RBRACKET        reduce using rule 232 (expression -> expression XOR simple_expression .)
    COMMA           reduce using rule 232 (expression -> expression XOR simple_expression .)
    COLON           reduce using rule 232 (expression -> expression XOR simple_expression .)
    RPAREN          reduce using rule 232 (expression -> expression XOR simple_expression .)
    DOBLEDOT        reduce using rule 232 (expression -> expression XOR simple_expression .)
    TO              reduce using rule 232 (expression -> expression XOR simple_expression .)
    DOWNTO          reduce using rule 232 (expression -> expression XOR simple_expression .)
    AND             shift and go to state 202


state 324

    (234) simple_expression -> simple_expression AND relational_expression .
    (236) relational_expression -> relational_expression . relational_operator additive_expression
    (238) relational_operator -> . EQUAL
    (239) relational_operator -> . DISTINT
    (240) relational_operator -> . LESS
    (241) relational_operator -> . LESSEQUAL
    (242) relational_operator -> . GREATER
    (243) relational_operator -> . GREATEREQUAL
    (244) relational_operator -> . IN

    AND             reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    THEN            reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    OR              reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    XOR             reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    OF              reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    DO              reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    SEMICOLON       reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    ELSE            reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    RBRACKET        reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    COMMA           reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    COLON           reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    RPAREN          reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    DOBLEDOT        reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    TO              reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    DOWNTO          reduce using rule 234 (simple_expression -> simple_expression AND relational_expression .)
    EQUAL           shift and go to state 204
    DISTINT         shift and go to state 205
    LESS            shift and go to state 206
    LESSEQUAL       shift and go to state 207
    GREATER         shift and go to state 208
    GREATEREQUAL    shift and go to state 209
    IN              shift and go to state 210

    relational_operator            shift and go to state 203

state 325

    (236) relational_expression -> relational_expression relational_operator additive_expression .
    (245) additive_expression -> additive_expression . PLUS multiplicative_expression
    (246) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    DISTINT         reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESS            reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESSEQUAL       reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATER         reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATEREQUAL    reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    IN              reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    AND             reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    THEN            reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    OR              reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    XOR             reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    OF              reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    DO              reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    SEMICOLON       reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    ELSE            reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    RBRACKET        reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    COMMA           reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    COLON           reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    RPAREN          reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOBLEDOT        reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    TO              reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOWNTO          reduce using rule 236 (relational_expression -> relational_expression relational_operator additive_expression .)
    PLUS            shift and go to state 211
    MINUS           shift and go to state 212


state 326

    (245) additive_expression -> additive_expression PLUS multiplicative_expression .
    (248) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (249) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (250) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (251) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (252) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (253) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DISTINT         reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OF              reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 245 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 327

    (246) additive_expression -> additive_expression MINUS multiplicative_expression .
    (248) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (249) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (250) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (251) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (252) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (253) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DISTINT         reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OF              reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 246 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215
    DIV             shift and go to state 216
    MOD             shift and go to state 217
    SHL             shift and go to state 218
    SHR             shift and go to state 219


state 328

    (248) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHL             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHR             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DISTINT         reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESSEQUAL       reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATEREQUAL    reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IN              reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    THEN            reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OF              reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DO              reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    ELSE            reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COLON           reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOBLEDOT        reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TO              reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOWNTO          reduce using rule 248 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 329

    (249) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIV             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHL             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHR             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DISTINT         reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESSEQUAL       reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATEREQUAL    reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IN              reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THEN            reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OF              reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DO              reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ELSE            reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COLON           reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOBLEDOT        reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TO              reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOWNTO          reduce using rule 249 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 330

    (250) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVIDE          reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHL             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHR             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUAL           reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DISTINT         reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS            reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESSEQUAL       reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER         reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATEREQUAL    reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    IN              reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    THEN            reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    XOR             reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OF              reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DO              reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ELSE            reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COLON           reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOBLEDOT        reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    TO              reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOWNTO          reduce using rule 250 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 331

    (251) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHL             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHR             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUAL           reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DISTINT         reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS            reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESSEQUAL       reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER         reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATEREQUAL    reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IN              reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    THEN            reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OF              reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DO              reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    ELSE            reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COLON           reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOBLEDOT        reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    TO              reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOWNTO          reduce using rule 251 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 332

    (252) multiplicative_expression -> multiplicative_expression SHL unary_expression .

    TIMES           reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIVIDE          reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIV             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MOD             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHL             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHR             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    PLUS            reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MINUS           reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    EQUAL           reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DISTINT         reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESS            reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESSEQUAL       reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATER         reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATEREQUAL    reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    IN              reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    AND             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    THEN            reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OR              reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    XOR             reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OF              reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DO              reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SEMICOLON       reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    ELSE            reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RBRACKET        reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COMMA           reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COLON           reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RPAREN          reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOBLEDOT        reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    TO              reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOWNTO          reduce using rule 252 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)


state 333

    (253) multiplicative_expression -> multiplicative_expression SHR unary_expression .

    TIMES           reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIVIDE          reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIV             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MOD             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHL             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHR             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    PLUS            reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MINUS           reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    EQUAL           reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DISTINT         reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESS            reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESSEQUAL       reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATER         reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATEREQUAL    reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    IN              reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    AND             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    THEN            reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OR              reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    XOR             reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OF              reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DO              reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SEMICOLON       reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    ELSE            reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RBRACKET        reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COMMA           reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COLON           reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RPAREN          reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOBLEDOT        reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    TO              reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOWNTO          reduce using rule 253 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)


state 334

    (276) variable -> variable DOT ID .
    (282) function_call -> variable DOT ID . LPAREN expression_list RPAREN
    (283) function_call -> variable DOT ID . LPAREN RPAREN

    DOT             reduce using rule 276 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 276 (variable -> variable DOT ID .)
    CARET           reduce using rule 276 (variable -> variable DOT ID .)
    TIMES           reduce using rule 276 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 276 (variable -> variable DOT ID .)
    DIV             reduce using rule 276 (variable -> variable DOT ID .)
    MOD             reduce using rule 276 (variable -> variable DOT ID .)
    SHL             reduce using rule 276 (variable -> variable DOT ID .)
    SHR             reduce using rule 276 (variable -> variable DOT ID .)
    PLUS            reduce using rule 276 (variable -> variable DOT ID .)
    MINUS           reduce using rule 276 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 276 (variable -> variable DOT ID .)
    DISTINT         reduce using rule 276 (variable -> variable DOT ID .)
    LESS            reduce using rule 276 (variable -> variable DOT ID .)
    LESSEQUAL       reduce using rule 276 (variable -> variable DOT ID .)
    GREATER         reduce using rule 276 (variable -> variable DOT ID .)
    GREATEREQUAL    reduce using rule 276 (variable -> variable DOT ID .)
    IN              reduce using rule 276 (variable -> variable DOT ID .)
    AND             reduce using rule 276 (variable -> variable DOT ID .)
    THEN            reduce using rule 276 (variable -> variable DOT ID .)
    OR              reduce using rule 276 (variable -> variable DOT ID .)
    XOR             reduce using rule 276 (variable -> variable DOT ID .)
    OF              reduce using rule 276 (variable -> variable DOT ID .)
    DO              reduce using rule 276 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 276 (variable -> variable DOT ID .)
    ELSE            reduce using rule 276 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 276 (variable -> variable DOT ID .)
    COMMA           reduce using rule 276 (variable -> variable DOT ID .)
    COLON           reduce using rule 276 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 276 (variable -> variable DOT ID .)
    DOBLEDOT        reduce using rule 276 (variable -> variable DOT ID .)
    TO              reduce using rule 276 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 276 (variable -> variable DOT ID .)
    LPAREN          shift and go to state 398


state 335

    (266) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DOBLEDOT        reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 266 (primary_expression -> LPAREN expression RPAREN .)


state 336

    (280) function_call -> ID LPAREN expression_list . RPAREN
    (285) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 399
    COMMA           shift and go to state 313


state 337

    (281) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    SHL             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    SHR             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DISTINT         reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    OF              reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 281 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 281 (function_call -> ID LPAREN RPAREN .)


state 338

    (273) set_constructor -> LBRACKET set_item_list RBRACKET .

    TIMES           reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIVIDE          reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIV             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MOD             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHL             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHR             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    PLUS            reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MINUS           reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    EQUAL           reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DISTINT         reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESS            reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESSEQUAL       reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATER         reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATEREQUAL    reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    IN              reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    AND             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    THEN            reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OR              reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    XOR             reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OF              reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DO              reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SEMICOLON       reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    ELSE            reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RBRACKET        reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COMMA           reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COLON           reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RPAREN          reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOBLEDOT        reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    TO              reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOWNTO          reduce using rule 273 (set_constructor -> LBRACKET set_item_list RBRACKET .)


state 339

    (272) set_item_list -> set_item_list COMMA . set_item
    (269) set_item -> . expression
    (270) set_item -> . expression DOBLEDOT expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    set_item                       shift and go to state 400
    expression                     shift and go to state 231
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 340

    (270) set_item -> expression DOBLEDOT . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 401
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 341

    (210) case_statement -> CASE expression OF case_list . END
    (211) case_statement -> CASE expression OF case_list . ELSE sentences_list SEMICOLON END
    (212) case_statement -> CASE expression OF case_list . ELSE sentences_list END
    (213) case_list -> case_list . case_label COLON sentence SEMICOLON
    (216) case_label -> . constant
    (217) case_label -> . constant DOBLEDOT constant
    (218) case_label -> . case_label COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    END             shift and go to state 402
    ELSE            shift and go to state 403
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    case_label                     shift and go to state 404
    constant                       shift and go to state 344
    set_constructor                shift and go to state 248

state 342

    (214) case_list -> case_label . COLON sentence SEMICOLON
    (218) case_label -> case_label . COMMA constant

    COLON           shift and go to state 405
    COMMA           shift and go to state 406


state 343

    (215) case_list -> empty .

    END             reduce using rule 215 (case_list -> empty .)
    ELSE            reduce using rule 215 (case_list -> empty .)
    NUMBER          reduce using rule 215 (case_list -> empty .)
    STRING          reduce using rule 215 (case_list -> empty .)
    TRUE            reduce using rule 215 (case_list -> empty .)
    FALSE           reduce using rule 215 (case_list -> empty .)
    NIL             reduce using rule 215 (case_list -> empty .)
    ORDINAL_CONSTANT reduce using rule 215 (case_list -> empty .)
    LBRACKET        reduce using rule 215 (case_list -> empty .)


state 344

    (216) case_label -> constant .
    (217) case_label -> constant . DOBLEDOT constant

    COLON           reduce using rule 216 (case_label -> constant .)
    COMMA           reduce using rule 216 (case_label -> constant .)
    DOBLEDOT        shift and go to state 407


state 345

    (220) for_statement -> for_control_variable_setup ASIGNATION expression TO . expression DO sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 408
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 346

    (221) for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO . expression DO sentence
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 409
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 347

    (222) for_statement -> for_control_variable_setup IN expression DO . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    for_control_variable_setup     shift and go to state 68
    sentence                       shift and go to state 410
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61

state 348

    (223) while_statement -> WHILE expression DO sentence .

    SEMICOLON       reduce using rule 223 (while_statement -> WHILE expression DO sentence .)
    ELSE            reduce using rule 223 (while_statement -> WHILE expression DO sentence .)


state 349

    (224) repeat_statement -> REPEAT sentences_list UNTIL expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 224 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    ELSE            reduce using rule 224 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 350

    (225) with_statement -> WITH variable_list DO sentence .

    SEMICOLON       reduce using rule 225 (with_statement -> WITH variable_list DO sentence .)
    ELSE            reduce using rule 225 (with_statement -> WITH variable_list DO sentence .)


state 351

    (227) variable_list -> variable_list COMMA variable .
    (276) variable -> variable . DOT ID
    (277) variable -> variable . LBRACKET expression_list RBRACKET
    (278) variable -> variable . CARET

    DO              reduce using rule 227 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 227 (variable_list -> variable_list COMMA variable .)
    DOT             shift and go to state 196
    LBRACKET        shift and go to state 106
    CARET           shift and go to state 107


state 352

    (30) const_declaration -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)


state 353

    (31) const_declaration -> ID COLON data_type_list EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    constant                       shift and go to state 411
    set_constructor                shift and go to state 248

state 354

    (158) data_type_list -> STRING LBRACKET . NUMBER RBRACKET
    (63) string_type -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 412


state 355

    (160) data_type_list -> ABSOLUTE ID .

    EQUAL           reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    SEMICOLON       reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    ABSOLUTE        reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    RPAREN          reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    END             reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    CASE            reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    ID              reduce using rule 160 (data_type_list -> ABSOLUTE ID .)
    OF              reduce using rule 160 (data_type_list -> ABSOLUTE ID .)


state 356

    (84) file_type -> FILE OF . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 413
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 357

    (66) array_type -> ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (69) type_range_list -> . type_range
    (70) type_range_list -> . type_range_list COMMA type_range
    (71) type_range -> . NUMBER DOBLEDOT NUMBER
    (72) type_range -> . NUMBER DOBLEDOT ID
    (73) type_range -> . ID DOBLEDOT NUMBER
    (74) type_range -> . CHAR DOBLEDOT CHAR
    (75) type_range -> . ID DOBLEDOT ID
    (76) type_range -> . ID

    NUMBER          shift and go to state 416
    ID              shift and go to state 417
    CHAR            shift and go to state 418

    type_range_list                shift and go to state 414
    type_range                     shift and go to state 415

state 358

    (68) array_type -> ARRAY OF . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 419
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 359

    (67) array_type -> PACKED ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 420


state 360

    (65) record_type -> PACKED RECORD . record_list END
    (107) record_list -> . record_list record_declaration
    (108) record_list -> . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_list                    shift and go to state 421
    record_declaration             shift and go to state 364
    id_list                        shift and go to state 365

state 361

    (82) pointer_type -> CARET ID .
    (159) data_type_list -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for END resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for CASE resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ID resolved using rule 82 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for OF resolved using rule 82 (pointer_type -> CARET ID .)
    EQUAL           reduce using rule 82 (pointer_type -> CARET ID .)
    SEMICOLON       reduce using rule 82 (pointer_type -> CARET ID .)
    ABSOLUTE        reduce using rule 82 (pointer_type -> CARET ID .)
    RPAREN          reduce using rule 82 (pointer_type -> CARET ID .)
    END             reduce using rule 82 (pointer_type -> CARET ID .)
    CASE            reduce using rule 82 (pointer_type -> CARET ID .)
    ID              reduce using rule 82 (pointer_type -> CARET ID .)
    OF              reduce using rule 82 (pointer_type -> CARET ID .)

  ! EQUAL           [ reduce using rule 159 (data_type_list -> ID .) ]
  ! SEMICOLON       [ reduce using rule 159 (data_type_list -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 159 (data_type_list -> ID .) ]
  ! RPAREN          [ reduce using rule 159 (data_type_list -> ID .) ]
  ! END             [ reduce using rule 159 (data_type_list -> ID .) ]
  ! CASE            [ reduce using rule 159 (data_type_list -> ID .) ]
  ! ID              [ reduce using rule 159 (data_type_list -> ID .) ]
  ! OF              [ reduce using rule 159 (data_type_list -> ID .) ]


state 362

    (83) pointer_type -> CARET data_type_list .

    EQUAL           reduce using rule 83 (pointer_type -> CARET data_type_list .)
    SEMICOLON       reduce using rule 83 (pointer_type -> CARET data_type_list .)
    ABSOLUTE        reduce using rule 83 (pointer_type -> CARET data_type_list .)
    RPAREN          reduce using rule 83 (pointer_type -> CARET data_type_list .)
    END             reduce using rule 83 (pointer_type -> CARET data_type_list .)
    CASE            reduce using rule 83 (pointer_type -> CARET data_type_list .)
    ID              reduce using rule 83 (pointer_type -> CARET data_type_list .)
    OF              reduce using rule 83 (pointer_type -> CARET data_type_list .)


state 363

    (64) record_type -> RECORD record_list . END
    (107) record_list -> record_list . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 422
    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_declaration             shift and go to state 423
    id_list                        shift and go to state 365

state 364

    (108) record_list -> record_declaration .

    END             reduce using rule 108 (record_list -> record_declaration .)
    CASE            reduce using rule 108 (record_list -> record_declaration .)
    ID              reduce using rule 108 (record_list -> record_declaration .)
    RPAREN          reduce using rule 108 (record_list -> record_declaration .)


state 365

    (109) record_declaration -> id_list . COLON data_type_list SEMICOLON
    (111) record_declaration -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 424
    COMMA           shift and go to state 44


state 366

    (110) record_declaration -> CASE . ID COLON data_type_list OF variant_list

    ID              shift and go to state 425


state 367

    (81) set_type -> SET OF . set_range
    (77) set_range -> . data_type_set
    (78) set_range -> . NUMBER DOBLEDOT NUMBER
    (79) set_range -> . CHAR DOBLEDOT CHAR
    (80) set_range -> . ID
    (169) data_type_set -> . BYTE
    (170) data_type_set -> . SHORTINT
    (171) data_type_set -> . WORD
    (172) data_type_set -> . BOOLEAN
    (173) data_type_set -> . CHAR
    (174) data_type_set -> . ID

    NUMBER          shift and go to state 428
    CHAR            shift and go to state 429
    ID              shift and go to state 430
    BYTE            shift and go to state 431
    SHORTINT        shift and go to state 432
    WORD            shift and go to state 433
    BOOLEAN         shift and go to state 434

    set_range                      shift and go to state 426
    data_type_set                  shift and go to state 427

state 368

    (86) object_type -> OBJECT object_heritage . object_fields object_methods END
    (89) object_fields -> . object_fields var_declaration
    (90) object_fields -> . empty
    (230) empty -> .

    ID              reduce using rule 230 (empty -> .)
    END             reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)

    object_fields                  shift and go to state 435
    empty                          shift and go to state 436

state 369

    (87) object_heritage -> LPAREN . ID RPAREN

    ID              shift and go to state 437


state 370

    (88) object_heritage -> empty .

    ID              reduce using rule 88 (object_heritage -> empty .)
    END             reduce using rule 88 (object_heritage -> empty .)
    PROCEDURE       reduce using rule 88 (object_heritage -> empty .)
    FUNCTION        reduce using rule 88 (object_heritage -> empty .)
    CONSTRUCTOR     reduce using rule 88 (object_heritage -> empty .)
    DESTRUCTOR      reduce using rule 88 (object_heritage -> empty .)


state 371

    (54) type_definition -> ID DOBLEDOT . ID

    ID              shift and go to state 438


state 372

    (49) type_declaration -> ID EQUAL type_definition SEMICOLON .

    ID              reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    BEGIN           reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    LABEL           reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONST           reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    TYPE            reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    VAR             reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    FUNCTION        reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    INTERFACE       reduce using rule 49 (type_declaration -> ID EQUAL type_definition SEMICOLON .)


state 373

    (51) type_definition -> LPAREN id_list . RPAREN
    (7) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 439
    COMMA           shift and go to state 44


state 374

    (52) type_definition -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 440


state 375

    (53) type_definition -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 441


state 376

    (121) var_declaration -> id_list COLON type_definition SEMICOLON .

    ID              reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    BEGIN           reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    LABEL           reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONST           reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    TYPE            reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    VAR             reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    FUNCTION        reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    INTERFACE       reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    END             reduce using rule 121 (var_declaration -> id_list COLON type_definition SEMICOLON .)


state 377

    (122) var_declaration -> id_list COLON type_definition EQUAL . expression SEMICOLON
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 442
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 378

    (123) var_declaration -> id_list COLON type_definition ABSOLUTE . ID SEMICOLON

    ID              shift and go to state 443


state 379

    (125) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 125 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 380

    (134) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 134 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 381

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 444


state 382

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 445


state 383

    (101) method_implementation -> PROCEDURE ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 446


state 384

    (136) parameters -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 136 (parameters -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 136 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 136 (parameters -> LPAREN parameter_list RPAREN .)


state 385

    (138) parameter_list -> parameter_list SEMICOLON . parameter_group
    (140) parameter_group -> . id_list COLON data_type_list
    (141) parameter_group -> . VAR id_list COLON data_type_list
    (142) parameter_group -> . CONST id_list COLON data_type_list
    (143) parameter_group -> . procedure_header
    (144) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 303
    CONST           shift and go to state 304
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308

    parameter_group                shift and go to state 447
    id_list                        shift and go to state 302
    procedure_header               shift and go to state 305
    function_header                shift and go to state 306

state 386

    (140) parameter_group -> id_list COLON . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 448
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 387

    (141) parameter_group -> VAR id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 449
    COMMA           shift and go to state 44


state 388

    (142) parameter_group -> CONST id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 450
    COMMA           shift and go to state 44


state 389

    (126) procedure_header -> PROCEDURE ID . parameters
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    RPAREN          reduce using rule 230 (empty -> .)
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 171
    empty                          shift and go to state 173

state 390

    (135) function_header -> FUNCTION ID . parameters COLON data_type_list
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    COLON           reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 175
    empty                          shift and go to state 173

state 391

    (102) method_implementation -> FUNCTION ID DOT ID parameters . COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    COLON           shift and go to state 451


state 392

    (135) function_header -> FUNCTION ID parameters COLON data_type_list .

    SEMICOLON       reduce using rule 135 (function_header -> FUNCTION ID parameters COLON data_type_list .)
    RPAREN          reduce using rule 135 (function_header -> FUNCTION ID parameters COLON data_type_list .)


state 393

    (205) procedure_call -> variable DOT ID LPAREN call_argument_list_opt . RPAREN

    RPAREN          shift and go to state 452


state 394

    (285) expression_list -> expression_list COMMA expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 285 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 285 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 285 (expression_list -> expression_list COMMA expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 395

    (42) call_argument_list -> call_argument_list COMMA call_argument .

    COMMA           reduce using rule 42 (call_argument_list -> call_argument_list COMMA call_argument .)
    RPAREN          reduce using rule 42 (call_argument_list -> call_argument_list COMMA call_argument .)


state 396

    (40) call_argument -> expression COLON expression .
    (41) call_argument -> expression COLON expression . COLON expression
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    COMMA           reduce using rule 40 (call_argument -> expression COLON expression .)
    RPAREN          reduce using rule 40 (call_argument -> expression COLON expression .)
    COLON           shift and go to state 453
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 397

    (209) if_statement -> IF expression THEN sentence ELSE . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 454
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 398

    (282) function_call -> variable DOT ID LPAREN . expression_list RPAREN
    (283) function_call -> variable DOT ID LPAREN . RPAREN
    (284) expression_list -> . expression
    (285) expression_list -> . expression_list COMMA expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 456
    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    variable                       shift and go to state 129
    expression_list                shift and go to state 455
    expression                     shift and go to state 184
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 399

    (280) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 280 (function_call -> ID LPAREN expression_list RPAREN .)


state 400

    (272) set_item_list -> set_item_list COMMA set_item .

    RBRACKET        reduce using rule 272 (set_item_list -> set_item_list COMMA set_item .)
    COMMA           reduce using rule 272 (set_item_list -> set_item_list COMMA set_item .)


state 401

    (270) set_item -> expression DOBLEDOT expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 270 (set_item -> expression DOBLEDOT expression .)
    COMMA           reduce using rule 270 (set_item -> expression DOBLEDOT expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 402

    (210) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 210 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 210 (case_statement -> CASE expression OF case_list END .)


state 403

    (211) case_statement -> CASE expression OF case_list ELSE . sentences_list SEMICOLON END
    (212) case_statement -> CASE expression OF case_list ELSE . sentences_list END
    (176) sentences_list -> . sentences_list sentence SEMICOLON
    (177) sentences_list -> . sentence SEMICOLON
    (178) sentences_list -> . empty
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (230) empty -> .
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    SEMICOLON       reduce using rule 230 (empty -> .)
    END             reduce using rule 230 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

  ! ID              [ reduce using rule 230 (empty -> .) ]
  ! NEW             [ reduce using rule 230 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 230 (empty -> .) ]
  ! BEGIN           [ reduce using rule 230 (empty -> .) ]
  ! IF              [ reduce using rule 230 (empty -> .) ]
  ! CASE            [ reduce using rule 230 (empty -> .) ]
  ! WHILE           [ reduce using rule 230 (empty -> .) ]
  ! REPEAT          [ reduce using rule 230 (empty -> .) ]
  ! WITH            [ reduce using rule 230 (empty -> .) ]
  ! GOTO            [ reduce using rule 230 (empty -> .) ]
  ! NUMBER          [ reduce using rule 230 (empty -> .) ]
  ! ASM             [ reduce using rule 230 (empty -> .) ]
  ! LPAREN          [ reduce using rule 230 (empty -> .) ]
  ! FOR             [ reduce using rule 230 (empty -> .) ]

    sentences_list                 shift and go to state 457
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 404

    (213) case_list -> case_list case_label . COLON sentence SEMICOLON
    (218) case_label -> case_label . COMMA constant

    COLON           shift and go to state 458
    COMMA           shift and go to state 406


state 405

    (214) case_list -> case_label COLON . sentence SEMICOLON
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 459
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 406

    (218) case_label -> case_label COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    constant                       shift and go to state 460
    set_constructor                shift and go to state 248

state 407

    (217) case_label -> constant DOBLEDOT . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    constant                       shift and go to state 461
    set_constructor                shift and go to state 248

state 408

    (220) for_statement -> for_control_variable_setup ASIGNATION expression TO expression . DO sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    DO              shift and go to state 462
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 409

    (221) for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression . DO sentence
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    DO              shift and go to state 463
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 410

    (222) for_statement -> for_control_variable_setup IN expression DO sentence .

    SEMICOLON       reduce using rule 222 (for_statement -> for_control_variable_setup IN expression DO sentence .)
    ELSE            reduce using rule 222 (for_statement -> for_control_variable_setup IN expression DO sentence .)


state 411

    (31) const_declaration -> ID COLON data_type_list EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 464


state 412

    (158) data_type_list -> STRING LBRACKET NUMBER . RBRACKET
    (63) string_type -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 465


state 413

    (84) file_type -> FILE OF data_type_list .

    EQUAL           reduce using rule 84 (file_type -> FILE OF data_type_list .)
    SEMICOLON       reduce using rule 84 (file_type -> FILE OF data_type_list .)
    ABSOLUTE        reduce using rule 84 (file_type -> FILE OF data_type_list .)
    RPAREN          reduce using rule 84 (file_type -> FILE OF data_type_list .)
    END             reduce using rule 84 (file_type -> FILE OF data_type_list .)
    CASE            reduce using rule 84 (file_type -> FILE OF data_type_list .)
    ID              reduce using rule 84 (file_type -> FILE OF data_type_list .)
    OF              reduce using rule 84 (file_type -> FILE OF data_type_list .)


state 414

    (66) array_type -> ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (70) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 466
    COMMA           shift and go to state 467


state 415

    (69) type_range_list -> type_range .

    RBRACKET        reduce using rule 69 (type_range_list -> type_range .)
    COMMA           reduce using rule 69 (type_range_list -> type_range .)


state 416

    (71) type_range -> NUMBER . DOBLEDOT NUMBER
    (72) type_range -> NUMBER . DOBLEDOT ID

    DOBLEDOT        shift and go to state 468


state 417

    (73) type_range -> ID . DOBLEDOT NUMBER
    (75) type_range -> ID . DOBLEDOT ID
    (76) type_range -> ID .

    DOBLEDOT        shift and go to state 469
    RBRACKET        reduce using rule 76 (type_range -> ID .)
    COMMA           reduce using rule 76 (type_range -> ID .)


state 418

    (74) type_range -> CHAR . DOBLEDOT CHAR

    DOBLEDOT        shift and go to state 470


state 419

    (68) array_type -> ARRAY OF data_type_list .

    EQUAL           reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    SEMICOLON       reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    ABSOLUTE        reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    RPAREN          reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    END             reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    CASE            reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    ID              reduce using rule 68 (array_type -> ARRAY OF data_type_list .)
    OF              reduce using rule 68 (array_type -> ARRAY OF data_type_list .)


state 420

    (67) array_type -> PACKED ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (69) type_range_list -> . type_range
    (70) type_range_list -> . type_range_list COMMA type_range
    (71) type_range -> . NUMBER DOBLEDOT NUMBER
    (72) type_range -> . NUMBER DOBLEDOT ID
    (73) type_range -> . ID DOBLEDOT NUMBER
    (74) type_range -> . CHAR DOBLEDOT CHAR
    (75) type_range -> . ID DOBLEDOT ID
    (76) type_range -> . ID

    NUMBER          shift and go to state 416
    ID              shift and go to state 417
    CHAR            shift and go to state 418

    type_range_list                shift and go to state 471
    type_range                     shift and go to state 415

state 421

    (65) record_type -> PACKED RECORD record_list . END
    (107) record_list -> record_list . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 472
    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_declaration             shift and go to state 423
    id_list                        shift and go to state 365

state 422

    (64) record_type -> RECORD record_list END .

    EQUAL           reduce using rule 64 (record_type -> RECORD record_list END .)
    SEMICOLON       reduce using rule 64 (record_type -> RECORD record_list END .)
    ABSOLUTE        reduce using rule 64 (record_type -> RECORD record_list END .)
    RPAREN          reduce using rule 64 (record_type -> RECORD record_list END .)
    END             reduce using rule 64 (record_type -> RECORD record_list END .)
    CASE            reduce using rule 64 (record_type -> RECORD record_list END .)
    ID              reduce using rule 64 (record_type -> RECORD record_list END .)
    OF              reduce using rule 64 (record_type -> RECORD record_list END .)


state 423

    (107) record_list -> record_list record_declaration .

    END             reduce using rule 107 (record_list -> record_list record_declaration .)
    CASE            reduce using rule 107 (record_list -> record_list record_declaration .)
    ID              reduce using rule 107 (record_list -> record_list record_declaration .)
    RPAREN          reduce using rule 107 (record_list -> record_list record_declaration .)


state 424

    (109) record_declaration -> id_list COLON . data_type_list SEMICOLON
    (111) record_declaration -> id_list COLON . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 473
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 425

    (110) record_declaration -> CASE ID . COLON data_type_list OF variant_list

    COLON           shift and go to state 474


state 426

    (81) set_type -> SET OF set_range .

    EQUAL           reduce using rule 81 (set_type -> SET OF set_range .)
    SEMICOLON       reduce using rule 81 (set_type -> SET OF set_range .)
    ABSOLUTE        reduce using rule 81 (set_type -> SET OF set_range .)
    RPAREN          reduce using rule 81 (set_type -> SET OF set_range .)
    END             reduce using rule 81 (set_type -> SET OF set_range .)
    CASE            reduce using rule 81 (set_type -> SET OF set_range .)
    ID              reduce using rule 81 (set_type -> SET OF set_range .)
    OF              reduce using rule 81 (set_type -> SET OF set_range .)


state 427

    (77) set_range -> data_type_set .

    EQUAL           reduce using rule 77 (set_range -> data_type_set .)
    SEMICOLON       reduce using rule 77 (set_range -> data_type_set .)
    ABSOLUTE        reduce using rule 77 (set_range -> data_type_set .)
    RPAREN          reduce using rule 77 (set_range -> data_type_set .)
    END             reduce using rule 77 (set_range -> data_type_set .)
    CASE            reduce using rule 77 (set_range -> data_type_set .)
    ID              reduce using rule 77 (set_range -> data_type_set .)
    OF              reduce using rule 77 (set_range -> data_type_set .)


state 428

    (78) set_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 475


state 429

    (79) set_range -> CHAR . DOBLEDOT CHAR
    (173) data_type_set -> CHAR .

    DOBLEDOT        shift and go to state 476
    EQUAL           reduce using rule 173 (data_type_set -> CHAR .)
    SEMICOLON       reduce using rule 173 (data_type_set -> CHAR .)
    ABSOLUTE        reduce using rule 173 (data_type_set -> CHAR .)
    RPAREN          reduce using rule 173 (data_type_set -> CHAR .)
    END             reduce using rule 173 (data_type_set -> CHAR .)
    CASE            reduce using rule 173 (data_type_set -> CHAR .)
    ID              reduce using rule 173 (data_type_set -> CHAR .)
    OF              reduce using rule 173 (data_type_set -> CHAR .)


state 430

    (80) set_range -> ID .
    (174) data_type_set -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for END resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 80 (set_range -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 80 (set_range -> ID .)
    EQUAL           reduce using rule 80 (set_range -> ID .)
    SEMICOLON       reduce using rule 80 (set_range -> ID .)
    ABSOLUTE        reduce using rule 80 (set_range -> ID .)
    RPAREN          reduce using rule 80 (set_range -> ID .)
    END             reduce using rule 80 (set_range -> ID .)
    CASE            reduce using rule 80 (set_range -> ID .)
    ID              reduce using rule 80 (set_range -> ID .)
    OF              reduce using rule 80 (set_range -> ID .)

  ! EQUAL           [ reduce using rule 174 (data_type_set -> ID .) ]
  ! SEMICOLON       [ reduce using rule 174 (data_type_set -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 174 (data_type_set -> ID .) ]
  ! RPAREN          [ reduce using rule 174 (data_type_set -> ID .) ]
  ! END             [ reduce using rule 174 (data_type_set -> ID .) ]
  ! CASE            [ reduce using rule 174 (data_type_set -> ID .) ]
  ! ID              [ reduce using rule 174 (data_type_set -> ID .) ]
  ! OF              [ reduce using rule 174 (data_type_set -> ID .) ]


state 431

    (169) data_type_set -> BYTE .

    EQUAL           reduce using rule 169 (data_type_set -> BYTE .)
    SEMICOLON       reduce using rule 169 (data_type_set -> BYTE .)
    ABSOLUTE        reduce using rule 169 (data_type_set -> BYTE .)
    RPAREN          reduce using rule 169 (data_type_set -> BYTE .)
    END             reduce using rule 169 (data_type_set -> BYTE .)
    CASE            reduce using rule 169 (data_type_set -> BYTE .)
    ID              reduce using rule 169 (data_type_set -> BYTE .)
    OF              reduce using rule 169 (data_type_set -> BYTE .)


state 432

    (170) data_type_set -> SHORTINT .

    EQUAL           reduce using rule 170 (data_type_set -> SHORTINT .)
    SEMICOLON       reduce using rule 170 (data_type_set -> SHORTINT .)
    ABSOLUTE        reduce using rule 170 (data_type_set -> SHORTINT .)
    RPAREN          reduce using rule 170 (data_type_set -> SHORTINT .)
    END             reduce using rule 170 (data_type_set -> SHORTINT .)
    CASE            reduce using rule 170 (data_type_set -> SHORTINT .)
    ID              reduce using rule 170 (data_type_set -> SHORTINT .)
    OF              reduce using rule 170 (data_type_set -> SHORTINT .)


state 433

    (171) data_type_set -> WORD .

    EQUAL           reduce using rule 171 (data_type_set -> WORD .)
    SEMICOLON       reduce using rule 171 (data_type_set -> WORD .)
    ABSOLUTE        reduce using rule 171 (data_type_set -> WORD .)
    RPAREN          reduce using rule 171 (data_type_set -> WORD .)
    END             reduce using rule 171 (data_type_set -> WORD .)
    CASE            reduce using rule 171 (data_type_set -> WORD .)
    ID              reduce using rule 171 (data_type_set -> WORD .)
    OF              reduce using rule 171 (data_type_set -> WORD .)


state 434

    (172) data_type_set -> BOOLEAN .

    EQUAL           reduce using rule 172 (data_type_set -> BOOLEAN .)
    SEMICOLON       reduce using rule 172 (data_type_set -> BOOLEAN .)
    ABSOLUTE        reduce using rule 172 (data_type_set -> BOOLEAN .)
    RPAREN          reduce using rule 172 (data_type_set -> BOOLEAN .)
    END             reduce using rule 172 (data_type_set -> BOOLEAN .)
    CASE            reduce using rule 172 (data_type_set -> BOOLEAN .)
    ID              reduce using rule 172 (data_type_set -> BOOLEAN .)
    OF              reduce using rule 172 (data_type_set -> BOOLEAN .)


state 435

    (86) object_type -> OBJECT object_heritage object_fields . object_methods END
    (89) object_fields -> object_fields . var_declaration
    (91) object_methods -> . object_methods method_declaration
    (92) object_methods -> . empty
    (121) var_declaration -> . id_list COLON type_definition SEMICOLON
    (122) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (123) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (230) empty -> .
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    ID              shift and go to state 13

    object_methods                 shift and go to state 477
    var_declaration                shift and go to state 478
    empty                          shift and go to state 479
    id_list                        shift and go to state 86

state 436

    (90) object_fields -> empty .

    ID              reduce using rule 90 (object_fields -> empty .)
    END             reduce using rule 90 (object_fields -> empty .)
    PROCEDURE       reduce using rule 90 (object_fields -> empty .)
    FUNCTION        reduce using rule 90 (object_fields -> empty .)
    CONSTRUCTOR     reduce using rule 90 (object_fields -> empty .)
    DESTRUCTOR      reduce using rule 90 (object_fields -> empty .)


state 437

    (87) object_heritage -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 480


state 438

    (54) type_definition -> ID DOBLEDOT ID .

    SEMICOLON       reduce using rule 54 (type_definition -> ID DOBLEDOT ID .)
    EQUAL           reduce using rule 54 (type_definition -> ID DOBLEDOT ID .)
    ABSOLUTE        reduce using rule 54 (type_definition -> ID DOBLEDOT ID .)


state 439

    (51) type_definition -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 51 (type_definition -> LPAREN id_list RPAREN .)
    EQUAL           reduce using rule 51 (type_definition -> LPAREN id_list RPAREN .)
    ABSOLUTE        reduce using rule 51 (type_definition -> LPAREN id_list RPAREN .)


state 440

    (52) type_definition -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 52 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    EQUAL           reduce using rule 52 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 52 (type_definition -> NUMBER DOBLEDOT NUMBER .)


state 441

    (53) type_definition -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 53 (type_definition -> CHAR DOBLEDOT CHAR .)
    EQUAL           reduce using rule 53 (type_definition -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 53 (type_definition -> CHAR DOBLEDOT CHAR .)


state 442

    (122) var_declaration -> id_list COLON type_definition EQUAL expression . SEMICOLON
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    SEMICOLON       shift and go to state 481
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 443

    (123) var_declaration -> id_list COLON type_definition ABSOLUTE ID . SEMICOLON

    SEMICOLON       shift and go to state 482


state 444

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 483
    empty                          shift and go to state 11

state 445

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 484
    empty                          shift and go to state 11

state 446

    (101) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 485
    empty                          shift and go to state 11

state 447

    (138) parameter_list -> parameter_list SEMICOLON parameter_group .

    RPAREN          reduce using rule 138 (parameter_list -> parameter_list SEMICOLON parameter_group .)
    SEMICOLON       reduce using rule 138 (parameter_list -> parameter_list SEMICOLON parameter_group .)


state 448

    (140) parameter_group -> id_list COLON data_type_list .

    RPAREN          reduce using rule 140 (parameter_group -> id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 140 (parameter_group -> id_list COLON data_type_list .)


state 449

    (141) parameter_group -> VAR id_list COLON . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 486
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 450

    (142) parameter_group -> CONST id_list COLON . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 487
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 451

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON . data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 488
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 452

    (205) procedure_call -> variable DOT ID LPAREN call_argument_list_opt RPAREN .

    SEMICOLON       reduce using rule 205 (procedure_call -> variable DOT ID LPAREN call_argument_list_opt RPAREN .)
    ELSE            reduce using rule 205 (procedure_call -> variable DOT ID LPAREN call_argument_list_opt RPAREN .)


state 453

    (41) call_argument -> expression COLON expression COLON . expression
    (231) expression -> . expression OR simple_expression
    (232) expression -> . expression XOR simple_expression
    (233) expression -> . simple_expression
    (234) simple_expression -> . simple_expression AND relational_expression
    (235) simple_expression -> . relational_expression
    (236) relational_expression -> . relational_expression relational_operator additive_expression
    (237) relational_expression -> . additive_expression
    (245) additive_expression -> . additive_expression PLUS multiplicative_expression
    (246) additive_expression -> . additive_expression MINUS multiplicative_expression
    (247) additive_expression -> . multiplicative_expression
    (248) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (249) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (250) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (251) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (252) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (253) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (254) multiplicative_expression -> . unary_expression
    (255) unary_expression -> . NOT unary_expression
    (256) unary_expression -> . MINUS unary_expression
    (257) unary_expression -> . PLUS unary_expression
    (258) unary_expression -> . ADDRESS_OF unary_expression
    (259) unary_expression -> . primary_expression
    (260) primary_expression -> . variable
    (261) primary_expression -> . NUMBER
    (262) primary_expression -> . STRING
    (263) primary_expression -> . TRUE
    (264) primary_expression -> . FALSE
    (265) primary_expression -> . NIL
    (266) primary_expression -> . LPAREN expression RPAREN
    (267) primary_expression -> . function_call
    (268) primary_expression -> . set_constructor
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (280) function_call -> . ID LPAREN expression_list RPAREN
    (281) function_call -> . ID LPAREN RPAREN
    (282) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (283) function_call -> . variable DOT ID LPAREN RPAREN
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 126
    MINUS           shift and go to state 124
    PLUS            shift and go to state 122
    ADDRESS_OF      shift and go to state 127
    NUMBER          shift and go to state 130
    STRING          shift and go to state 131
    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    NIL             shift and go to state 134
    LPAREN          shift and go to state 135
    ID              shift and go to state 138
    LBRACKET        shift and go to state 139

    expression                     shift and go to state 489
    simple_expression              shift and go to state 119
    relational_expression          shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 123
    unary_expression               shift and go to state 125
    primary_expression             shift and go to state 128
    variable                       shift and go to state 129
    function_call                  shift and go to state 136
    set_constructor                shift and go to state 137

state 454

    (209) if_statement -> IF expression THEN sentence ELSE sentence .

    SEMICOLON       reduce using rule 209 (if_statement -> IF expression THEN sentence ELSE sentence .)
    ELSE            reduce using rule 209 (if_statement -> IF expression THEN sentence ELSE sentence .)


state 455

    (282) function_call -> variable DOT ID LPAREN expression_list . RPAREN
    (285) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 490
    COMMA           shift and go to state 313


state 456

    (283) function_call -> variable DOT ID LPAREN RPAREN .

    TIMES           reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIV             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    MOD             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHL             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHR             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    PLUS            reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    MINUS           reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    EQUAL           reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DISTINT         reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESS            reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATER         reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    IN              reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    AND             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    THEN            reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    OR              reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    XOR             reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    OF              reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DO              reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    COMMA           reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    COLON           reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    TO              reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 283 (function_call -> variable DOT ID LPAREN RPAREN .)


state 457

    (211) case_statement -> CASE expression OF case_list ELSE sentences_list . SEMICOLON END
    (212) case_statement -> CASE expression OF case_list ELSE sentences_list . END
    (176) sentences_list -> sentences_list . sentence SEMICOLON
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 491
    END             shift and go to state 492
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

  ! SEMICOLON       [ reduce using rule 230 (empty -> .) ]

    sentence                       shift and go to state 97
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 458

    (213) case_list -> case_list case_label COLON . sentence SEMICOLON
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    sentence                       shift and go to state 493
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61
    for_control_variable_setup     shift and go to state 68

state 459

    (214) case_list -> case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 494


state 460

    (218) case_label -> case_label COMMA constant .

    COLON           reduce using rule 218 (case_label -> case_label COMMA constant .)
    COMMA           reduce using rule 218 (case_label -> case_label COMMA constant .)


state 461

    (217) case_label -> constant DOBLEDOT constant .

    COLON           reduce using rule 217 (case_label -> constant DOBLEDOT constant .)
    COMMA           reduce using rule 217 (case_label -> constant DOBLEDOT constant .)


state 462

    (220) for_statement -> for_control_variable_setup ASIGNATION expression TO expression DO . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    for_control_variable_setup     shift and go to state 68
    sentence                       shift and go to state 495
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61

state 463

    (221) for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression DO . sentence
    (179) sentence -> . assignment
    (180) sentence -> . procedure_call
    (181) sentence -> . compound_statement
    (182) sentence -> . if_statement
    (183) sentence -> . case_statement
    (184) sentence -> . for_statement
    (185) sentence -> . while_statement
    (186) sentence -> . repeat_statement
    (187) sentence -> . with_statement
    (188) sentence -> . goto_statement
    (189) sentence -> . labeled_sentence
    (190) sentence -> . asm_statement
    (191) sentence -> . empty
    (193) assignment -> . variable ASIGNATION expression
    (194) assignment -> . ID ASIGNATION expression
    (195) assignment -> . variable PLUS_ASIGN expression
    (196) assignment -> . ID PLUS_ASIGN expression
    (197) assignment -> . variable MINUS_ASIGN expression
    (198) assignment -> . ID MINUS_ASIGN expression
    (199) assignment -> . variable TIMES_ASIGN expression
    (200) assignment -> . ID TIMES_ASIGN expression
    (201) assignment -> . variable DIVIDE_ASIGN expression
    (202) assignment -> . ID DIVIDE_ASIGN expression
    (203) procedure_call -> . ID
    (204) procedure_call -> . ID LPAREN call_argument_list_opt RPAREN
    (205) procedure_call -> . variable DOT ID LPAREN call_argument_list_opt RPAREN
    (206) procedure_call -> . NEW LPAREN call_argument_list_opt RPAREN
    (207) procedure_call -> . DISPOSE LPAREN call_argument_list_opt RPAREN
    (175) compound_statement -> . BEGIN sentences_list END
    (208) if_statement -> . IF expression THEN sentence
    (209) if_statement -> . IF expression THEN sentence ELSE sentence
    (210) case_statement -> . CASE expression OF case_list END
    (211) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (212) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (220) for_statement -> . for_control_variable_setup ASIGNATION expression TO expression DO sentence
    (221) for_statement -> . for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence
    (222) for_statement -> . for_control_variable_setup IN expression DO sentence
    (223) while_statement -> . WHILE expression DO sentence
    (224) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (225) with_statement -> . WITH variable_list DO sentence
    (228) goto_statement -> . GOTO NUMBER
    (229) labeled_sentence -> . NUMBER COLON sentence
    (192) asm_statement -> . ASM
    (230) empty -> .
    (275) variable -> . ID
    (276) variable -> . variable DOT ID
    (277) variable -> . variable LBRACKET expression_list RBRACKET
    (278) variable -> . variable CARET
    (279) variable -> . LPAREN variable RPAREN CARET
    (219) for_control_variable_setup -> . FOR ID

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 230 (empty -> .)
    ELSE            reduce using rule 230 (empty -> .)
    LPAREN          shift and go to state 63
    FOR             shift and go to state 75

    for_control_variable_setup     shift and go to state 68
    sentence                       shift and go to state 496
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 98
    variable                       shift and go to state 61

state 464

    (31) const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .

    ID              reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONST           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    VAR             reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)


state 465

    (158) data_type_list -> STRING LBRACKET NUMBER RBRACKET .
    (63) string_type -> STRING LBRACKET NUMBER RBRACKET .

  ! reduce/reduce conflict for EQUAL resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for OF resolved using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ABSOLUTE        reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 63 (string_type -> STRING LBRACKET NUMBER RBRACKET .)

  ! EQUAL           [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ABSOLUTE        [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! END             [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ID              [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! OF              [ reduce using rule 158 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]


state 466

    (66) array_type -> ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 497


state 467

    (70) type_range_list -> type_range_list COMMA . type_range
    (71) type_range -> . NUMBER DOBLEDOT NUMBER
    (72) type_range -> . NUMBER DOBLEDOT ID
    (73) type_range -> . ID DOBLEDOT NUMBER
    (74) type_range -> . CHAR DOBLEDOT CHAR
    (75) type_range -> . ID DOBLEDOT ID
    (76) type_range -> . ID

    NUMBER          shift and go to state 416
    ID              shift and go to state 417
    CHAR            shift and go to state 418

    type_range                     shift and go to state 498

state 468

    (71) type_range -> NUMBER DOBLEDOT . NUMBER
    (72) type_range -> NUMBER DOBLEDOT . ID

    NUMBER          shift and go to state 499
    ID              shift and go to state 500


state 469

    (73) type_range -> ID DOBLEDOT . NUMBER
    (75) type_range -> ID DOBLEDOT . ID

    NUMBER          shift and go to state 502
    ID              shift and go to state 501


state 470

    (74) type_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 503


state 471

    (67) array_type -> PACKED ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (70) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 504
    COMMA           shift and go to state 467


state 472

    (65) record_type -> PACKED RECORD record_list END .

    EQUAL           reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    SEMICOLON       reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    ABSOLUTE        reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    RPAREN          reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    END             reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    CASE            reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    ID              reduce using rule 65 (record_type -> PACKED RECORD record_list END .)
    OF              reduce using rule 65 (record_type -> PACKED RECORD record_list END .)


state 473

    (109) record_declaration -> id_list COLON data_type_list . SEMICOLON
    (111) record_declaration -> id_list COLON data_type_list .

    SEMICOLON       shift and go to state 505
    END             reduce using rule 111 (record_declaration -> id_list COLON data_type_list .)
    CASE            reduce using rule 111 (record_declaration -> id_list COLON data_type_list .)
    ID              reduce using rule 111 (record_declaration -> id_list COLON data_type_list .)
    RPAREN          reduce using rule 111 (record_declaration -> id_list COLON data_type_list .)


state 474

    (110) record_declaration -> CASE ID COLON . data_type_list OF variant_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 506
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 475

    (78) set_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 507


state 476

    (79) set_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 508


state 477

    (86) object_type -> OBJECT object_heritage object_fields object_methods . END
    (91) object_methods -> object_methods . method_declaration
    (93) method_declaration -> . procedure_header SEMICOLON
    (94) method_declaration -> . function_header SEMICOLON
    (95) method_declaration -> . constructor_declaration
    (96) method_declaration -> . destructor_declaration
    (97) method_declaration -> . procedure_header SEMICOLON directive
    (98) method_declaration -> . function_header SEMICOLON directive
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list
    (103) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON
    (104) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON directive
    (105) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON
    (106) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON directive

    END             shift and go to state 509
    PROCEDURE       shift and go to state 307
    FUNCTION        shift and go to state 308
    CONSTRUCTOR     shift and go to state 515
    DESTRUCTOR      shift and go to state 516

    method_declaration             shift and go to state 510
    procedure_header               shift and go to state 511
    function_header                shift and go to state 512
    constructor_declaration        shift and go to state 513
    destructor_declaration         shift and go to state 514

state 478

    (89) object_fields -> object_fields var_declaration .

    ID              reduce using rule 89 (object_fields -> object_fields var_declaration .)
    END             reduce using rule 89 (object_fields -> object_fields var_declaration .)
    PROCEDURE       reduce using rule 89 (object_fields -> object_fields var_declaration .)
    FUNCTION        reduce using rule 89 (object_fields -> object_fields var_declaration .)
    CONSTRUCTOR     reduce using rule 89 (object_fields -> object_fields var_declaration .)
    DESTRUCTOR      reduce using rule 89 (object_fields -> object_fields var_declaration .)


state 479

    (92) object_methods -> empty .

    END             reduce using rule 92 (object_methods -> empty .)
    PROCEDURE       reduce using rule 92 (object_methods -> empty .)
    FUNCTION        reduce using rule 92 (object_methods -> empty .)
    CONSTRUCTOR     reduce using rule 92 (object_methods -> empty .)
    DESTRUCTOR      reduce using rule 92 (object_methods -> empty .)


state 480

    (87) object_heritage -> LPAREN ID RPAREN .

    ID              reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)
    END             reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)
    PROCEDURE       reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)
    FUNCTION        reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)
    CONSTRUCTOR     reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)
    DESTRUCTOR      reduce using rule 87 (object_heritage -> LPAREN ID RPAREN .)


state 481

    (122) var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .

    ID              reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    LABEL           reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONST           reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    TYPE            reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    VAR             reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    PROCEDURE       reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    IMPLEMENTATION  reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    END             reduce using rule 122 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)


state 482

    (123) var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .

    ID              reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    BEGIN           reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    LABEL           reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONST           reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    TYPE            reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    VAR             reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    PROCEDURE       reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    FUNCTION        reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    INTERFACE       reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    END             reduce using rule 123 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)


state 483

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 517
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 484

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 518
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 485

    (101) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 519
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 486

    (141) parameter_group -> VAR id_list COLON data_type_list .

    RPAREN          reduce using rule 141 (parameter_group -> VAR id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 141 (parameter_group -> VAR id_list COLON data_type_list .)


state 487

    (142) parameter_group -> CONST id_list COLON data_type_list .

    RPAREN          reduce using rule 142 (parameter_group -> CONST id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 142 (parameter_group -> CONST id_list COLON data_type_list .)


state 488

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 520


state 489

    (41) call_argument -> expression COLON expression COLON expression .
    (231) expression -> expression . OR simple_expression
    (232) expression -> expression . XOR simple_expression

    COMMA           reduce using rule 41 (call_argument -> expression COLON expression COLON expression .)
    RPAREN          reduce using rule 41 (call_argument -> expression COLON expression COLON expression .)
    OR              shift and go to state 200
    XOR             shift and go to state 201


state 490

    (282) function_call -> variable DOT ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COLON           reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 282 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 491

    (211) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON . END

    END             shift and go to state 521


state 492

    (212) case_statement -> CASE expression OF case_list ELSE sentences_list END .

    SEMICOLON       reduce using rule 212 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)
    ELSE            reduce using rule 212 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)


state 493

    (213) case_list -> case_list case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 522


state 494

    (214) case_list -> case_label COLON sentence SEMICOLON .

    END             reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)
    LBRACKET        reduce using rule 214 (case_list -> case_label COLON sentence SEMICOLON .)


state 495

    (220) for_statement -> for_control_variable_setup ASIGNATION expression TO expression DO sentence .

    SEMICOLON       reduce using rule 220 (for_statement -> for_control_variable_setup ASIGNATION expression TO expression DO sentence .)
    ELSE            reduce using rule 220 (for_statement -> for_control_variable_setup ASIGNATION expression TO expression DO sentence .)


state 496

    (221) for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence .

    SEMICOLON       reduce using rule 221 (for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence .)
    ELSE            reduce using rule 221 (for_statement -> for_control_variable_setup ASIGNATION expression DOWNTO expression DO sentence .)


state 497

    (66) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 523
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 498

    (70) type_range_list -> type_range_list COMMA type_range .

    RBRACKET        reduce using rule 70 (type_range_list -> type_range_list COMMA type_range .)
    COMMA           reduce using rule 70 (type_range_list -> type_range_list COMMA type_range .)


state 499

    (71) type_range -> NUMBER DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 71 (type_range -> NUMBER DOBLEDOT NUMBER .)
    COMMA           reduce using rule 71 (type_range -> NUMBER DOBLEDOT NUMBER .)


state 500

    (72) type_range -> NUMBER DOBLEDOT ID .

    RBRACKET        reduce using rule 72 (type_range -> NUMBER DOBLEDOT ID .)
    COMMA           reduce using rule 72 (type_range -> NUMBER DOBLEDOT ID .)


state 501

    (75) type_range -> ID DOBLEDOT ID .

    RBRACKET        reduce using rule 75 (type_range -> ID DOBLEDOT ID .)
    COMMA           reduce using rule 75 (type_range -> ID DOBLEDOT ID .)


state 502

    (73) type_range -> ID DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 73 (type_range -> ID DOBLEDOT NUMBER .)
    COMMA           reduce using rule 73 (type_range -> ID DOBLEDOT NUMBER .)


state 503

    (74) type_range -> CHAR DOBLEDOT CHAR .

    RBRACKET        reduce using rule 74 (type_range -> CHAR DOBLEDOT CHAR .)
    COMMA           reduce using rule 74 (type_range -> CHAR DOBLEDOT CHAR .)


state 504

    (67) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 524


state 505

    (109) record_declaration -> id_list COLON data_type_list SEMICOLON .

    END             reduce using rule 109 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    CASE            reduce using rule 109 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    ID              reduce using rule 109 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    RPAREN          reduce using rule 109 (record_declaration -> id_list COLON data_type_list SEMICOLON .)


state 506

    (110) record_declaration -> CASE ID COLON data_type_list . OF variant_list

    OF              shift and go to state 525


state 507

    (78) set_range -> NUMBER DOBLEDOT NUMBER .

    EQUAL           reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    SEMICOLON       reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    RPAREN          reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    END             reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    CASE            reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ID              reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)
    OF              reduce using rule 78 (set_range -> NUMBER DOBLEDOT NUMBER .)


state 508

    (79) set_range -> CHAR DOBLEDOT CHAR .

    EQUAL           reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    SEMICOLON       reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    RPAREN          reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    END             reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    CASE            reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    ID              reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)
    OF              reduce using rule 79 (set_range -> CHAR DOBLEDOT CHAR .)


state 509

    (86) object_type -> OBJECT object_heritage object_fields object_methods END .

    EQUAL           reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    SEMICOLON       reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ABSOLUTE        reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    RPAREN          reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    END             reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    CASE            reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ID              reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    OF              reduce using rule 86 (object_type -> OBJECT object_heritage object_fields object_methods END .)


state 510

    (91) object_methods -> object_methods method_declaration .

    END             reduce using rule 91 (object_methods -> object_methods method_declaration .)
    PROCEDURE       reduce using rule 91 (object_methods -> object_methods method_declaration .)
    FUNCTION        reduce using rule 91 (object_methods -> object_methods method_declaration .)
    CONSTRUCTOR     reduce using rule 91 (object_methods -> object_methods method_declaration .)
    DESTRUCTOR      reduce using rule 91 (object_methods -> object_methods method_declaration .)


state 511

    (93) method_declaration -> procedure_header . SEMICOLON
    (97) method_declaration -> procedure_header . SEMICOLON directive

    SEMICOLON       shift and go to state 526


state 512

    (94) method_declaration -> function_header . SEMICOLON
    (98) method_declaration -> function_header . SEMICOLON directive

    SEMICOLON       shift and go to state 527


state 513

    (95) method_declaration -> constructor_declaration .

    END             reduce using rule 95 (method_declaration -> constructor_declaration .)
    PROCEDURE       reduce using rule 95 (method_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 95 (method_declaration -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 95 (method_declaration -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 95 (method_declaration -> constructor_declaration .)


state 514

    (96) method_declaration -> destructor_declaration .

    END             reduce using rule 96 (method_declaration -> destructor_declaration .)
    PROCEDURE       reduce using rule 96 (method_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 96 (method_declaration -> destructor_declaration .)
    CONSTRUCTOR     reduce using rule 96 (method_declaration -> destructor_declaration .)
    DESTRUCTOR      reduce using rule 96 (method_declaration -> destructor_declaration .)


state 515

    (103) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON
    (104) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 528


state 516

    (105) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON
    (106) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 529


state 517

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 530


state 518

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 531


state 519

    (101) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 532


state 520

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (230) empty -> .

    BEGIN           reduce using rule 230 (empty -> .)
    LABEL           reduce using rule 230 (empty -> .)
    CONST           reduce using rule 230 (empty -> .)
    TYPE            reduce using rule 230 (empty -> .)
    VAR             reduce using rule 230 (empty -> .)
    CONSTRUCTOR     reduce using rule 230 (empty -> .)
    DESTRUCTOR      reduce using rule 230 (empty -> .)
    PROCEDURE       reduce using rule 230 (empty -> .)
    FUNCTION        reduce using rule 230 (empty -> .)
    IMPLEMENTATION  reduce using rule 230 (empty -> .)
    INTERFACE       reduce using rule 230 (empty -> .)

    declaration_blocks             shift and go to state 533
    empty                          shift and go to state 11

state 521

    (211) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .

    SEMICOLON       reduce using rule 211 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)
    ELSE            reduce using rule 211 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)


state 522

    (213) case_list -> case_list case_label COLON sentence SEMICOLON .

    END             reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    LBRACKET        reduce using rule 213 (case_list -> case_list case_label COLON sentence SEMICOLON .)


state 523

    (66) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 66 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 524

    (67) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (145) data_type_list -> . INTEGER
    (146) data_type_list -> . BYTE
    (147) data_type_list -> . LONGINT
    (148) data_type_list -> . SHORTINT
    (149) data_type_list -> . WORD
    (150) data_type_list -> . REAL
    (151) data_type_list -> . SINGLE
    (152) data_type_list -> . DOUBLE
    (153) data_type_list -> . EXTENDED
    (154) data_type_list -> . SHORT
    (155) data_type_list -> . BOOLEAN
    (156) data_type_list -> . CHAR
    (157) data_type_list -> . STRING
    (158) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (159) data_type_list -> . ID
    (160) data_type_list -> . ABSOLUTE ID
    (161) data_type_list -> . FILE
    (162) data_type_list -> . array_type
    (163) data_type_list -> . pointer_type
    (164) data_type_list -> . record_type
    (165) data_type_list -> . set_type
    (166) data_type_list -> . file_type
    (167) data_type_list -> . object_type
    (168) data_type_list -> . string_type
    (66) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (67) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (68) array_type -> . ARRAY OF data_type_list
    (82) pointer_type -> . CARET ID
    (83) pointer_type -> . CARET data_type_list
    (64) record_type -> . RECORD record_list END
    (65) record_type -> . PACKED RECORD record_list END
    (81) set_type -> . SET OF set_range
    (84) file_type -> . FILE OF data_type_list
    (85) file_type -> . FILE
    (86) object_type -> . OBJECT object_heritage object_fields object_methods END
    (62) string_type -> . STRING
    (63) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 251
    BYTE            shift and go to state 252
    LONGINT         shift and go to state 253
    SHORTINT        shift and go to state 254
    WORD            shift and go to state 255
    REAL            shift and go to state 256
    SINGLE          shift and go to state 257
    DOUBLE          shift and go to state 258
    EXTENDED        shift and go to state 259
    SHORT           shift and go to state 260
    BOOLEAN         shift and go to state 261
    CHAR            shift and go to state 262
    STRING          shift and go to state 263
    ID              shift and go to state 249
    ABSOLUTE        shift and go to state 264
    FILE            shift and go to state 265
    ARRAY           shift and go to state 273
    PACKED          shift and go to state 274
    CARET           shift and go to state 275
    RECORD          shift and go to state 276
    SET             shift and go to state 277
    OBJECT          shift and go to state 278

    data_type_list                 shift and go to state 534
    array_type                     shift and go to state 266
    pointer_type                   shift and go to state 267
    record_type                    shift and go to state 268
    set_type                       shift and go to state 269
    file_type                      shift and go to state 270
    object_type                    shift and go to state 271
    string_type                    shift and go to state 272

state 525

    (110) record_declaration -> CASE ID COLON data_type_list OF . variant_list
    (112) variant_list -> . variant_list variant
    (113) variant_list -> . variant
    (114) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (115) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (116) constant_list -> . constant
    (117) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    variant_list                   shift and go to state 535
    variant                        shift and go to state 536
    constant_list                  shift and go to state 537
    constant                       shift and go to state 538
    set_constructor                shift and go to state 248

state 526

    (93) method_declaration -> procedure_header SEMICOLON .
    (97) method_declaration -> procedure_header SEMICOLON . directive
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL

    END             reduce using rule 93 (method_declaration -> procedure_header SEMICOLON .)
    PROCEDURE       reduce using rule 93 (method_declaration -> procedure_header SEMICOLON .)
    FUNCTION        reduce using rule 93 (method_declaration -> procedure_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 93 (method_declaration -> procedure_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 93 (method_declaration -> procedure_header SEMICOLON .)
    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165

    directive                      shift and go to state 539

state 527

    (94) method_declaration -> function_header SEMICOLON .
    (98) method_declaration -> function_header SEMICOLON . directive
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL

    END             reduce using rule 94 (method_declaration -> function_header SEMICOLON .)
    PROCEDURE       reduce using rule 94 (method_declaration -> function_header SEMICOLON .)
    FUNCTION        reduce using rule 94 (method_declaration -> function_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 94 (method_declaration -> function_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 94 (method_declaration -> function_header SEMICOLON .)
    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165

    directive                      shift and go to state 540

state 528

    (103) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON
    (104) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON directive
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 541
    empty                          shift and go to state 173

state 529

    (105) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON
    (106) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON directive
    (136) parameters -> . LPAREN parameter_list RPAREN
    (137) parameters -> . empty
    (230) empty -> .

    LPAREN          shift and go to state 172
    SEMICOLON       reduce using rule 230 (empty -> .)

    parameters                     shift and go to state 542
    empty                          shift and go to state 173

state 530

    (99) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 99 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 531

    (100) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 100 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 532

    (101) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 101 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 533

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (175) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (46) type_declaration_block -> . TYPE type_list
    (118) var_declaration_block -> . VAR var_list
    (124) procedure_declaration -> . procedure_header SEMICOLON directive
    (125) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (133) function_declaration -> . function_header SEMICOLON directive
    (134) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (99) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (100) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (101) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (102) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (126) procedure_header -> . PROCEDURE ID parameters
    (135) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 543
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 534

    (67) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 67 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 535

    (110) record_declaration -> CASE ID COLON data_type_list OF variant_list .
    (112) variant_list -> variant_list . variant
    (114) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (115) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (116) constant_list -> . constant
    (117) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    END             reduce using rule 110 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    CASE            reduce using rule 110 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    ID              reduce using rule 110 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    RPAREN          reduce using rule 110 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    variant                        shift and go to state 544
    constant_list                  shift and go to state 537
    constant                       shift and go to state 538
    set_constructor                shift and go to state 248

state 536

    (113) variant_list -> variant .

    NUMBER          reduce using rule 113 (variant_list -> variant .)
    STRING          reduce using rule 113 (variant_list -> variant .)
    TRUE            reduce using rule 113 (variant_list -> variant .)
    FALSE           reduce using rule 113 (variant_list -> variant .)
    NIL             reduce using rule 113 (variant_list -> variant .)
    ORDINAL_CONSTANT reduce using rule 113 (variant_list -> variant .)
    LBRACKET        reduce using rule 113 (variant_list -> variant .)
    END             reduce using rule 113 (variant_list -> variant .)
    CASE            reduce using rule 113 (variant_list -> variant .)
    ID              reduce using rule 113 (variant_list -> variant .)
    RPAREN          reduce using rule 113 (variant_list -> variant .)


state 537

    (114) variant -> constant_list . COLON LPAREN record_list RPAREN SEMICOLON
    (115) variant -> constant_list . COLON LPAREN RPAREN SEMICOLON
    (117) constant_list -> constant_list . COMMA constant

    COLON           shift and go to state 545
    COMMA           shift and go to state 546


state 538

    (116) constant_list -> constant .

    COLON           reduce using rule 116 (constant_list -> constant .)
    COMMA           reduce using rule 116 (constant_list -> constant .)


state 539

    (97) method_declaration -> procedure_header SEMICOLON directive .

    END             reduce using rule 97 (method_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 97 (method_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 97 (method_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 97 (method_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 97 (method_declaration -> procedure_header SEMICOLON directive .)


state 540

    (98) method_declaration -> function_header SEMICOLON directive .

    END             reduce using rule 98 (method_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 98 (method_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 98 (method_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 98 (method_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 98 (method_declaration -> function_header SEMICOLON directive .)


state 541

    (103) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON
    (104) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 547


state 542

    (105) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON
    (106) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 548


state 543

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 549


state 544

    (112) variant_list -> variant_list variant .

    NUMBER          reduce using rule 112 (variant_list -> variant_list variant .)
    STRING          reduce using rule 112 (variant_list -> variant_list variant .)
    TRUE            reduce using rule 112 (variant_list -> variant_list variant .)
    FALSE           reduce using rule 112 (variant_list -> variant_list variant .)
    NIL             reduce using rule 112 (variant_list -> variant_list variant .)
    ORDINAL_CONSTANT reduce using rule 112 (variant_list -> variant_list variant .)
    LBRACKET        reduce using rule 112 (variant_list -> variant_list variant .)
    END             reduce using rule 112 (variant_list -> variant_list variant .)
    CASE            reduce using rule 112 (variant_list -> variant_list variant .)
    ID              reduce using rule 112 (variant_list -> variant_list variant .)
    RPAREN          reduce using rule 112 (variant_list -> variant_list variant .)


state 545

    (114) variant -> constant_list COLON . LPAREN record_list RPAREN SEMICOLON
    (115) variant -> constant_list COLON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 550


state 546

    (117) constant_list -> constant_list COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT
    (38) constant -> . set_constructor
    (273) set_constructor -> . LBRACKET set_item_list RBRACKET
    (274) set_constructor -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 242
    STRING          shift and go to state 243
    TRUE            shift and go to state 244
    FALSE           shift and go to state 245
    NIL             shift and go to state 246
    ORDINAL_CONSTANT shift and go to state 247
    LBRACKET        shift and go to state 139

    constant                       shift and go to state 551
    set_constructor                shift and go to state 248

state 547

    (103) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .
    (104) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON . directive
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL

    END             reduce using rule 103 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 103 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 103 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 103 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 103 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165

    directive                      shift and go to state 552

state 548

    (105) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .
    (106) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON . directive
    (127) directive -> . FORWARD
    (128) directive -> . EXTERNAL
    (129) directive -> . EXTERNAL STRING
    (130) directive -> . ASM
    (131) directive -> . INLINE
    (132) directive -> . VIRTUAL

    END             reduce using rule 105 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 105 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 105 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 105 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 105 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 161
    EXTERNAL        shift and go to state 162
    ASM             shift and go to state 163
    INLINE          shift and go to state 164
    VIRTUAL         shift and go to state 165

    directive                      shift and go to state 553

state 549

    (102) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 102 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 550

    (114) variant -> constant_list COLON LPAREN . record_list RPAREN SEMICOLON
    (115) variant -> constant_list COLON LPAREN . RPAREN SEMICOLON
    (107) record_list -> . record_list record_declaration
    (108) record_list -> . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 555
    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_list                    shift and go to state 554
    record_declaration             shift and go to state 364
    id_list                        shift and go to state 365

state 551

    (117) constant_list -> constant_list COMMA constant .

    COLON           reduce using rule 117 (constant_list -> constant_list COMMA constant .)
    COMMA           reduce using rule 117 (constant_list -> constant_list COMMA constant .)


state 552

    (104) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 104 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 104 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 104 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 104 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 104 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)


state 553

    (106) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 106 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 106 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 106 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 106 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 106 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)


state 554

    (114) variant -> constant_list COLON LPAREN record_list . RPAREN SEMICOLON
    (107) record_list -> record_list . record_declaration
    (109) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (110) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (111) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 556
    CASE            shift and go to state 366
    ID              shift and go to state 13

    record_declaration             shift and go to state 423
    id_list                        shift and go to state 365

state 555

    (115) variant -> constant_list COLON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 557


state 556

    (114) variant -> constant_list COLON LPAREN record_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 558


state 557

    (115) variant -> constant_list COLON LPAREN RPAREN SEMICOLON .

    NUMBER          reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    NIL             reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 115 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)


state 558

    (114) variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .

    NUMBER          reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    STRING          reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    NIL             reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    END             reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    CASE            reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ID              reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 114 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NEW in state 30 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for CASE in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for WITH in state 30 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for ASM in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for ASIGNATION in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for TIMES_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_ASIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for NEW in state 70 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 70 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for CASE in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 70 resolved as shift
WARNING: shift/reduce conflict for WITH in state 70 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 70 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 70 resolved as shift
WARNING: shift/reduce conflict for ASM in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 93 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 93 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 94 resolved as shift
WARNING: shift/reduce conflict for CONST in state 94 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 94 resolved as shift
WARNING: shift/reduce conflict for VAR in state 94 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 94 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 94 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 94 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 94 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 94 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 94 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 226 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 232 resolved as shift
WARNING: shift/reduce conflict for STRING in state 232 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 232 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 232 resolved as shift
WARNING: shift/reduce conflict for NIL in state 232 resolved as shift
WARNING: shift/reduce conflict for ORDINAL_CONSTANT in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 232 resolved as shift
WARNING: shift/reduce conflict for OF in state 265 resolved as shift
WARNING: shift/reduce conflict for OF in state 265 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 321 resolved as shift
WARNING: shift/reduce conflict for ID in state 403 resolved as shift
WARNING: shift/reduce conflict for NEW in state 403 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 403 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 403 resolved as shift
WARNING: shift/reduce conflict for IF in state 403 resolved as shift
WARNING: shift/reduce conflict for CASE in state 403 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 403 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 403 resolved as shift
WARNING: shift/reduce conflict for WITH in state 403 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 403 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 403 resolved as shift
WARNING: shift/reduce conflict for ASM in state 403 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 403 resolved as shift
WARNING: shift/reduce conflict for FOR in state 403 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 457 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (sentences_list -> empty)
WARNING: rejected rule (sentence -> empty) in state 48
WARNING: reduce/reduce conflict in state 263 resolved using rule (string_type -> STRING)
WARNING: rejected rule (data_type_list -> STRING) in state 263
WARNING: reduce/reduce conflict in state 265 resolved using rule (file_type -> FILE)
WARNING: rejected rule (data_type_list -> FILE) in state 265
WARNING: reduce/reduce conflict in state 285 resolved using rule (type_definition -> record_type)
WARNING: rejected rule (data_type_list -> record_type) in state 285
WARNING: reduce/reduce conflict in state 286 resolved using rule (type_definition -> array_type)
WARNING: rejected rule (data_type_list -> array_type) in state 286
WARNING: reduce/reduce conflict in state 287 resolved using rule (type_definition -> set_type)
WARNING: rejected rule (data_type_list -> set_type) in state 287
WARNING: reduce/reduce conflict in state 288 resolved using rule (type_definition -> pointer_type)
WARNING: rejected rule (data_type_list -> pointer_type) in state 288
WARNING: reduce/reduce conflict in state 289 resolved using rule (type_definition -> file_type)
WARNING: rejected rule (data_type_list -> file_type) in state 289
WARNING: reduce/reduce conflict in state 290 resolved using rule (type_definition -> object_type)
WARNING: rejected rule (data_type_list -> object_type) in state 290
WARNING: reduce/reduce conflict in state 291 resolved using rule (type_definition -> string_type)
WARNING: rejected rule (data_type_list -> string_type) in state 291
WARNING: reduce/reduce conflict in state 361 resolved using rule (pointer_type -> CARET ID)
WARNING: rejected rule (data_type_list -> ID) in state 361
WARNING: reduce/reduce conflict in state 430 resolved using rule (set_range -> ID)
WARNING: rejected rule (data_type_set -> ID) in state 430
WARNING: reduce/reduce conflict in state 465 resolved using rule (string_type -> STRING LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) in state 465
WARNING: Rule (data_type_list -> STRING) is never reduced
WARNING: Rule (data_type_list -> FILE) is never reduced
WARNING: Rule (data_type_set -> ID) is never reduced
WARNING: Rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) is never reduced
