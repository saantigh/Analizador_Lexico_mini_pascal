Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISPOSE
    EXIT
    INHERITED
    INTERRUPT
    PRIVATE
    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_header uses_clause declaration_blocks main_block
Rule 2     program_header -> PROGRAM ID SEMICOLON
Rule 3     program_header -> UNIT ID SEMICOLON
Rule 4     uses_clause -> USES id_list SEMICOLON
Rule 5     uses_clause -> empty
Rule 6     id_list -> ID
Rule 7     id_list -> id_list COMMA ID
Rule 8     declaration_blocks -> declaration_blocks declaration_block
Rule 9     declaration_blocks -> empty
Rule 10    declaration_block -> label_declaration
Rule 11    declaration_block -> const_declaration_block
Rule 12    declaration_block -> type_declaration_block
Rule 13    declaration_block -> var_declaration_block
Rule 14    declaration_block -> procedure_declaration
Rule 15    declaration_block -> function_declaration
Rule 16    declaration_block -> constructor_implementation
Rule 17    declaration_block -> destructor_implementation
Rule 18    declaration_block -> method_implementation
Rule 19    declaration_block -> implementation_block
Rule 20    declaration_block -> interface_block
Rule 21    main_block -> compound_statement DOT
Rule 22    interface_block -> INTERFACE declaration_blocks
Rule 23    implementation_block -> IMPLEMENTATION declaration_blocks
Rule 24    label_declaration -> LABEL number_list SEMICOLON
Rule 25    number_list -> NUMBER
Rule 26    number_list -> number_list COMMA NUMBER
Rule 27    const_declaration_block -> CONST const_list
Rule 28    const_list -> const_list const_declaration
Rule 29    const_list -> const_declaration
Rule 30    const_declaration -> ID EQUAL constant SEMICOLON
Rule 31    const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON
Rule 32    constant -> NUMBER
Rule 33    constant -> STRING
Rule 34    constant -> TRUE
Rule 35    constant -> FALSE
Rule 36    constant -> NIL
Rule 37    constant -> ORDINAL_CONSTANT
Rule 38    type_declaration_block -> TYPE type_list
Rule 39    type_list -> type_list type_declaration
Rule 40    type_list -> type_declaration
Rule 41    type_declaration -> ID EQUAL type_definition SEMICOLON
Rule 42    type_definition -> data_type_list
Rule 43    type_definition -> LPAREN id_list RPAREN
Rule 44    type_definition -> NUMBER DOBLEDOT NUMBER
Rule 45    type_definition -> CHAR DOBLEDOT CHAR
Rule 46    type_definition -> ID DOBLEDOT ID
Rule 47    type_definition -> record_type
Rule 48    type_definition -> array_type
Rule 49    type_definition -> set_type
Rule 50    type_definition -> pointer_type
Rule 51    type_definition -> file_type
Rule 52    type_definition -> object_type
Rule 53    type_definition -> string_type
Rule 54    string_type -> STRING
Rule 55    string_type -> STRING LBRACKET NUMBER RBRACKET
Rule 56    record_type -> RECORD record_list END
Rule 57    record_type -> PACKED RECORD record_list END
Rule 58    array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 59    array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 60    type_range_list -> type_range
Rule 61    type_range_list -> type_range_list COMMA type_range
Rule 62    type_range -> NUMBER DOBLEDOT NUMBER
Rule 63    type_range -> CHAR DOBLEDOT CHAR
Rule 64    type_range -> ID DOBLEDOT ID
Rule 65    type_range -> ID
Rule 66    set_type -> SET OF set_range
Rule 67    set_range -> data_type_set
Rule 68    set_range -> NUMBER DOBLEDOT NUMBER
Rule 69    set_range -> CHAR DOBLEDOT CHAR
Rule 70    set_range -> ID
Rule 71    pointer_type -> CARET ID
Rule 72    pointer_type -> CARET data_type_list
Rule 73    file_type -> FILE OF data_type_list
Rule 74    file_type -> FILE
Rule 75    object_type -> OBJECT object_heritage object_fields object_methods END
Rule 76    object_heritage -> LPAREN ID RPAREN
Rule 77    object_heritage -> empty
Rule 78    object_fields -> object_fields var_declaration
Rule 79    object_fields -> empty
Rule 80    object_methods -> object_methods method_declaration
Rule 81    object_methods -> empty
Rule 82    method_declaration -> procedure_header SEMICOLON
Rule 83    method_declaration -> function_header SEMICOLON
Rule 84    method_declaration -> constructor_declaration
Rule 85    method_declaration -> destructor_declaration
Rule 86    method_declaration -> procedure_header SEMICOLON directive
Rule 87    method_declaration -> function_header SEMICOLON directive
Rule 88    constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 89    destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 90    method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 91    method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 92    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON
Rule 93    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive
Rule 94    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON
Rule 95    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive
Rule 96    record_list -> record_list record_declaration
Rule 97    record_list -> record_declaration
Rule 98    record_declaration -> id_list COLON data_type_list SEMICOLON
Rule 99    record_declaration -> CASE ID COLON data_type_list OF variant_list
Rule 100   record_declaration -> id_list COLON data_type_list
Rule 101   variant_list -> variant_list variant
Rule 102   variant_list -> variant
Rule 103   variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON
Rule 104   variant -> constant_list COLON LPAREN RPAREN SEMICOLON
Rule 105   constant_list -> constant
Rule 106   constant_list -> constant_list COMMA constant
Rule 107   var_declaration_block -> VAR var_list
Rule 108   var_list -> var_list var_declaration
Rule 109   var_list -> var_declaration
Rule 110   var_declaration -> id_list COLON data_type_list SEMICOLON
Rule 111   var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON
Rule 112   var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON
Rule 113   procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON
Rule 114   procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 115   procedure_header -> PROCEDURE ID parameters
Rule 116   directive -> FORWARD
Rule 117   directive -> EXTERNAL
Rule 118   directive -> EXTERNAL STRING
Rule 119   directive -> ASM
Rule 120   directive -> INLINE
Rule 121   directive -> VIRTUAL
Rule 122   function_declaration -> function_header SEMICOLON directive
Rule 123   function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 124   function_header -> FUNCTION ID parameters COLON data_type_list
Rule 125   parameters -> LPAREN parameter_list RPAREN
Rule 126   parameters -> empty
Rule 127   parameter_list -> parameter_list SEMICOLON parameter_group
Rule 128   parameter_list -> parameter_group
Rule 129   parameter_group -> id_list COLON data_type_list
Rule 130   parameter_group -> VAR id_list COLON data_type_list
Rule 131   parameter_group -> CONST id_list COLON data_type_list
Rule 132   parameter_group -> procedure_header
Rule 133   parameter_group -> function_header
Rule 134   data_type_list -> INTEGER
Rule 135   data_type_list -> BYTE
Rule 136   data_type_list -> LONGINT
Rule 137   data_type_list -> SHORTINT
Rule 138   data_type_list -> WORD
Rule 139   data_type_list -> REAL
Rule 140   data_type_list -> SINGLE
Rule 141   data_type_list -> DOUBLE
Rule 142   data_type_list -> EXTENDED
Rule 143   data_type_list -> SHORT
Rule 144   data_type_list -> BOOLEAN
Rule 145   data_type_list -> CHAR
Rule 146   data_type_list -> STRING
Rule 147   data_type_list -> STRING LBRACKET NUMBER RBRACKET
Rule 148   data_type_list -> ID
Rule 149   data_type_list -> ABSOLUTE ID
Rule 150   data_type_list -> FILE
Rule 151   data_type_set -> BYTE
Rule 152   data_type_set -> SHORTINT
Rule 153   data_type_set -> WORD
Rule 154   data_type_set -> BOOLEAN
Rule 155   data_type_set -> CHAR
Rule 156   data_type_set -> ID
Rule 157   compound_statement -> BEGIN sentences_list END
Rule 158   sentences_list -> sentences_list sentence SEMICOLON
Rule 159   sentences_list -> sentence SEMICOLON
Rule 160   sentences_list -> empty
Rule 161   sentence -> assignment
Rule 162   sentence -> procedure_call
Rule 163   sentence -> compound_statement
Rule 164   sentence -> if_statement
Rule 165   sentence -> case_statement
Rule 166   sentence -> for_statement
Rule 167   sentence -> while_statement
Rule 168   sentence -> repeat_statement
Rule 169   sentence -> with_statement
Rule 170   sentence -> goto_statement
Rule 171   sentence -> labeled_sentence
Rule 172   sentence -> asm_statement
Rule 173   sentence -> empty
Rule 174   asm_statement -> ASM
Rule 175   assignment -> variable ASIGNATION expression
Rule 176   procedure_call -> ID
Rule 177   procedure_call -> ID LPAREN expression_list RPAREN
Rule 178   procedure_call -> ID LPAREN RPAREN
Rule 179   procedure_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 180   procedure_call -> variable DOT ID LPAREN RPAREN
Rule 181   procedure_call -> NEW LPAREN expression_list RPAREN
Rule 182   procedure_call -> NEW LPAREN RPAREN
Rule 183   if_statement -> IF expression THEN sentence
Rule 184   if_statement -> IF expression THEN sentence ELSE sentence
Rule 185   case_statement -> CASE expression OF case_list END
Rule 186   case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END
Rule 187   case_statement -> CASE expression OF case_list ELSE sentences_list END
Rule 188   case_list -> case_list case_label COLON sentence SEMICOLON
Rule 189   case_list -> case_label COLON sentence SEMICOLON
Rule 190   case_list -> empty
Rule 191   case_label -> constant
Rule 192   case_label -> constant DOBLEDOT constant
Rule 193   case_label -> case_label COMMA constant
Rule 194   for_statement -> FOR ID ASIGNATION expression TO expression DO sentence
Rule 195   for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence
Rule 196   while_statement -> WHILE expression DO sentence
Rule 197   repeat_statement -> REPEAT sentences_list UNTIL expression
Rule 198   with_statement -> WITH variable_list DO sentence
Rule 199   variable_list -> variable
Rule 200   variable_list -> variable_list COMMA variable
Rule 201   goto_statement -> GOTO NUMBER
Rule 202   labeled_sentence -> NUMBER COLON sentence
Rule 203   empty -> <empty>
Rule 204   expression -> expression OR simple_expression
Rule 205   expression -> expression XOR simple_expression
Rule 206   expression -> simple_expression
Rule 207   simple_expression -> simple_expression AND relational_expression
Rule 208   simple_expression -> relational_expression
Rule 209   relational_expression -> relational_expression relational_operator additive_expression
Rule 210   relational_expression -> additive_expression
Rule 211   relational_operator -> EQUAL
Rule 212   relational_operator -> DISTINT
Rule 213   relational_operator -> LESS
Rule 214   relational_operator -> LESSEQUAL
Rule 215   relational_operator -> GREATER
Rule 216   relational_operator -> GREATEREQUAL
Rule 217   relational_operator -> IN
Rule 218   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 219   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 220   additive_expression -> multiplicative_expression
Rule 221   multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 222   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 223   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 224   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 225   multiplicative_expression -> multiplicative_expression SHL unary_expression
Rule 226   multiplicative_expression -> multiplicative_expression SHR unary_expression
Rule 227   multiplicative_expression -> unary_expression
Rule 228   unary_expression -> NOT unary_expression
Rule 229   unary_expression -> MINUS unary_expression
Rule 230   unary_expression -> PLUS unary_expression
Rule 231   unary_expression -> ADDRESS_OF unary_expression
Rule 232   unary_expression -> primary_expression
Rule 233   primary_expression -> variable
Rule 234   primary_expression -> NUMBER
Rule 235   primary_expression -> STRING
Rule 236   primary_expression -> TRUE
Rule 237   primary_expression -> FALSE
Rule 238   primary_expression -> NIL
Rule 239   primary_expression -> LPAREN expression RPAREN
Rule 240   primary_expression -> function_call
Rule 241   primary_expression -> set_constructor
Rule 242   set_item -> expression
Rule 243   set_item -> expression DOBLEDOT expression
Rule 244   set_item_list -> set_item
Rule 245   set_item_list -> set_item_list COMMA set_item
Rule 246   set_constructor -> LBRACKET set_item_list RBRACKET
Rule 247   set_constructor -> LBRACKET RBRACKET
Rule 248   variable -> ID
Rule 249   variable -> variable DOT ID
Rule 250   variable -> variable LBRACKET expression_list RBRACKET
Rule 251   variable -> variable CARET
Rule 252   function_call -> ID LPAREN expression_list RPAREN
Rule 253   function_call -> ID LPAREN RPAREN
Rule 254   function_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 255   function_call -> variable DOT ID LPAREN RPAREN
Rule 256   expression_list -> expression
Rule 257   expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

ABSOLUTE             : 112 149
ADDRESS_OF           : 231
AND                  : 207
ARRAY                : 58 59
ASIGNATION           : 175 194 195
ASM                  : 119 174
BEGIN                : 157
BOOLEAN              : 144 154
BYTE                 : 135 151
CARET                : 71 72 251
CASE                 : 99 185 186 187
CHAR                 : 45 45 63 63 69 69 145 155
COLON                : 31 91 98 99 100 103 104 110 111 112 124 129 130 131 188 189 202
COMMA                : 7 26 61 106 193 200 245 257
CONST                : 27 131
CONSTRUCTOR          : 88 92 93
DESTRUCTOR           : 89 94 95
DISPOSE              : 
DISTINT              : 212
DIV                  : 223
DIVIDE               : 222
DO                   : 194 195 196 198
DOBLEDOT             : 44 45 46 62 63 64 68 69 192 243
DOT                  : 21 88 89 90 91 179 180 249 254 255
DOUBLE               : 141
DOWNTO               : 195
ELSE                 : 184 186 187
END                  : 56 57 75 157 185 186 187
EQUAL                : 30 31 41 111 211
EXIT                 : 
EXTENDED             : 142
EXTERNAL             : 117 118
FALSE                : 35 237
FILE                 : 73 74 150
FOR                  : 194 195
FORWARD              : 116
FUNCTION             : 91 124
GOTO                 : 201
GREATER              : 215
GREATEREQUAL         : 216
ID                   : 2 3 6 7 30 31 41 46 46 64 64 65 70 71 76 88 88 89 89 90 90 91 91 92 93 94 95 99 112 115 124 148 149 156 176 177 178 179 180 194 195 248 249 252 253 254 255
IF                   : 183 184
IMPLEMENTATION       : 23
IN                   : 217
INHERITED            : 
INLINE               : 120
INTEGER              : 134
INTERFACE            : 22
INTERRUPT            : 
LABEL                : 24
LBRACKET             : 55 58 59 147 246 247 250
LESS                 : 213
LESSEQUAL            : 214
LONGINT              : 136
LPAREN               : 43 76 103 104 125 177 178 179 180 181 182 239 252 253 254 255
MINUS                : 219 229
MOD                  : 224
NEW                  : 181 182
NIL                  : 36 238
NOT                  : 228
NUMBER               : 25 26 32 44 44 55 62 62 68 68 147 201 202 234
OBJECT               : 75
OF                   : 58 59 66 73 99 185 186 187
OR                   : 204
ORDINAL_CONSTANT     : 37
PACKED               : 57 59
PLUS                 : 218 230
PRIVATE              : 
PROCEDURE            : 90 115
PROGRAM              : 2
RBRACKET             : 55 58 59 147 246 247 250
REAL                 : 139
RECORD               : 56 57
REPEAT               : 197
RPAREN               : 43 76 103 104 125 177 178 179 180 181 182 239 252 253 254 255
SEMICOLON            : 2 3 4 24 30 31 41 82 83 86 87 88 88 89 89 90 90 91 91 92 93 94 95 98 103 104 110 111 112 113 113 114 114 122 123 123 127 158 159 186 188 189
SET                  : 66
SHL                  : 225
SHORT                : 143
SHORTINT             : 137 152
SHR                  : 226
SINGLE               : 140
STRING               : 33 54 55 118 146 147 235
TEXT                 : 
THEN                 : 183 184
TIMES                : 221
TO                   : 194
TRUE                 : 34 236
TYPE                 : 38
UNIT                 : 3
UNTIL                : 197
USES                 : 4
VAR                  : 107 130
VIRTUAL              : 121
WHILE                : 196
WITH                 : 198
WORD                 : 138 153
XOR                  : 205
error                : 

Nonterminals, with rules where they appear

additive_expression  : 209 210 218 219
array_type           : 48
asm_statement        : 172
assignment           : 161
case_label           : 188 189 193
case_list            : 185 186 187 188
case_statement       : 165
compound_statement   : 21 88 89 90 91 114 123 163
const_declaration    : 28 29
const_declaration_block : 11
const_list           : 27 28
constant             : 30 31 105 106 191 192 192 193
constant_list        : 103 104 106
constructor_declaration : 84
constructor_implementation : 16
data_type_list       : 31 42 58 59 72 73 91 98 99 100 110 111 112 124 129 130 131
data_type_set        : 67
declaration_block    : 8
declaration_blocks   : 1 8 22 23 88 89 90 91 114 123
destructor_declaration : 85
destructor_implementation : 17
directive            : 86 87 93 95 113 122
empty                : 5 9 77 79 81 126 160 173 190
expression           : 111 175 183 184 185 186 187 194 194 195 195 196 197 204 205 239 242 243 243 256 257
expression_list      : 177 179 181 250 252 254 257
file_type            : 51
for_statement        : 166
function_call        : 240
function_declaration : 15
function_header      : 83 87 122 123 133
goto_statement       : 170
id_list              : 4 7 43 98 100 110 111 112 129 130 131
if_statement         : 164
implementation_block : 19
interface_block      : 20
label_declaration    : 10
labeled_sentence     : 171
main_block           : 1
method_declaration   : 80
method_implementation : 18
multiplicative_expression : 218 219 220 221 222 223 224 225 226
number_list          : 24 26
object_fields        : 75 78
object_heritage      : 75
object_methods       : 75 80
object_type          : 52
parameter_group      : 127 128
parameter_list       : 125 127
parameters           : 88 89 90 91 92 93 94 95 115 124
pointer_type         : 50
primary_expression   : 232
procedure_call       : 162
procedure_declaration : 14
procedure_header     : 82 86 113 114 132
program              : 0
program_header       : 1
record_declaration   : 96 97
record_list          : 56 57 96 103
record_type          : 47
relational_expression : 207 208 209
relational_operator  : 209
repeat_statement     : 168
sentence             : 158 159 183 184 184 188 189 194 195 196 198 202
sentences_list       : 157 158 186 187 197
set_constructor      : 241
set_item             : 244 245
set_item_list        : 245 246
set_range            : 66
set_type             : 49
simple_expression    : 204 205 206 207
string_type          : 53
type_declaration     : 39 40
type_declaration_block : 12
type_definition      : 41
type_list            : 38 39
type_range           : 60 61
type_range_list      : 58 59 61
unary_expression     : 221 222 223 224 225 226 227 228 229 230 231
uses_clause          : 1
var_declaration      : 78 108 109
var_declaration_block : 13
var_list             : 107 108
variable             : 175 179 180 199 200 233 249 250 251 254 255
variable_list        : 198 200
variant              : 101 102
variant_list         : 99 101
while_statement      : 167
with_statement       : 169

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_header uses_clause declaration_blocks main_block
    (2) program_header -> . PROGRAM ID SEMICOLON
    (3) program_header -> . UNIT ID SEMICOLON

    PROGRAM         shift and go to state 3
    UNIT            shift and go to state 4

    program                        shift and go to state 1
    program_header                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_header . uses_clause declaration_blocks main_block
    (4) uses_clause -> . USES id_list SEMICOLON
    (5) uses_clause -> . empty
    (203) empty -> .

    USES            shift and go to state 6
    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    uses_clause                    shift and go to state 5
    empty                          shift and go to state 7

state 3

    (2) program_header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 8


state 4

    (3) program_header -> UNIT . ID SEMICOLON

    ID              shift and go to state 9


state 5

    (1) program -> program_header uses_clause . declaration_blocks main_block
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 10
    empty                          shift and go to state 11

state 6

    (4) uses_clause -> USES . id_list SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 12

state 7

    (5) uses_clause -> empty .

    BEGIN           reduce using rule 5 (uses_clause -> empty .)
    LABEL           reduce using rule 5 (uses_clause -> empty .)
    CONST           reduce using rule 5 (uses_clause -> empty .)
    TYPE            reduce using rule 5 (uses_clause -> empty .)
    VAR             reduce using rule 5 (uses_clause -> empty .)
    CONSTRUCTOR     reduce using rule 5 (uses_clause -> empty .)
    DESTRUCTOR      reduce using rule 5 (uses_clause -> empty .)
    PROCEDURE       reduce using rule 5 (uses_clause -> empty .)
    FUNCTION        reduce using rule 5 (uses_clause -> empty .)
    IMPLEMENTATION  reduce using rule 5 (uses_clause -> empty .)
    INTERFACE       reduce using rule 5 (uses_clause -> empty .)


state 8

    (2) program_header -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (3) program_header -> UNIT ID . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (1) program -> program_header uses_clause declaration_blocks . main_block
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (21) main_block -> . compound_statement DOT
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (157) compound_statement -> . BEGIN sentences_list END
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    main_block                     shift and go to state 16
    declaration_block              shift and go to state 17
    compound_statement             shift and go to state 18
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 11

    (9) declaration_blocks -> empty .

    BEGIN           reduce using rule 9 (declaration_blocks -> empty .)
    LABEL           reduce using rule 9 (declaration_blocks -> empty .)
    CONST           reduce using rule 9 (declaration_blocks -> empty .)
    TYPE            reduce using rule 9 (declaration_blocks -> empty .)
    VAR             reduce using rule 9 (declaration_blocks -> empty .)
    CONSTRUCTOR     reduce using rule 9 (declaration_blocks -> empty .)
    DESTRUCTOR      reduce using rule 9 (declaration_blocks -> empty .)
    PROCEDURE       reduce using rule 9 (declaration_blocks -> empty .)
    FUNCTION        reduce using rule 9 (declaration_blocks -> empty .)
    IMPLEMENTATION  reduce using rule 9 (declaration_blocks -> empty .)
    INTERFACE       reduce using rule 9 (declaration_blocks -> empty .)


state 12

    (4) uses_clause -> USES id_list . SEMICOLON
    (7) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44


state 13

    (6) id_list -> ID .

    SEMICOLON       reduce using rule 6 (id_list -> ID .)
    COMMA           reduce using rule 6 (id_list -> ID .)
    COLON           reduce using rule 6 (id_list -> ID .)
    RPAREN          reduce using rule 6 (id_list -> ID .)


state 14

    (2) program_header -> PROGRAM ID SEMICOLON .

    USES            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    BEGIN           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    LABEL           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONST           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    TYPE            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    INTERFACE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)


state 15

    (3) program_header -> UNIT ID SEMICOLON .

    USES            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    BEGIN           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    LABEL           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONST           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    TYPE            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    VAR             reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    INTERFACE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)


state 16

    (1) program -> program_header uses_clause declaration_blocks main_block .

    $end            reduce using rule 1 (program -> program_header uses_clause declaration_blocks main_block .)


state 17

    (8) declaration_blocks -> declaration_blocks declaration_block .

    BEGIN           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    LABEL           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONST           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    TYPE            reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    VAR             reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONSTRUCTOR     reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    DESTRUCTOR      reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    PROCEDURE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    FUNCTION        reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    IMPLEMENTATION  reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    INTERFACE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)


state 18

    (21) main_block -> compound_statement . DOT

    DOT             shift and go to state 45


state 19

    (10) declaration_block -> label_declaration .

    BEGIN           reduce using rule 10 (declaration_block -> label_declaration .)
    LABEL           reduce using rule 10 (declaration_block -> label_declaration .)
    CONST           reduce using rule 10 (declaration_block -> label_declaration .)
    TYPE            reduce using rule 10 (declaration_block -> label_declaration .)
    VAR             reduce using rule 10 (declaration_block -> label_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_block -> label_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_block -> label_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_block -> label_declaration .)
    FUNCTION        reduce using rule 10 (declaration_block -> label_declaration .)
    IMPLEMENTATION  reduce using rule 10 (declaration_block -> label_declaration .)
    INTERFACE       reduce using rule 10 (declaration_block -> label_declaration .)


state 20

    (11) declaration_block -> const_declaration_block .

    BEGIN           reduce using rule 11 (declaration_block -> const_declaration_block .)
    LABEL           reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONST           reduce using rule 11 (declaration_block -> const_declaration_block .)
    TYPE            reduce using rule 11 (declaration_block -> const_declaration_block .)
    VAR             reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONSTRUCTOR     reduce using rule 11 (declaration_block -> const_declaration_block .)
    DESTRUCTOR      reduce using rule 11 (declaration_block -> const_declaration_block .)
    PROCEDURE       reduce using rule 11 (declaration_block -> const_declaration_block .)
    FUNCTION        reduce using rule 11 (declaration_block -> const_declaration_block .)
    IMPLEMENTATION  reduce using rule 11 (declaration_block -> const_declaration_block .)
    INTERFACE       reduce using rule 11 (declaration_block -> const_declaration_block .)


state 21

    (12) declaration_block -> type_declaration_block .

    BEGIN           reduce using rule 12 (declaration_block -> type_declaration_block .)
    LABEL           reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONST           reduce using rule 12 (declaration_block -> type_declaration_block .)
    TYPE            reduce using rule 12 (declaration_block -> type_declaration_block .)
    VAR             reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONSTRUCTOR     reduce using rule 12 (declaration_block -> type_declaration_block .)
    DESTRUCTOR      reduce using rule 12 (declaration_block -> type_declaration_block .)
    PROCEDURE       reduce using rule 12 (declaration_block -> type_declaration_block .)
    FUNCTION        reduce using rule 12 (declaration_block -> type_declaration_block .)
    IMPLEMENTATION  reduce using rule 12 (declaration_block -> type_declaration_block .)
    INTERFACE       reduce using rule 12 (declaration_block -> type_declaration_block .)


state 22

    (13) declaration_block -> var_declaration_block .

    BEGIN           reduce using rule 13 (declaration_block -> var_declaration_block .)
    LABEL           reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONST           reduce using rule 13 (declaration_block -> var_declaration_block .)
    TYPE            reduce using rule 13 (declaration_block -> var_declaration_block .)
    VAR             reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONSTRUCTOR     reduce using rule 13 (declaration_block -> var_declaration_block .)
    DESTRUCTOR      reduce using rule 13 (declaration_block -> var_declaration_block .)
    PROCEDURE       reduce using rule 13 (declaration_block -> var_declaration_block .)
    FUNCTION        reduce using rule 13 (declaration_block -> var_declaration_block .)
    IMPLEMENTATION  reduce using rule 13 (declaration_block -> var_declaration_block .)
    INTERFACE       reduce using rule 13 (declaration_block -> var_declaration_block .)


state 23

    (14) declaration_block -> procedure_declaration .

    BEGIN           reduce using rule 14 (declaration_block -> procedure_declaration .)
    LABEL           reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONST           reduce using rule 14 (declaration_block -> procedure_declaration .)
    TYPE            reduce using rule 14 (declaration_block -> procedure_declaration .)
    VAR             reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 14 (declaration_block -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 14 (declaration_block -> procedure_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_block -> procedure_declaration .)
    FUNCTION        reduce using rule 14 (declaration_block -> procedure_declaration .)
    IMPLEMENTATION  reduce using rule 14 (declaration_block -> procedure_declaration .)
    INTERFACE       reduce using rule 14 (declaration_block -> procedure_declaration .)


state 24

    (15) declaration_block -> function_declaration .

    BEGIN           reduce using rule 15 (declaration_block -> function_declaration .)
    LABEL           reduce using rule 15 (declaration_block -> function_declaration .)
    CONST           reduce using rule 15 (declaration_block -> function_declaration .)
    TYPE            reduce using rule 15 (declaration_block -> function_declaration .)
    VAR             reduce using rule 15 (declaration_block -> function_declaration .)
    CONSTRUCTOR     reduce using rule 15 (declaration_block -> function_declaration .)
    DESTRUCTOR      reduce using rule 15 (declaration_block -> function_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_block -> function_declaration .)
    FUNCTION        reduce using rule 15 (declaration_block -> function_declaration .)
    IMPLEMENTATION  reduce using rule 15 (declaration_block -> function_declaration .)
    INTERFACE       reduce using rule 15 (declaration_block -> function_declaration .)


state 25

    (16) declaration_block -> constructor_implementation .

    BEGIN           reduce using rule 16 (declaration_block -> constructor_implementation .)
    LABEL           reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONST           reduce using rule 16 (declaration_block -> constructor_implementation .)
    TYPE            reduce using rule 16 (declaration_block -> constructor_implementation .)
    VAR             reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONSTRUCTOR     reduce using rule 16 (declaration_block -> constructor_implementation .)
    DESTRUCTOR      reduce using rule 16 (declaration_block -> constructor_implementation .)
    PROCEDURE       reduce using rule 16 (declaration_block -> constructor_implementation .)
    FUNCTION        reduce using rule 16 (declaration_block -> constructor_implementation .)
    IMPLEMENTATION  reduce using rule 16 (declaration_block -> constructor_implementation .)
    INTERFACE       reduce using rule 16 (declaration_block -> constructor_implementation .)


state 26

    (17) declaration_block -> destructor_implementation .

    BEGIN           reduce using rule 17 (declaration_block -> destructor_implementation .)
    LABEL           reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONST           reduce using rule 17 (declaration_block -> destructor_implementation .)
    TYPE            reduce using rule 17 (declaration_block -> destructor_implementation .)
    VAR             reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONSTRUCTOR     reduce using rule 17 (declaration_block -> destructor_implementation .)
    DESTRUCTOR      reduce using rule 17 (declaration_block -> destructor_implementation .)
    PROCEDURE       reduce using rule 17 (declaration_block -> destructor_implementation .)
    FUNCTION        reduce using rule 17 (declaration_block -> destructor_implementation .)
    IMPLEMENTATION  reduce using rule 17 (declaration_block -> destructor_implementation .)
    INTERFACE       reduce using rule 17 (declaration_block -> destructor_implementation .)


state 27

    (18) declaration_block -> method_implementation .

    BEGIN           reduce using rule 18 (declaration_block -> method_implementation .)
    LABEL           reduce using rule 18 (declaration_block -> method_implementation .)
    CONST           reduce using rule 18 (declaration_block -> method_implementation .)
    TYPE            reduce using rule 18 (declaration_block -> method_implementation .)
    VAR             reduce using rule 18 (declaration_block -> method_implementation .)
    CONSTRUCTOR     reduce using rule 18 (declaration_block -> method_implementation .)
    DESTRUCTOR      reduce using rule 18 (declaration_block -> method_implementation .)
    PROCEDURE       reduce using rule 18 (declaration_block -> method_implementation .)
    FUNCTION        reduce using rule 18 (declaration_block -> method_implementation .)
    IMPLEMENTATION  reduce using rule 18 (declaration_block -> method_implementation .)
    INTERFACE       reduce using rule 18 (declaration_block -> method_implementation .)


state 28

    (19) declaration_block -> implementation_block .

    BEGIN           reduce using rule 19 (declaration_block -> implementation_block .)
    LABEL           reduce using rule 19 (declaration_block -> implementation_block .)
    CONST           reduce using rule 19 (declaration_block -> implementation_block .)
    TYPE            reduce using rule 19 (declaration_block -> implementation_block .)
    VAR             reduce using rule 19 (declaration_block -> implementation_block .)
    CONSTRUCTOR     reduce using rule 19 (declaration_block -> implementation_block .)
    DESTRUCTOR      reduce using rule 19 (declaration_block -> implementation_block .)
    PROCEDURE       reduce using rule 19 (declaration_block -> implementation_block .)
    FUNCTION        reduce using rule 19 (declaration_block -> implementation_block .)
    IMPLEMENTATION  reduce using rule 19 (declaration_block -> implementation_block .)
    INTERFACE       reduce using rule 19 (declaration_block -> implementation_block .)


state 29

    (20) declaration_block -> interface_block .

    BEGIN           reduce using rule 20 (declaration_block -> interface_block .)
    LABEL           reduce using rule 20 (declaration_block -> interface_block .)
    CONST           reduce using rule 20 (declaration_block -> interface_block .)
    TYPE            reduce using rule 20 (declaration_block -> interface_block .)
    VAR             reduce using rule 20 (declaration_block -> interface_block .)
    CONSTRUCTOR     reduce using rule 20 (declaration_block -> interface_block .)
    DESTRUCTOR      reduce using rule 20 (declaration_block -> interface_block .)
    PROCEDURE       reduce using rule 20 (declaration_block -> interface_block .)
    FUNCTION        reduce using rule 20 (declaration_block -> interface_block .)
    IMPLEMENTATION  reduce using rule 20 (declaration_block -> interface_block .)
    INTERFACE       reduce using rule 20 (declaration_block -> interface_block .)


state 30

    (157) compound_statement -> BEGIN . sentences_list END
    (158) sentences_list -> . sentences_list sentence SEMICOLON
    (159) sentences_list -> . sentence SEMICOLON
    (160) sentences_list -> . empty
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (203) empty -> .
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
    END             reduce using rule 203 (empty -> .)
    SEMICOLON       reduce using rule 203 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72

  ! ID              [ reduce using rule 203 (empty -> .) ]
  ! NEW             [ reduce using rule 203 (empty -> .) ]
  ! BEGIN           [ reduce using rule 203 (empty -> .) ]
  ! IF              [ reduce using rule 203 (empty -> .) ]
  ! CASE            [ reduce using rule 203 (empty -> .) ]
  ! FOR             [ reduce using rule 203 (empty -> .) ]
  ! WHILE           [ reduce using rule 203 (empty -> .) ]
  ! REPEAT          [ reduce using rule 203 (empty -> .) ]
  ! WITH            [ reduce using rule 203 (empty -> .) ]
  ! GOTO            [ reduce using rule 203 (empty -> .) ]
  ! NUMBER          [ reduce using rule 203 (empty -> .) ]
  ! ASM             [ reduce using rule 203 (empty -> .) ]

    sentences_list                 shift and go to state 46
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 31

    (24) label_declaration -> LABEL . number_list SEMICOLON
    (25) number_list -> . NUMBER
    (26) number_list -> . number_list COMMA NUMBER

    NUMBER          shift and go to state 74

    number_list                    shift and go to state 73

state 32

    (27) const_declaration_block -> CONST . const_list
    (28) const_list -> . const_list const_declaration
    (29) const_list -> . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    ID              shift and go to state 77

    const_list                     shift and go to state 75
    const_declaration              shift and go to state 76

state 33

    (38) type_declaration_block -> TYPE . type_list
    (39) type_list -> . type_list type_declaration
    (40) type_list -> . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    ID              shift and go to state 80

    type_list                      shift and go to state 78
    type_declaration               shift and go to state 79

state 34

    (107) var_declaration_block -> VAR . var_list
    (108) var_list -> . var_list var_declaration
    (109) var_list -> . var_declaration
    (110) var_declaration -> . id_list COLON data_type_list SEMICOLON
    (111) var_declaration -> . id_list COLON data_type_list EQUAL expression SEMICOLON
    (112) var_declaration -> . id_list COLON data_type_list ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    var_list                       shift and go to state 81
    var_declaration                shift and go to state 82
    id_list                        shift and go to state 83

state 35

    (113) procedure_declaration -> procedure_header . SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> procedure_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 84


state 36

    (122) function_declaration -> function_header . SEMICOLON directive
    (123) function_declaration -> function_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 85


state 37

    (88) constructor_implementation -> CONSTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 86


state 38

    (89) destructor_implementation -> DESTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 87


state 39

    (90) method_implementation -> PROCEDURE . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (115) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 88


state 40

    (91) method_implementation -> FUNCTION . ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (124) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 89


state 41

    (23) implementation_block -> IMPLEMENTATION . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)
    BEGIN           reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 90
    empty                          shift and go to state 11

state 42

    (22) interface_block -> INTERFACE . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)
    BEGIN           reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 91
    empty                          shift and go to state 11

state 43

    (4) uses_clause -> USES id_list SEMICOLON .

    BEGIN           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    LABEL           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONST           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    VAR             reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    INTERFACE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)


state 44

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 92


state 45

    (21) main_block -> compound_statement DOT .

    $end            reduce using rule 21 (main_block -> compound_statement DOT .)


state 46

    (157) compound_statement -> BEGIN sentences_list . END
    (158) sentences_list -> sentences_list . sentence SEMICOLON
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    END             shift and go to state 93
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 94
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 47

    (159) sentences_list -> sentence . SEMICOLON

    SEMICOLON       shift and go to state 96


state 48

    (160) sentences_list -> empty .
    (173) sentence -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 160 (sentences_list -> empty .)
    END             reduce using rule 160 (sentences_list -> empty .)
    ID              reduce using rule 160 (sentences_list -> empty .)
    NEW             reduce using rule 160 (sentences_list -> empty .)
    BEGIN           reduce using rule 160 (sentences_list -> empty .)
    IF              reduce using rule 160 (sentences_list -> empty .)
    CASE            reduce using rule 160 (sentences_list -> empty .)
    FOR             reduce using rule 160 (sentences_list -> empty .)
    WHILE           reduce using rule 160 (sentences_list -> empty .)
    REPEAT          reduce using rule 160 (sentences_list -> empty .)
    WITH            reduce using rule 160 (sentences_list -> empty .)
    GOTO            reduce using rule 160 (sentences_list -> empty .)
    NUMBER          reduce using rule 160 (sentences_list -> empty .)
    ASM             reduce using rule 160 (sentences_list -> empty .)
    SEMICOLON       reduce using rule 160 (sentences_list -> empty .)
    UNTIL           reduce using rule 160 (sentences_list -> empty .)

  ! SEMICOLON       [ reduce using rule 173 (sentence -> empty .) ]


state 49

    (161) sentence -> assignment .

    SEMICOLON       reduce using rule 161 (sentence -> assignment .)
    ELSE            reduce using rule 161 (sentence -> assignment .)


state 50

    (162) sentence -> procedure_call .

    SEMICOLON       reduce using rule 162 (sentence -> procedure_call .)
    ELSE            reduce using rule 162 (sentence -> procedure_call .)


state 51

    (163) sentence -> compound_statement .

    SEMICOLON       reduce using rule 163 (sentence -> compound_statement .)
    ELSE            reduce using rule 163 (sentence -> compound_statement .)


state 52

    (164) sentence -> if_statement .

    SEMICOLON       reduce using rule 164 (sentence -> if_statement .)
    ELSE            reduce using rule 164 (sentence -> if_statement .)


state 53

    (165) sentence -> case_statement .

    SEMICOLON       reduce using rule 165 (sentence -> case_statement .)
    ELSE            reduce using rule 165 (sentence -> case_statement .)


state 54

    (166) sentence -> for_statement .

    SEMICOLON       reduce using rule 166 (sentence -> for_statement .)
    ELSE            reduce using rule 166 (sentence -> for_statement .)


state 55

    (167) sentence -> while_statement .

    SEMICOLON       reduce using rule 167 (sentence -> while_statement .)
    ELSE            reduce using rule 167 (sentence -> while_statement .)


state 56

    (168) sentence -> repeat_statement .

    SEMICOLON       reduce using rule 168 (sentence -> repeat_statement .)
    ELSE            reduce using rule 168 (sentence -> repeat_statement .)


state 57

    (169) sentence -> with_statement .

    SEMICOLON       reduce using rule 169 (sentence -> with_statement .)
    ELSE            reduce using rule 169 (sentence -> with_statement .)


state 58

    (170) sentence -> goto_statement .

    SEMICOLON       reduce using rule 170 (sentence -> goto_statement .)
    ELSE            reduce using rule 170 (sentence -> goto_statement .)


state 59

    (171) sentence -> labeled_sentence .

    SEMICOLON       reduce using rule 171 (sentence -> labeled_sentence .)
    ELSE            reduce using rule 171 (sentence -> labeled_sentence .)


state 60

    (172) sentence -> asm_statement .

    SEMICOLON       reduce using rule 172 (sentence -> asm_statement .)
    ELSE            reduce using rule 172 (sentence -> asm_statement .)


state 61

    (175) assignment -> variable . ASIGNATION expression
    (179) procedure_call -> variable . DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> variable . DOT ID LPAREN RPAREN
    (249) variable -> variable . DOT ID
    (250) variable -> variable . LBRACKET expression_list RBRACKET
    (251) variable -> variable . CARET

    ASIGNATION      shift and go to state 97
    DOT             shift and go to state 98
    LBRACKET        shift and go to state 99
    CARET           shift and go to state 100


state 62

    (176) procedure_call -> ID .
    (177) procedure_call -> ID . LPAREN expression_list RPAREN
    (178) procedure_call -> ID . LPAREN RPAREN
    (248) variable -> ID .

    SEMICOLON       reduce using rule 176 (procedure_call -> ID .)
    ELSE            reduce using rule 176 (procedure_call -> ID .)
    LPAREN          shift and go to state 101
    ASIGNATION      reduce using rule 248 (variable -> ID .)
    DOT             reduce using rule 248 (variable -> ID .)
    LBRACKET        reduce using rule 248 (variable -> ID .)
    CARET           reduce using rule 248 (variable -> ID .)


state 63

    (181) procedure_call -> NEW . LPAREN expression_list RPAREN
    (182) procedure_call -> NEW . LPAREN RPAREN

    LPAREN          shift and go to state 102


state 64

    (183) if_statement -> IF . expression THEN sentence
    (184) if_statement -> IF . expression THEN sentence ELSE sentence
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 103
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 65

    (185) case_statement -> CASE . expression OF case_list END
    (186) case_statement -> CASE . expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> CASE . expression OF case_list ELSE sentences_list END
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 125
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 66

    (194) for_statement -> FOR . ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> FOR . ID ASIGNATION expression DOWNTO expression DO sentence

    ID              shift and go to state 126


state 67

    (196) while_statement -> WHILE . expression DO sentence
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 127
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 68

    (197) repeat_statement -> REPEAT . sentences_list UNTIL expression
    (158) sentences_list -> . sentences_list sentence SEMICOLON
    (159) sentences_list -> . sentence SEMICOLON
    (160) sentences_list -> . empty
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (203) empty -> .
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
    UNTIL           reduce using rule 203 (empty -> .)
    SEMICOLON       reduce using rule 203 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72

  ! ID              [ reduce using rule 203 (empty -> .) ]
  ! NEW             [ reduce using rule 203 (empty -> .) ]
  ! BEGIN           [ reduce using rule 203 (empty -> .) ]
  ! IF              [ reduce using rule 203 (empty -> .) ]
  ! CASE            [ reduce using rule 203 (empty -> .) ]
  ! FOR             [ reduce using rule 203 (empty -> .) ]
  ! WHILE           [ reduce using rule 203 (empty -> .) ]
  ! REPEAT          [ reduce using rule 203 (empty -> .) ]
  ! WITH            [ reduce using rule 203 (empty -> .) ]
  ! GOTO            [ reduce using rule 203 (empty -> .) ]
  ! NUMBER          [ reduce using rule 203 (empty -> .) ]
  ! ASM             [ reduce using rule 203 (empty -> .) ]

    sentences_list                 shift and go to state 128
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 69

    (198) with_statement -> WITH . variable_list DO sentence
    (199) variable_list -> . variable
    (200) variable_list -> . variable_list COMMA variable
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 131

    variable_list                  shift and go to state 129
    variable                       shift and go to state 130

state 70

    (201) goto_statement -> GOTO . NUMBER

    NUMBER          shift and go to state 132


state 71

    (202) labeled_sentence -> NUMBER . COLON sentence

    COLON           shift and go to state 133


state 72

    (174) asm_statement -> ASM .

    SEMICOLON       reduce using rule 174 (asm_statement -> ASM .)
    ELSE            reduce using rule 174 (asm_statement -> ASM .)


state 73

    (24) label_declaration -> LABEL number_list . SEMICOLON
    (26) number_list -> number_list . COMMA NUMBER

    SEMICOLON       shift and go to state 134
    COMMA           shift and go to state 135


state 74

    (25) number_list -> NUMBER .

    SEMICOLON       reduce using rule 25 (number_list -> NUMBER .)
    COMMA           reduce using rule 25 (number_list -> NUMBER .)


state 75

    (27) const_declaration_block -> CONST const_list .
    (28) const_list -> const_list . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    BEGIN           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    LABEL           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONST           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    TYPE            reduce using rule 27 (const_declaration_block -> CONST const_list .)
    VAR             reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONSTRUCTOR     reduce using rule 27 (const_declaration_block -> CONST const_list .)
    DESTRUCTOR      reduce using rule 27 (const_declaration_block -> CONST const_list .)
    PROCEDURE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    FUNCTION        reduce using rule 27 (const_declaration_block -> CONST const_list .)
    IMPLEMENTATION  reduce using rule 27 (const_declaration_block -> CONST const_list .)
    INTERFACE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    ID              shift and go to state 77

    const_declaration              shift and go to state 136

state 76

    (29) const_list -> const_declaration .

    ID              reduce using rule 29 (const_list -> const_declaration .)
    BEGIN           reduce using rule 29 (const_list -> const_declaration .)
    LABEL           reduce using rule 29 (const_list -> const_declaration .)
    CONST           reduce using rule 29 (const_list -> const_declaration .)
    TYPE            reduce using rule 29 (const_list -> const_declaration .)
    VAR             reduce using rule 29 (const_list -> const_declaration .)
    CONSTRUCTOR     reduce using rule 29 (const_list -> const_declaration .)
    DESTRUCTOR      reduce using rule 29 (const_list -> const_declaration .)
    PROCEDURE       reduce using rule 29 (const_list -> const_declaration .)
    FUNCTION        reduce using rule 29 (const_list -> const_declaration .)
    IMPLEMENTATION  reduce using rule 29 (const_list -> const_declaration .)
    INTERFACE       reduce using rule 29 (const_list -> const_declaration .)


state 77

    (30) const_declaration -> ID . EQUAL constant SEMICOLON
    (31) const_declaration -> ID . COLON data_type_list EQUAL constant SEMICOLON

    EQUAL           shift and go to state 137
    COLON           shift and go to state 138


state 78

    (38) type_declaration_block -> TYPE type_list .
    (39) type_list -> type_list . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    BEGIN           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    LABEL           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONST           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    TYPE            reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    VAR             reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    PROCEDURE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    FUNCTION        reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    IMPLEMENTATION  reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    INTERFACE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    ID              shift and go to state 80

    type_declaration               shift and go to state 139

state 79

    (40) type_list -> type_declaration .

    ID              reduce using rule 40 (type_list -> type_declaration .)
    BEGIN           reduce using rule 40 (type_list -> type_declaration .)
    LABEL           reduce using rule 40 (type_list -> type_declaration .)
    CONST           reduce using rule 40 (type_list -> type_declaration .)
    TYPE            reduce using rule 40 (type_list -> type_declaration .)
    VAR             reduce using rule 40 (type_list -> type_declaration .)
    CONSTRUCTOR     reduce using rule 40 (type_list -> type_declaration .)
    DESTRUCTOR      reduce using rule 40 (type_list -> type_declaration .)
    PROCEDURE       reduce using rule 40 (type_list -> type_declaration .)
    FUNCTION        reduce using rule 40 (type_list -> type_declaration .)
    IMPLEMENTATION  reduce using rule 40 (type_list -> type_declaration .)
    INTERFACE       reduce using rule 40 (type_list -> type_declaration .)


state 80

    (41) type_declaration -> ID . EQUAL type_definition SEMICOLON

    EQUAL           shift and go to state 140


state 81

    (107) var_declaration_block -> VAR var_list .
    (108) var_list -> var_list . var_declaration
    (110) var_declaration -> . id_list COLON data_type_list SEMICOLON
    (111) var_declaration -> . id_list COLON data_type_list EQUAL expression SEMICOLON
    (112) var_declaration -> . id_list COLON data_type_list ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 107 (var_declaration_block -> VAR var_list .)
    LABEL           reduce using rule 107 (var_declaration_block -> VAR var_list .)
    CONST           reduce using rule 107 (var_declaration_block -> VAR var_list .)
    TYPE            reduce using rule 107 (var_declaration_block -> VAR var_list .)
    VAR             reduce using rule 107 (var_declaration_block -> VAR var_list .)
    CONSTRUCTOR     reduce using rule 107 (var_declaration_block -> VAR var_list .)
    DESTRUCTOR      reduce using rule 107 (var_declaration_block -> VAR var_list .)
    PROCEDURE       reduce using rule 107 (var_declaration_block -> VAR var_list .)
    FUNCTION        reduce using rule 107 (var_declaration_block -> VAR var_list .)
    IMPLEMENTATION  reduce using rule 107 (var_declaration_block -> VAR var_list .)
    INTERFACE       reduce using rule 107 (var_declaration_block -> VAR var_list .)
    ID              shift and go to state 13

    var_declaration                shift and go to state 141
    id_list                        shift and go to state 83

state 82

    (109) var_list -> var_declaration .

    ID              reduce using rule 109 (var_list -> var_declaration .)
    BEGIN           reduce using rule 109 (var_list -> var_declaration .)
    LABEL           reduce using rule 109 (var_list -> var_declaration .)
    CONST           reduce using rule 109 (var_list -> var_declaration .)
    TYPE            reduce using rule 109 (var_list -> var_declaration .)
    VAR             reduce using rule 109 (var_list -> var_declaration .)
    CONSTRUCTOR     reduce using rule 109 (var_list -> var_declaration .)
    DESTRUCTOR      reduce using rule 109 (var_list -> var_declaration .)
    PROCEDURE       reduce using rule 109 (var_list -> var_declaration .)
    FUNCTION        reduce using rule 109 (var_list -> var_declaration .)
    IMPLEMENTATION  reduce using rule 109 (var_list -> var_declaration .)
    INTERFACE       reduce using rule 109 (var_list -> var_declaration .)


state 83

    (110) var_declaration -> id_list . COLON data_type_list SEMICOLON
    (111) var_declaration -> id_list . COLON data_type_list EQUAL expression SEMICOLON
    (112) var_declaration -> id_list . COLON data_type_list ABSOLUTE ID SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 142
    COMMA           shift and go to state 44


state 84

    (113) procedure_declaration -> procedure_header SEMICOLON . directive SEMICOLON
    (114) procedure_declaration -> procedure_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149
    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    directive                      shift and go to state 143
    declaration_blocks             shift and go to state 144
    empty                          shift and go to state 11

state 85

    (122) function_declaration -> function_header SEMICOLON . directive
    (123) function_declaration -> function_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149
    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    directive                      shift and go to state 150
    declaration_blocks             shift and go to state 151
    empty                          shift and go to state 11

state 86

    (88) constructor_implementation -> CONSTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 152


state 87

    (89) destructor_implementation -> DESTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 153


state 88

    (90) method_implementation -> PROCEDURE ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (115) procedure_header -> PROCEDURE ID . parameters
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    DOT             shift and go to state 154
    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 155
    empty                          shift and go to state 157

state 89

    (91) method_implementation -> FUNCTION ID . DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (124) function_header -> FUNCTION ID . parameters COLON data_type_list
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    DOT             shift and go to state 158
    LPAREN          shift and go to state 156
    COLON           reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 159
    empty                          shift and go to state 157

state 90

    (23) implementation_block -> IMPLEMENTATION declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONST           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! TYPE            [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! VAR             [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 91

    (22) interface_block -> INTERFACE declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONST           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! TYPE            [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! VAR             [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 92

    (7) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 7 (id_list -> id_list COMMA ID .)


state 93

    (157) compound_statement -> BEGIN sentences_list END .

    DOT             reduce using rule 157 (compound_statement -> BEGIN sentences_list END .)
    SEMICOLON       reduce using rule 157 (compound_statement -> BEGIN sentences_list END .)
    ELSE            reduce using rule 157 (compound_statement -> BEGIN sentences_list END .)


state 94

    (158) sentences_list -> sentences_list sentence . SEMICOLON

    SEMICOLON       shift and go to state 160


state 95

    (173) sentence -> empty .

    SEMICOLON       reduce using rule 173 (sentence -> empty .)
    ELSE            reduce using rule 173 (sentence -> empty .)


state 96

    (159) sentences_list -> sentence SEMICOLON .

    END             reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    ID              reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    NEW             reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    BEGIN           reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    IF              reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    CASE            reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    FOR             reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    WHILE           reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    REPEAT          reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    WITH            reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    GOTO            reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    NUMBER          reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    ASM             reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    SEMICOLON       reduce using rule 159 (sentences_list -> sentence SEMICOLON .)
    UNTIL           reduce using rule 159 (sentences_list -> sentence SEMICOLON .)


state 97

    (175) assignment -> variable ASIGNATION . expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    variable                       shift and go to state 114
    expression                     shift and go to state 161
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 98

    (179) procedure_call -> variable DOT . ID LPAREN expression_list RPAREN
    (180) procedure_call -> variable DOT . ID LPAREN RPAREN
    (249) variable -> variable DOT . ID

    ID              shift and go to state 162


state 99

    (250) variable -> variable LBRACKET . expression_list RBRACKET
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    variable                       shift and go to state 114
    expression_list                shift and go to state 163
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 100

    (251) variable -> variable CARET .

    ASIGNATION      reduce using rule 251 (variable -> variable CARET .)
    DOT             reduce using rule 251 (variable -> variable CARET .)
    LBRACKET        reduce using rule 251 (variable -> variable CARET .)
    CARET           reduce using rule 251 (variable -> variable CARET .)
    TIMES           reduce using rule 251 (variable -> variable CARET .)
    DIVIDE          reduce using rule 251 (variable -> variable CARET .)
    DIV             reduce using rule 251 (variable -> variable CARET .)
    MOD             reduce using rule 251 (variable -> variable CARET .)
    SHL             reduce using rule 251 (variable -> variable CARET .)
    SHR             reduce using rule 251 (variable -> variable CARET .)
    PLUS            reduce using rule 251 (variable -> variable CARET .)
    MINUS           reduce using rule 251 (variable -> variable CARET .)
    EQUAL           reduce using rule 251 (variable -> variable CARET .)
    DISTINT         reduce using rule 251 (variable -> variable CARET .)
    LESS            reduce using rule 251 (variable -> variable CARET .)
    LESSEQUAL       reduce using rule 251 (variable -> variable CARET .)
    GREATER         reduce using rule 251 (variable -> variable CARET .)
    GREATEREQUAL    reduce using rule 251 (variable -> variable CARET .)
    IN              reduce using rule 251 (variable -> variable CARET .)
    AND             reduce using rule 251 (variable -> variable CARET .)
    THEN            reduce using rule 251 (variable -> variable CARET .)
    OR              reduce using rule 251 (variable -> variable CARET .)
    XOR             reduce using rule 251 (variable -> variable CARET .)
    OF              reduce using rule 251 (variable -> variable CARET .)
    DO              reduce using rule 251 (variable -> variable CARET .)
    COMMA           reduce using rule 251 (variable -> variable CARET .)
    SEMICOLON       reduce using rule 251 (variable -> variable CARET .)
    ELSE            reduce using rule 251 (variable -> variable CARET .)
    RBRACKET        reduce using rule 251 (variable -> variable CARET .)
    RPAREN          reduce using rule 251 (variable -> variable CARET .)
    DOBLEDOT        reduce using rule 251 (variable -> variable CARET .)
    TO              reduce using rule 251 (variable -> variable CARET .)
    DOWNTO          reduce using rule 251 (variable -> variable CARET .)


state 101

    (177) procedure_call -> ID LPAREN . expression_list RPAREN
    (178) procedure_call -> ID LPAREN . RPAREN
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 166
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression_list                shift and go to state 165
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 102

    (181) procedure_call -> NEW LPAREN . expression_list RPAREN
    (182) procedure_call -> NEW LPAREN . RPAREN
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 168
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression_list                shift and go to state 167
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 103

    (183) if_statement -> IF expression . THEN sentence
    (184) if_statement -> IF expression . THEN sentence ELSE sentence
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    THEN            shift and go to state 169
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 104

    (206) expression -> simple_expression .
    (207) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 206 (expression -> simple_expression .)
    OR              reduce using rule 206 (expression -> simple_expression .)
    XOR             reduce using rule 206 (expression -> simple_expression .)
    OF              reduce using rule 206 (expression -> simple_expression .)
    DO              reduce using rule 206 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 206 (expression -> simple_expression .)
    ELSE            reduce using rule 206 (expression -> simple_expression .)
    RBRACKET        reduce using rule 206 (expression -> simple_expression .)
    COMMA           reduce using rule 206 (expression -> simple_expression .)
    RPAREN          reduce using rule 206 (expression -> simple_expression .)
    DOBLEDOT        reduce using rule 206 (expression -> simple_expression .)
    TO              reduce using rule 206 (expression -> simple_expression .)
    DOWNTO          reduce using rule 206 (expression -> simple_expression .)
    AND             shift and go to state 172


state 105

    (208) simple_expression -> relational_expression .
    (209) relational_expression -> relational_expression . relational_operator additive_expression
    (211) relational_operator -> . EQUAL
    (212) relational_operator -> . DISTINT
    (213) relational_operator -> . LESS
    (214) relational_operator -> . LESSEQUAL
    (215) relational_operator -> . GREATER
    (216) relational_operator -> . GREATEREQUAL
    (217) relational_operator -> . IN

    AND             reduce using rule 208 (simple_expression -> relational_expression .)
    THEN            reduce using rule 208 (simple_expression -> relational_expression .)
    OR              reduce using rule 208 (simple_expression -> relational_expression .)
    XOR             reduce using rule 208 (simple_expression -> relational_expression .)
    OF              reduce using rule 208 (simple_expression -> relational_expression .)
    DO              reduce using rule 208 (simple_expression -> relational_expression .)
    SEMICOLON       reduce using rule 208 (simple_expression -> relational_expression .)
    ELSE            reduce using rule 208 (simple_expression -> relational_expression .)
    RBRACKET        reduce using rule 208 (simple_expression -> relational_expression .)
    COMMA           reduce using rule 208 (simple_expression -> relational_expression .)
    RPAREN          reduce using rule 208 (simple_expression -> relational_expression .)
    DOBLEDOT        reduce using rule 208 (simple_expression -> relational_expression .)
    TO              reduce using rule 208 (simple_expression -> relational_expression .)
    DOWNTO          reduce using rule 208 (simple_expression -> relational_expression .)
    EQUAL           shift and go to state 174
    DISTINT         shift and go to state 175
    LESS            shift and go to state 176
    LESSEQUAL       shift and go to state 177
    GREATER         shift and go to state 178
    GREATEREQUAL    shift and go to state 179
    IN              shift and go to state 180

    relational_operator            shift and go to state 173

state 106

    (210) relational_expression -> additive_expression .
    (218) additive_expression -> additive_expression . PLUS multiplicative_expression
    (219) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 210 (relational_expression -> additive_expression .)
    DISTINT         reduce using rule 210 (relational_expression -> additive_expression .)
    LESS            reduce using rule 210 (relational_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 210 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 210 (relational_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 210 (relational_expression -> additive_expression .)
    IN              reduce using rule 210 (relational_expression -> additive_expression .)
    AND             reduce using rule 210 (relational_expression -> additive_expression .)
    THEN            reduce using rule 210 (relational_expression -> additive_expression .)
    OR              reduce using rule 210 (relational_expression -> additive_expression .)
    XOR             reduce using rule 210 (relational_expression -> additive_expression .)
    OF              reduce using rule 210 (relational_expression -> additive_expression .)
    DO              reduce using rule 210 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 210 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 210 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 210 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 210 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 210 (relational_expression -> additive_expression .)
    DOBLEDOT        reduce using rule 210 (relational_expression -> additive_expression .)
    TO              reduce using rule 210 (relational_expression -> additive_expression .)
    DOWNTO          reduce using rule 210 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 181
    MINUS           shift and go to state 182


state 107

    (230) unary_expression -> PLUS . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 183
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 108

    (220) additive_expression -> multiplicative_expression .
    (221) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (222) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (223) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (224) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (225) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (226) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 220 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 220 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 220 (additive_expression -> multiplicative_expression .)
    DISTINT         reduce using rule 220 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 220 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 220 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 220 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 220 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 220 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 220 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 220 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 220 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 220 (additive_expression -> multiplicative_expression .)
    OF              reduce using rule 220 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 220 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 220 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 220 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 220 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 220 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 220 (additive_expression -> multiplicative_expression .)
    DOBLEDOT        reduce using rule 220 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 220 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 220 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 184
    DIVIDE          shift and go to state 185
    DIV             shift and go to state 186
    MOD             shift and go to state 187
    SHL             shift and go to state 188
    SHR             shift and go to state 189


state 109

    (229) unary_expression -> MINUS . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 190
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 110

    (227) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 227 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 227 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DISTINT         reduce using rule 227 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 227 (multiplicative_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 227 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 227 (multiplicative_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 227 (multiplicative_expression -> unary_expression .)
    IN              reduce using rule 227 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    THEN            reduce using rule 227 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 227 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 227 (multiplicative_expression -> unary_expression .)
    OF              reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DO              reduce using rule 227 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 227 (multiplicative_expression -> unary_expression .)
    ELSE            reduce using rule 227 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 227 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 227 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DOBLEDOT        reduce using rule 227 (multiplicative_expression -> unary_expression .)
    TO              reduce using rule 227 (multiplicative_expression -> unary_expression .)
    DOWNTO          reduce using rule 227 (multiplicative_expression -> unary_expression .)


state 111

    (228) unary_expression -> NOT . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 191
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 112

    (231) unary_expression -> ADDRESS_OF . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 192
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 113

    (232) unary_expression -> primary_expression .

    TIMES           reduce using rule 232 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 232 (unary_expression -> primary_expression .)
    DIV             reduce using rule 232 (unary_expression -> primary_expression .)
    MOD             reduce using rule 232 (unary_expression -> primary_expression .)
    SHL             reduce using rule 232 (unary_expression -> primary_expression .)
    SHR             reduce using rule 232 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 232 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 232 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 232 (unary_expression -> primary_expression .)
    DISTINT         reduce using rule 232 (unary_expression -> primary_expression .)
    LESS            reduce using rule 232 (unary_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 232 (unary_expression -> primary_expression .)
    GREATER         reduce using rule 232 (unary_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 232 (unary_expression -> primary_expression .)
    IN              reduce using rule 232 (unary_expression -> primary_expression .)
    AND             reduce using rule 232 (unary_expression -> primary_expression .)
    THEN            reduce using rule 232 (unary_expression -> primary_expression .)
    OR              reduce using rule 232 (unary_expression -> primary_expression .)
    XOR             reduce using rule 232 (unary_expression -> primary_expression .)
    OF              reduce using rule 232 (unary_expression -> primary_expression .)
    DO              reduce using rule 232 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 232 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 232 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 232 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 232 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 232 (unary_expression -> primary_expression .)
    DOBLEDOT        reduce using rule 232 (unary_expression -> primary_expression .)
    TO              reduce using rule 232 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 232 (unary_expression -> primary_expression .)


state 114

    (233) primary_expression -> variable .
    (249) variable -> variable . DOT ID
    (250) variable -> variable . LBRACKET expression_list RBRACKET
    (251) variable -> variable . CARET
    (254) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (255) function_call -> variable . DOT ID LPAREN RPAREN

    TIMES           reduce using rule 233 (primary_expression -> variable .)
    DIVIDE          reduce using rule 233 (primary_expression -> variable .)
    DIV             reduce using rule 233 (primary_expression -> variable .)
    MOD             reduce using rule 233 (primary_expression -> variable .)
    SHL             reduce using rule 233 (primary_expression -> variable .)
    SHR             reduce using rule 233 (primary_expression -> variable .)
    PLUS            reduce using rule 233 (primary_expression -> variable .)
    MINUS           reduce using rule 233 (primary_expression -> variable .)
    EQUAL           reduce using rule 233 (primary_expression -> variable .)
    DISTINT         reduce using rule 233 (primary_expression -> variable .)
    LESS            reduce using rule 233 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 233 (primary_expression -> variable .)
    GREATER         reduce using rule 233 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 233 (primary_expression -> variable .)
    IN              reduce using rule 233 (primary_expression -> variable .)
    AND             reduce using rule 233 (primary_expression -> variable .)
    THEN            reduce using rule 233 (primary_expression -> variable .)
    OR              reduce using rule 233 (primary_expression -> variable .)
    XOR             reduce using rule 233 (primary_expression -> variable .)
    OF              reduce using rule 233 (primary_expression -> variable .)
    DO              reduce using rule 233 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 233 (primary_expression -> variable .)
    ELSE            reduce using rule 233 (primary_expression -> variable .)
    RBRACKET        reduce using rule 233 (primary_expression -> variable .)
    COMMA           reduce using rule 233 (primary_expression -> variable .)
    RPAREN          reduce using rule 233 (primary_expression -> variable .)
    DOBLEDOT        reduce using rule 233 (primary_expression -> variable .)
    TO              reduce using rule 233 (primary_expression -> variable .)
    DOWNTO          reduce using rule 233 (primary_expression -> variable .)
    DOT             shift and go to state 193
    LBRACKET        shift and go to state 99
    CARET           shift and go to state 100


state 115

    (234) primary_expression -> NUMBER .

    TIMES           reduce using rule 234 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 234 (primary_expression -> NUMBER .)
    DIV             reduce using rule 234 (primary_expression -> NUMBER .)
    MOD             reduce using rule 234 (primary_expression -> NUMBER .)
    SHL             reduce using rule 234 (primary_expression -> NUMBER .)
    SHR             reduce using rule 234 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 234 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 234 (primary_expression -> NUMBER .)
    EQUAL           reduce using rule 234 (primary_expression -> NUMBER .)
    DISTINT         reduce using rule 234 (primary_expression -> NUMBER .)
    LESS            reduce using rule 234 (primary_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 234 (primary_expression -> NUMBER .)
    GREATER         reduce using rule 234 (primary_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 234 (primary_expression -> NUMBER .)
    IN              reduce using rule 234 (primary_expression -> NUMBER .)
    AND             reduce using rule 234 (primary_expression -> NUMBER .)
    THEN            reduce using rule 234 (primary_expression -> NUMBER .)
    OR              reduce using rule 234 (primary_expression -> NUMBER .)
    XOR             reduce using rule 234 (primary_expression -> NUMBER .)
    OF              reduce using rule 234 (primary_expression -> NUMBER .)
    DO              reduce using rule 234 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 234 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 234 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 234 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 234 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 234 (primary_expression -> NUMBER .)
    DOBLEDOT        reduce using rule 234 (primary_expression -> NUMBER .)
    TO              reduce using rule 234 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 234 (primary_expression -> NUMBER .)


state 116

    (235) primary_expression -> STRING .

    TIMES           reduce using rule 235 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 235 (primary_expression -> STRING .)
    DIV             reduce using rule 235 (primary_expression -> STRING .)
    MOD             reduce using rule 235 (primary_expression -> STRING .)
    SHL             reduce using rule 235 (primary_expression -> STRING .)
    SHR             reduce using rule 235 (primary_expression -> STRING .)
    PLUS            reduce using rule 235 (primary_expression -> STRING .)
    MINUS           reduce using rule 235 (primary_expression -> STRING .)
    EQUAL           reduce using rule 235 (primary_expression -> STRING .)
    DISTINT         reduce using rule 235 (primary_expression -> STRING .)
    LESS            reduce using rule 235 (primary_expression -> STRING .)
    LESSEQUAL       reduce using rule 235 (primary_expression -> STRING .)
    GREATER         reduce using rule 235 (primary_expression -> STRING .)
    GREATEREQUAL    reduce using rule 235 (primary_expression -> STRING .)
    IN              reduce using rule 235 (primary_expression -> STRING .)
    AND             reduce using rule 235 (primary_expression -> STRING .)
    THEN            reduce using rule 235 (primary_expression -> STRING .)
    OR              reduce using rule 235 (primary_expression -> STRING .)
    XOR             reduce using rule 235 (primary_expression -> STRING .)
    OF              reduce using rule 235 (primary_expression -> STRING .)
    DO              reduce using rule 235 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 235 (primary_expression -> STRING .)
    ELSE            reduce using rule 235 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 235 (primary_expression -> STRING .)
    COMMA           reduce using rule 235 (primary_expression -> STRING .)
    RPAREN          reduce using rule 235 (primary_expression -> STRING .)
    DOBLEDOT        reduce using rule 235 (primary_expression -> STRING .)
    TO              reduce using rule 235 (primary_expression -> STRING .)
    DOWNTO          reduce using rule 235 (primary_expression -> STRING .)


state 117

    (236) primary_expression -> TRUE .

    TIMES           reduce using rule 236 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 236 (primary_expression -> TRUE .)
    DIV             reduce using rule 236 (primary_expression -> TRUE .)
    MOD             reduce using rule 236 (primary_expression -> TRUE .)
    SHL             reduce using rule 236 (primary_expression -> TRUE .)
    SHR             reduce using rule 236 (primary_expression -> TRUE .)
    PLUS            reduce using rule 236 (primary_expression -> TRUE .)
    MINUS           reduce using rule 236 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 236 (primary_expression -> TRUE .)
    DISTINT         reduce using rule 236 (primary_expression -> TRUE .)
    LESS            reduce using rule 236 (primary_expression -> TRUE .)
    LESSEQUAL       reduce using rule 236 (primary_expression -> TRUE .)
    GREATER         reduce using rule 236 (primary_expression -> TRUE .)
    GREATEREQUAL    reduce using rule 236 (primary_expression -> TRUE .)
    IN              reduce using rule 236 (primary_expression -> TRUE .)
    AND             reduce using rule 236 (primary_expression -> TRUE .)
    THEN            reduce using rule 236 (primary_expression -> TRUE .)
    OR              reduce using rule 236 (primary_expression -> TRUE .)
    XOR             reduce using rule 236 (primary_expression -> TRUE .)
    OF              reduce using rule 236 (primary_expression -> TRUE .)
    DO              reduce using rule 236 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 236 (primary_expression -> TRUE .)
    ELSE            reduce using rule 236 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 236 (primary_expression -> TRUE .)
    COMMA           reduce using rule 236 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 236 (primary_expression -> TRUE .)
    DOBLEDOT        reduce using rule 236 (primary_expression -> TRUE .)
    TO              reduce using rule 236 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 236 (primary_expression -> TRUE .)


state 118

    (237) primary_expression -> FALSE .

    TIMES           reduce using rule 237 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 237 (primary_expression -> FALSE .)
    DIV             reduce using rule 237 (primary_expression -> FALSE .)
    MOD             reduce using rule 237 (primary_expression -> FALSE .)
    SHL             reduce using rule 237 (primary_expression -> FALSE .)
    SHR             reduce using rule 237 (primary_expression -> FALSE .)
    PLUS            reduce using rule 237 (primary_expression -> FALSE .)
    MINUS           reduce using rule 237 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 237 (primary_expression -> FALSE .)
    DISTINT         reduce using rule 237 (primary_expression -> FALSE .)
    LESS            reduce using rule 237 (primary_expression -> FALSE .)
    LESSEQUAL       reduce using rule 237 (primary_expression -> FALSE .)
    GREATER         reduce using rule 237 (primary_expression -> FALSE .)
    GREATEREQUAL    reduce using rule 237 (primary_expression -> FALSE .)
    IN              reduce using rule 237 (primary_expression -> FALSE .)
    AND             reduce using rule 237 (primary_expression -> FALSE .)
    THEN            reduce using rule 237 (primary_expression -> FALSE .)
    OR              reduce using rule 237 (primary_expression -> FALSE .)
    XOR             reduce using rule 237 (primary_expression -> FALSE .)
    OF              reduce using rule 237 (primary_expression -> FALSE .)
    DO              reduce using rule 237 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 237 (primary_expression -> FALSE .)
    ELSE            reduce using rule 237 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 237 (primary_expression -> FALSE .)
    COMMA           reduce using rule 237 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 237 (primary_expression -> FALSE .)
    DOBLEDOT        reduce using rule 237 (primary_expression -> FALSE .)
    TO              reduce using rule 237 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 237 (primary_expression -> FALSE .)


state 119

    (238) primary_expression -> NIL .

    TIMES           reduce using rule 238 (primary_expression -> NIL .)
    DIVIDE          reduce using rule 238 (primary_expression -> NIL .)
    DIV             reduce using rule 238 (primary_expression -> NIL .)
    MOD             reduce using rule 238 (primary_expression -> NIL .)
    SHL             reduce using rule 238 (primary_expression -> NIL .)
    SHR             reduce using rule 238 (primary_expression -> NIL .)
    PLUS            reduce using rule 238 (primary_expression -> NIL .)
    MINUS           reduce using rule 238 (primary_expression -> NIL .)
    EQUAL           reduce using rule 238 (primary_expression -> NIL .)
    DISTINT         reduce using rule 238 (primary_expression -> NIL .)
    LESS            reduce using rule 238 (primary_expression -> NIL .)
    LESSEQUAL       reduce using rule 238 (primary_expression -> NIL .)
    GREATER         reduce using rule 238 (primary_expression -> NIL .)
    GREATEREQUAL    reduce using rule 238 (primary_expression -> NIL .)
    IN              reduce using rule 238 (primary_expression -> NIL .)
    AND             reduce using rule 238 (primary_expression -> NIL .)
    THEN            reduce using rule 238 (primary_expression -> NIL .)
    OR              reduce using rule 238 (primary_expression -> NIL .)
    XOR             reduce using rule 238 (primary_expression -> NIL .)
    OF              reduce using rule 238 (primary_expression -> NIL .)
    DO              reduce using rule 238 (primary_expression -> NIL .)
    SEMICOLON       reduce using rule 238 (primary_expression -> NIL .)
    ELSE            reduce using rule 238 (primary_expression -> NIL .)
    RBRACKET        reduce using rule 238 (primary_expression -> NIL .)
    COMMA           reduce using rule 238 (primary_expression -> NIL .)
    RPAREN          reduce using rule 238 (primary_expression -> NIL .)
    DOBLEDOT        reduce using rule 238 (primary_expression -> NIL .)
    TO              reduce using rule 238 (primary_expression -> NIL .)
    DOWNTO          reduce using rule 238 (primary_expression -> NIL .)


state 120

    (239) primary_expression -> LPAREN . expression RPAREN
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 194
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 121

    (240) primary_expression -> function_call .

    TIMES           reduce using rule 240 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 240 (primary_expression -> function_call .)
    DIV             reduce using rule 240 (primary_expression -> function_call .)
    MOD             reduce using rule 240 (primary_expression -> function_call .)
    SHL             reduce using rule 240 (primary_expression -> function_call .)
    SHR             reduce using rule 240 (primary_expression -> function_call .)
    PLUS            reduce using rule 240 (primary_expression -> function_call .)
    MINUS           reduce using rule 240 (primary_expression -> function_call .)
    EQUAL           reduce using rule 240 (primary_expression -> function_call .)
    DISTINT         reduce using rule 240 (primary_expression -> function_call .)
    LESS            reduce using rule 240 (primary_expression -> function_call .)
    LESSEQUAL       reduce using rule 240 (primary_expression -> function_call .)
    GREATER         reduce using rule 240 (primary_expression -> function_call .)
    GREATEREQUAL    reduce using rule 240 (primary_expression -> function_call .)
    IN              reduce using rule 240 (primary_expression -> function_call .)
    AND             reduce using rule 240 (primary_expression -> function_call .)
    THEN            reduce using rule 240 (primary_expression -> function_call .)
    OR              reduce using rule 240 (primary_expression -> function_call .)
    XOR             reduce using rule 240 (primary_expression -> function_call .)
    OF              reduce using rule 240 (primary_expression -> function_call .)
    DO              reduce using rule 240 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 240 (primary_expression -> function_call .)
    ELSE            reduce using rule 240 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 240 (primary_expression -> function_call .)
    COMMA           reduce using rule 240 (primary_expression -> function_call .)
    RPAREN          reduce using rule 240 (primary_expression -> function_call .)
    DOBLEDOT        reduce using rule 240 (primary_expression -> function_call .)
    TO              reduce using rule 240 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 240 (primary_expression -> function_call .)


state 122

    (241) primary_expression -> set_constructor .

    TIMES           reduce using rule 241 (primary_expression -> set_constructor .)
    DIVIDE          reduce using rule 241 (primary_expression -> set_constructor .)
    DIV             reduce using rule 241 (primary_expression -> set_constructor .)
    MOD             reduce using rule 241 (primary_expression -> set_constructor .)
    SHL             reduce using rule 241 (primary_expression -> set_constructor .)
    SHR             reduce using rule 241 (primary_expression -> set_constructor .)
    PLUS            reduce using rule 241 (primary_expression -> set_constructor .)
    MINUS           reduce using rule 241 (primary_expression -> set_constructor .)
    EQUAL           reduce using rule 241 (primary_expression -> set_constructor .)
    DISTINT         reduce using rule 241 (primary_expression -> set_constructor .)
    LESS            reduce using rule 241 (primary_expression -> set_constructor .)
    LESSEQUAL       reduce using rule 241 (primary_expression -> set_constructor .)
    GREATER         reduce using rule 241 (primary_expression -> set_constructor .)
    GREATEREQUAL    reduce using rule 241 (primary_expression -> set_constructor .)
    IN              reduce using rule 241 (primary_expression -> set_constructor .)
    AND             reduce using rule 241 (primary_expression -> set_constructor .)
    THEN            reduce using rule 241 (primary_expression -> set_constructor .)
    OR              reduce using rule 241 (primary_expression -> set_constructor .)
    XOR             reduce using rule 241 (primary_expression -> set_constructor .)
    OF              reduce using rule 241 (primary_expression -> set_constructor .)
    DO              reduce using rule 241 (primary_expression -> set_constructor .)
    SEMICOLON       reduce using rule 241 (primary_expression -> set_constructor .)
    ELSE            reduce using rule 241 (primary_expression -> set_constructor .)
    RBRACKET        reduce using rule 241 (primary_expression -> set_constructor .)
    COMMA           reduce using rule 241 (primary_expression -> set_constructor .)
    RPAREN          reduce using rule 241 (primary_expression -> set_constructor .)
    DOBLEDOT        reduce using rule 241 (primary_expression -> set_constructor .)
    TO              reduce using rule 241 (primary_expression -> set_constructor .)
    DOWNTO          reduce using rule 241 (primary_expression -> set_constructor .)


state 123

    (248) variable -> ID .
    (252) function_call -> ID . LPAREN expression_list RPAREN
    (253) function_call -> ID . LPAREN RPAREN

    DOT             reduce using rule 248 (variable -> ID .)
    LBRACKET        reduce using rule 248 (variable -> ID .)
    CARET           reduce using rule 248 (variable -> ID .)
    TIMES           reduce using rule 248 (variable -> ID .)
    DIVIDE          reduce using rule 248 (variable -> ID .)
    DIV             reduce using rule 248 (variable -> ID .)
    MOD             reduce using rule 248 (variable -> ID .)
    SHL             reduce using rule 248 (variable -> ID .)
    SHR             reduce using rule 248 (variable -> ID .)
    PLUS            reduce using rule 248 (variable -> ID .)
    MINUS           reduce using rule 248 (variable -> ID .)
    EQUAL           reduce using rule 248 (variable -> ID .)
    DISTINT         reduce using rule 248 (variable -> ID .)
    LESS            reduce using rule 248 (variable -> ID .)
    LESSEQUAL       reduce using rule 248 (variable -> ID .)
    GREATER         reduce using rule 248 (variable -> ID .)
    GREATEREQUAL    reduce using rule 248 (variable -> ID .)
    IN              reduce using rule 248 (variable -> ID .)
    AND             reduce using rule 248 (variable -> ID .)
    THEN            reduce using rule 248 (variable -> ID .)
    OR              reduce using rule 248 (variable -> ID .)
    XOR             reduce using rule 248 (variable -> ID .)
    OF              reduce using rule 248 (variable -> ID .)
    DO              reduce using rule 248 (variable -> ID .)
    SEMICOLON       reduce using rule 248 (variable -> ID .)
    ELSE            reduce using rule 248 (variable -> ID .)
    RBRACKET        reduce using rule 248 (variable -> ID .)
    COMMA           reduce using rule 248 (variable -> ID .)
    RPAREN          reduce using rule 248 (variable -> ID .)
    DOBLEDOT        reduce using rule 248 (variable -> ID .)
    TO              reduce using rule 248 (variable -> ID .)
    DOWNTO          reduce using rule 248 (variable -> ID .)
    LPAREN          shift and go to state 195


state 124

    (246) set_constructor -> LBRACKET . set_item_list RBRACKET
    (247) set_constructor -> LBRACKET . RBRACKET
    (244) set_item_list -> . set_item
    (245) set_item_list -> . set_item_list COMMA set_item
    (242) set_item -> . expression
    (243) set_item -> . expression DOBLEDOT expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 197
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    set_item_list                  shift and go to state 196
    set_item                       shift and go to state 198
    expression                     shift and go to state 199
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 125

    (185) case_statement -> CASE expression . OF case_list END
    (186) case_statement -> CASE expression . OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> CASE expression . OF case_list ELSE sentences_list END
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    OF              shift and go to state 200
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 126

    (194) for_statement -> FOR ID . ASIGNATION expression TO expression DO sentence
    (195) for_statement -> FOR ID . ASIGNATION expression DOWNTO expression DO sentence

    ASIGNATION      shift and go to state 201


state 127

    (196) while_statement -> WHILE expression . DO sentence
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    DO              shift and go to state 202
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 128

    (197) repeat_statement -> REPEAT sentences_list . UNTIL expression
    (158) sentences_list -> sentences_list . sentence SEMICOLON
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    UNTIL           shift and go to state 203
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 94
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 129

    (198) with_statement -> WITH variable_list . DO sentence
    (200) variable_list -> variable_list . COMMA variable

    DO              shift and go to state 204
    COMMA           shift and go to state 205


state 130

    (199) variable_list -> variable .
    (249) variable -> variable . DOT ID
    (250) variable -> variable . LBRACKET expression_list RBRACKET
    (251) variable -> variable . CARET

    DO              reduce using rule 199 (variable_list -> variable .)
    COMMA           reduce using rule 199 (variable_list -> variable .)
    DOT             shift and go to state 206
    LBRACKET        shift and go to state 99
    CARET           shift and go to state 100


state 131

    (248) variable -> ID .

    DOT             reduce using rule 248 (variable -> ID .)
    LBRACKET        reduce using rule 248 (variable -> ID .)
    CARET           reduce using rule 248 (variable -> ID .)
    DO              reduce using rule 248 (variable -> ID .)
    COMMA           reduce using rule 248 (variable -> ID .)


state 132

    (201) goto_statement -> GOTO NUMBER .

    SEMICOLON       reduce using rule 201 (goto_statement -> GOTO NUMBER .)
    ELSE            reduce using rule 201 (goto_statement -> GOTO NUMBER .)


state 133

    (202) labeled_sentence -> NUMBER COLON . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 207
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 134

    (24) label_declaration -> LABEL number_list SEMICOLON .

    BEGIN           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    LABEL           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONST           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    TYPE            reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    VAR             reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    PROCEDURE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    FUNCTION        reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    INTERFACE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)


state 135

    (26) number_list -> number_list COMMA . NUMBER

    NUMBER          shift and go to state 208


state 136

    (28) const_list -> const_list const_declaration .

    ID              reduce using rule 28 (const_list -> const_list const_declaration .)
    BEGIN           reduce using rule 28 (const_list -> const_list const_declaration .)
    LABEL           reduce using rule 28 (const_list -> const_list const_declaration .)
    CONST           reduce using rule 28 (const_list -> const_list const_declaration .)
    TYPE            reduce using rule 28 (const_list -> const_list const_declaration .)
    VAR             reduce using rule 28 (const_list -> const_list const_declaration .)
    CONSTRUCTOR     reduce using rule 28 (const_list -> const_list const_declaration .)
    DESTRUCTOR      reduce using rule 28 (const_list -> const_list const_declaration .)
    PROCEDURE       reduce using rule 28 (const_list -> const_list const_declaration .)
    FUNCTION        reduce using rule 28 (const_list -> const_list const_declaration .)
    IMPLEMENTATION  reduce using rule 28 (const_list -> const_list const_declaration .)
    INTERFACE       reduce using rule 28 (const_list -> const_list const_declaration .)


state 137

    (30) const_declaration -> ID EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    constant                       shift and go to state 209

state 138

    (31) const_declaration -> ID COLON . data_type_list EQUAL constant SEMICOLON
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 217

state 139

    (39) type_list -> type_list type_declaration .

    ID              reduce using rule 39 (type_list -> type_list type_declaration .)
    BEGIN           reduce using rule 39 (type_list -> type_list type_declaration .)
    LABEL           reduce using rule 39 (type_list -> type_list type_declaration .)
    CONST           reduce using rule 39 (type_list -> type_list type_declaration .)
    TYPE            reduce using rule 39 (type_list -> type_list type_declaration .)
    VAR             reduce using rule 39 (type_list -> type_list type_declaration .)
    CONSTRUCTOR     reduce using rule 39 (type_list -> type_list type_declaration .)
    DESTRUCTOR      reduce using rule 39 (type_list -> type_list type_declaration .)
    PROCEDURE       reduce using rule 39 (type_list -> type_list type_declaration .)
    FUNCTION        reduce using rule 39 (type_list -> type_list type_declaration .)
    IMPLEMENTATION  reduce using rule 39 (type_list -> type_list type_declaration .)
    INTERFACE       reduce using rule 39 (type_list -> type_list type_declaration .)


state 140

    (41) type_declaration -> ID EQUAL . type_definition SEMICOLON
    (42) type_definition -> . data_type_list
    (43) type_definition -> . LPAREN id_list RPAREN
    (44) type_definition -> . NUMBER DOBLEDOT NUMBER
    (45) type_definition -> . CHAR DOBLEDOT CHAR
    (46) type_definition -> . ID DOBLEDOT ID
    (47) type_definition -> . record_type
    (48) type_definition -> . array_type
    (49) type_definition -> . set_type
    (50) type_definition -> . pointer_type
    (51) type_definition -> . file_type
    (52) type_definition -> . object_type
    (53) type_definition -> . string_type
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (66) set_type -> . SET OF set_range
    (71) pointer_type -> . CARET ID
    (72) pointer_type -> . CARET data_type_list
    (73) file_type -> . FILE OF data_type_list
    (74) file_type -> . FILE
    (75) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 236
    NUMBER          shift and go to state 237
    CHAR            shift and go to state 238
    ID              shift and go to state 233
    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    STRING          shift and go to state 246
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 247
    RECORD          shift and go to state 248
    PACKED          shift and go to state 249
    ARRAY           shift and go to state 250
    SET             shift and go to state 251
    CARET           shift and go to state 252
    OBJECT          shift and go to state 253

    type_definition                shift and go to state 234
    data_type_list                 shift and go to state 235
    record_type                    shift and go to state 239
    array_type                     shift and go to state 240
    set_type                       shift and go to state 241
    pointer_type                   shift and go to state 242
    file_type                      shift and go to state 243
    object_type                    shift and go to state 244
    string_type                    shift and go to state 245

state 141

    (108) var_list -> var_list var_declaration .

    ID              reduce using rule 108 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 108 (var_list -> var_list var_declaration .)
    LABEL           reduce using rule 108 (var_list -> var_list var_declaration .)
    CONST           reduce using rule 108 (var_list -> var_list var_declaration .)
    TYPE            reduce using rule 108 (var_list -> var_list var_declaration .)
    VAR             reduce using rule 108 (var_list -> var_list var_declaration .)
    CONSTRUCTOR     reduce using rule 108 (var_list -> var_list var_declaration .)
    DESTRUCTOR      reduce using rule 108 (var_list -> var_list var_declaration .)
    PROCEDURE       reduce using rule 108 (var_list -> var_list var_declaration .)
    FUNCTION        reduce using rule 108 (var_list -> var_list var_declaration .)
    IMPLEMENTATION  reduce using rule 108 (var_list -> var_list var_declaration .)
    INTERFACE       reduce using rule 108 (var_list -> var_list var_declaration .)


state 142

    (110) var_declaration -> id_list COLON . data_type_list SEMICOLON
    (111) var_declaration -> id_list COLON . data_type_list EQUAL expression SEMICOLON
    (112) var_declaration -> id_list COLON . data_type_list ABSOLUTE ID SEMICOLON
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 254

state 143

    (113) procedure_declaration -> procedure_header SEMICOLON directive . SEMICOLON

    SEMICOLON       shift and go to state 255


state 144

    (114) procedure_declaration -> procedure_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    procedure_header               shift and go to state 35
    compound_statement             shift and go to state 256
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    function_header                shift and go to state 36

state 145

    (116) directive -> FORWARD .

    SEMICOLON       reduce using rule 116 (directive -> FORWARD .)
    BEGIN           reduce using rule 116 (directive -> FORWARD .)
    LABEL           reduce using rule 116 (directive -> FORWARD .)
    CONST           reduce using rule 116 (directive -> FORWARD .)
    TYPE            reduce using rule 116 (directive -> FORWARD .)
    VAR             reduce using rule 116 (directive -> FORWARD .)
    CONSTRUCTOR     reduce using rule 116 (directive -> FORWARD .)
    DESTRUCTOR      reduce using rule 116 (directive -> FORWARD .)
    PROCEDURE       reduce using rule 116 (directive -> FORWARD .)
    FUNCTION        reduce using rule 116 (directive -> FORWARD .)
    IMPLEMENTATION  reduce using rule 116 (directive -> FORWARD .)
    INTERFACE       reduce using rule 116 (directive -> FORWARD .)
    END             reduce using rule 116 (directive -> FORWARD .)


state 146

    (117) directive -> EXTERNAL .
    (118) directive -> EXTERNAL . STRING

    SEMICOLON       reduce using rule 117 (directive -> EXTERNAL .)
    BEGIN           reduce using rule 117 (directive -> EXTERNAL .)
    LABEL           reduce using rule 117 (directive -> EXTERNAL .)
    CONST           reduce using rule 117 (directive -> EXTERNAL .)
    TYPE            reduce using rule 117 (directive -> EXTERNAL .)
    VAR             reduce using rule 117 (directive -> EXTERNAL .)
    CONSTRUCTOR     reduce using rule 117 (directive -> EXTERNAL .)
    DESTRUCTOR      reduce using rule 117 (directive -> EXTERNAL .)
    PROCEDURE       reduce using rule 117 (directive -> EXTERNAL .)
    FUNCTION        reduce using rule 117 (directive -> EXTERNAL .)
    IMPLEMENTATION  reduce using rule 117 (directive -> EXTERNAL .)
    INTERFACE       reduce using rule 117 (directive -> EXTERNAL .)
    END             reduce using rule 117 (directive -> EXTERNAL .)
    STRING          shift and go to state 257


state 147

    (119) directive -> ASM .

    SEMICOLON       reduce using rule 119 (directive -> ASM .)
    BEGIN           reduce using rule 119 (directive -> ASM .)
    LABEL           reduce using rule 119 (directive -> ASM .)
    CONST           reduce using rule 119 (directive -> ASM .)
    TYPE            reduce using rule 119 (directive -> ASM .)
    VAR             reduce using rule 119 (directive -> ASM .)
    CONSTRUCTOR     reduce using rule 119 (directive -> ASM .)
    DESTRUCTOR      reduce using rule 119 (directive -> ASM .)
    PROCEDURE       reduce using rule 119 (directive -> ASM .)
    FUNCTION        reduce using rule 119 (directive -> ASM .)
    IMPLEMENTATION  reduce using rule 119 (directive -> ASM .)
    INTERFACE       reduce using rule 119 (directive -> ASM .)
    END             reduce using rule 119 (directive -> ASM .)


state 148

    (120) directive -> INLINE .

    SEMICOLON       reduce using rule 120 (directive -> INLINE .)
    BEGIN           reduce using rule 120 (directive -> INLINE .)
    LABEL           reduce using rule 120 (directive -> INLINE .)
    CONST           reduce using rule 120 (directive -> INLINE .)
    TYPE            reduce using rule 120 (directive -> INLINE .)
    VAR             reduce using rule 120 (directive -> INLINE .)
    CONSTRUCTOR     reduce using rule 120 (directive -> INLINE .)
    DESTRUCTOR      reduce using rule 120 (directive -> INLINE .)
    PROCEDURE       reduce using rule 120 (directive -> INLINE .)
    FUNCTION        reduce using rule 120 (directive -> INLINE .)
    IMPLEMENTATION  reduce using rule 120 (directive -> INLINE .)
    INTERFACE       reduce using rule 120 (directive -> INLINE .)
    END             reduce using rule 120 (directive -> INLINE .)


state 149

    (121) directive -> VIRTUAL .

    SEMICOLON       reduce using rule 121 (directive -> VIRTUAL .)
    BEGIN           reduce using rule 121 (directive -> VIRTUAL .)
    LABEL           reduce using rule 121 (directive -> VIRTUAL .)
    CONST           reduce using rule 121 (directive -> VIRTUAL .)
    TYPE            reduce using rule 121 (directive -> VIRTUAL .)
    VAR             reduce using rule 121 (directive -> VIRTUAL .)
    CONSTRUCTOR     reduce using rule 121 (directive -> VIRTUAL .)
    DESTRUCTOR      reduce using rule 121 (directive -> VIRTUAL .)
    PROCEDURE       reduce using rule 121 (directive -> VIRTUAL .)
    FUNCTION        reduce using rule 121 (directive -> VIRTUAL .)
    IMPLEMENTATION  reduce using rule 121 (directive -> VIRTUAL .)
    INTERFACE       reduce using rule 121 (directive -> VIRTUAL .)
    END             reduce using rule 121 (directive -> VIRTUAL .)


state 150

    (122) function_declaration -> function_header SEMICOLON directive .

    BEGIN           reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    LABEL           reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    CONST           reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    TYPE            reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    VAR             reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)
    INTERFACE       reduce using rule 122 (function_declaration -> function_header SEMICOLON directive .)


state 151

    (123) function_declaration -> function_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    function_header                shift and go to state 36
    compound_statement             shift and go to state 258
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35

state 152

    (88) constructor_implementation -> CONSTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 259


state 153

    (89) destructor_implementation -> DESTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 260


state 154

    (90) method_implementation -> PROCEDURE ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 261


state 155

    (115) procedure_header -> PROCEDURE ID parameters .

    SEMICOLON       reduce using rule 115 (procedure_header -> PROCEDURE ID parameters .)
    RPAREN          reduce using rule 115 (procedure_header -> PROCEDURE ID parameters .)


state 156

    (125) parameters -> LPAREN . parameter_list RPAREN
    (127) parameter_list -> . parameter_list SEMICOLON parameter_group
    (128) parameter_list -> . parameter_group
    (129) parameter_group -> . id_list COLON data_type_list
    (130) parameter_group -> . VAR id_list COLON data_type_list
    (131) parameter_group -> . CONST id_list COLON data_type_list
    (132) parameter_group -> . procedure_header
    (133) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 265
    CONST           shift and go to state 266
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 269
    FUNCTION        shift and go to state 270

    parameter_list                 shift and go to state 262
    parameter_group                shift and go to state 263
    id_list                        shift and go to state 264
    procedure_header               shift and go to state 267
    function_header                shift and go to state 268

state 157

    (126) parameters -> empty .

    SEMICOLON       reduce using rule 126 (parameters -> empty .)
    COLON           reduce using rule 126 (parameters -> empty .)
    RPAREN          reduce using rule 126 (parameters -> empty .)


state 158

    (91) method_implementation -> FUNCTION ID DOT . ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 271


state 159

    (124) function_header -> FUNCTION ID parameters . COLON data_type_list

    COLON           shift and go to state 272


state 160

    (158) sentences_list -> sentences_list sentence SEMICOLON .

    END             reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    ID              reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    NEW             reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    BEGIN           reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    IF              reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    CASE            reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    FOR             reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    WHILE           reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    REPEAT          reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    WITH            reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    GOTO            reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    NUMBER          reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    ASM             reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    SEMICOLON       reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)
    UNTIL           reduce using rule 158 (sentences_list -> sentences_list sentence SEMICOLON .)


state 161

    (175) assignment -> variable ASIGNATION expression .
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 175 (assignment -> variable ASIGNATION expression .)
    ELSE            reduce using rule 175 (assignment -> variable ASIGNATION expression .)
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 162

    (179) procedure_call -> variable DOT ID . LPAREN expression_list RPAREN
    (180) procedure_call -> variable DOT ID . LPAREN RPAREN
    (249) variable -> variable DOT ID .

    LPAREN          shift and go to state 273
    ASIGNATION      reduce using rule 249 (variable -> variable DOT ID .)
    DOT             reduce using rule 249 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 249 (variable -> variable DOT ID .)
    CARET           reduce using rule 249 (variable -> variable DOT ID .)


state 163

    (250) variable -> variable LBRACKET expression_list . RBRACKET
    (257) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 274
    COMMA           shift and go to state 275


state 164

    (256) expression_list -> expression .
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 256 (expression_list -> expression .)
    COMMA           reduce using rule 256 (expression_list -> expression .)
    RPAREN          reduce using rule 256 (expression_list -> expression .)
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 165

    (177) procedure_call -> ID LPAREN expression_list . RPAREN
    (257) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 276
    COMMA           shift and go to state 275


state 166

    (178) procedure_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 178 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 178 (procedure_call -> ID LPAREN RPAREN .)


state 167

    (181) procedure_call -> NEW LPAREN expression_list . RPAREN
    (257) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 277
    COMMA           shift and go to state 275


state 168

    (182) procedure_call -> NEW LPAREN RPAREN .

    SEMICOLON       reduce using rule 182 (procedure_call -> NEW LPAREN RPAREN .)
    ELSE            reduce using rule 182 (procedure_call -> NEW LPAREN RPAREN .)


state 169

    (183) if_statement -> IF expression THEN . sentence
    (184) if_statement -> IF expression THEN . sentence ELSE sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 278
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 170

    (204) expression -> expression OR . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    simple_expression              shift and go to state 279
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 171

    (205) expression -> expression XOR . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    simple_expression              shift and go to state 280
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 172

    (207) simple_expression -> simple_expression AND . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    relational_expression          shift and go to state 281
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 173

    (209) relational_expression -> relational_expression relational_operator . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    additive_expression            shift and go to state 282
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 174

    (211) relational_operator -> EQUAL .

    NOT             reduce using rule 211 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 211 (relational_operator -> EQUAL .)
    PLUS            reduce using rule 211 (relational_operator -> EQUAL .)
    ADDRESS_OF      reduce using rule 211 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 211 (relational_operator -> EQUAL .)
    STRING          reduce using rule 211 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 211 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 211 (relational_operator -> EQUAL .)
    NIL             reduce using rule 211 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 211 (relational_operator -> EQUAL .)
    ID              reduce using rule 211 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 211 (relational_operator -> EQUAL .)


state 175

    (212) relational_operator -> DISTINT .

    NOT             reduce using rule 212 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 212 (relational_operator -> DISTINT .)
    PLUS            reduce using rule 212 (relational_operator -> DISTINT .)
    ADDRESS_OF      reduce using rule 212 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 212 (relational_operator -> DISTINT .)
    STRING          reduce using rule 212 (relational_operator -> DISTINT .)
    TRUE            reduce using rule 212 (relational_operator -> DISTINT .)
    FALSE           reduce using rule 212 (relational_operator -> DISTINT .)
    NIL             reduce using rule 212 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 212 (relational_operator -> DISTINT .)
    ID              reduce using rule 212 (relational_operator -> DISTINT .)
    LBRACKET        reduce using rule 212 (relational_operator -> DISTINT .)


state 176

    (213) relational_operator -> LESS .

    NOT             reduce using rule 213 (relational_operator -> LESS .)
    MINUS           reduce using rule 213 (relational_operator -> LESS .)
    PLUS            reduce using rule 213 (relational_operator -> LESS .)
    ADDRESS_OF      reduce using rule 213 (relational_operator -> LESS .)
    NUMBER          reduce using rule 213 (relational_operator -> LESS .)
    STRING          reduce using rule 213 (relational_operator -> LESS .)
    TRUE            reduce using rule 213 (relational_operator -> LESS .)
    FALSE           reduce using rule 213 (relational_operator -> LESS .)
    NIL             reduce using rule 213 (relational_operator -> LESS .)
    LPAREN          reduce using rule 213 (relational_operator -> LESS .)
    ID              reduce using rule 213 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 213 (relational_operator -> LESS .)


state 177

    (214) relational_operator -> LESSEQUAL .

    NOT             reduce using rule 214 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 214 (relational_operator -> LESSEQUAL .)
    PLUS            reduce using rule 214 (relational_operator -> LESSEQUAL .)
    ADDRESS_OF      reduce using rule 214 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 214 (relational_operator -> LESSEQUAL .)
    STRING          reduce using rule 214 (relational_operator -> LESSEQUAL .)
    TRUE            reduce using rule 214 (relational_operator -> LESSEQUAL .)
    FALSE           reduce using rule 214 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 214 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 214 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 214 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 214 (relational_operator -> LESSEQUAL .)


state 178

    (215) relational_operator -> GREATER .

    NOT             reduce using rule 215 (relational_operator -> GREATER .)
    MINUS           reduce using rule 215 (relational_operator -> GREATER .)
    PLUS            reduce using rule 215 (relational_operator -> GREATER .)
    ADDRESS_OF      reduce using rule 215 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 215 (relational_operator -> GREATER .)
    STRING          reduce using rule 215 (relational_operator -> GREATER .)
    TRUE            reduce using rule 215 (relational_operator -> GREATER .)
    FALSE           reduce using rule 215 (relational_operator -> GREATER .)
    NIL             reduce using rule 215 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 215 (relational_operator -> GREATER .)
    ID              reduce using rule 215 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 215 (relational_operator -> GREATER .)


state 179

    (216) relational_operator -> GREATEREQUAL .

    NOT             reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    PLUS            reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    ADDRESS_OF      reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    STRING          reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    TRUE            reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    FALSE           reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 216 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 216 (relational_operator -> GREATEREQUAL .)


state 180

    (217) relational_operator -> IN .

    NOT             reduce using rule 217 (relational_operator -> IN .)
    MINUS           reduce using rule 217 (relational_operator -> IN .)
    PLUS            reduce using rule 217 (relational_operator -> IN .)
    ADDRESS_OF      reduce using rule 217 (relational_operator -> IN .)
    NUMBER          reduce using rule 217 (relational_operator -> IN .)
    STRING          reduce using rule 217 (relational_operator -> IN .)
    TRUE            reduce using rule 217 (relational_operator -> IN .)
    FALSE           reduce using rule 217 (relational_operator -> IN .)
    NIL             reduce using rule 217 (relational_operator -> IN .)
    LPAREN          reduce using rule 217 (relational_operator -> IN .)
    ID              reduce using rule 217 (relational_operator -> IN .)
    LBRACKET        reduce using rule 217 (relational_operator -> IN .)


state 181

    (218) additive_expression -> additive_expression PLUS . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    multiplicative_expression      shift and go to state 283
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 182

    (219) additive_expression -> additive_expression MINUS . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    multiplicative_expression      shift and go to state 284
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 183

    (230) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    SHL             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    SHR             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DISTINT         reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    LESSEQUAL       reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    GREATEREQUAL    reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    IN              reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    THEN            reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    OF              reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DO              reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DOBLEDOT        reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    TO              reduce using rule 230 (unary_expression -> PLUS unary_expression .)
    DOWNTO          reduce using rule 230 (unary_expression -> PLUS unary_expression .)


state 184

    (221) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 285
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 185

    (222) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 286
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 186

    (223) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 287
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 187

    (224) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 288
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 188

    (225) multiplicative_expression -> multiplicative_expression SHL . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 289
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 189

    (226) multiplicative_expression -> multiplicative_expression SHR . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    unary_expression               shift and go to state 290
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 190

    (229) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    SHL             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    SHR             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DISTINT         reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    LESSEQUAL       reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    GREATEREQUAL    reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    IN              reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    THEN            reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    OF              reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DO              reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DOBLEDOT        reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    TO              reduce using rule 229 (unary_expression -> MINUS unary_expression .)
    DOWNTO          reduce using rule 229 (unary_expression -> MINUS unary_expression .)


state 191

    (228) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    SHL             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    SHR             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 228 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 228 (unary_expression -> NOT unary_expression .)
    EQUAL           reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DISTINT         reduce using rule 228 (unary_expression -> NOT unary_expression .)
    LESS            reduce using rule 228 (unary_expression -> NOT unary_expression .)
    LESSEQUAL       reduce using rule 228 (unary_expression -> NOT unary_expression .)
    GREATER         reduce using rule 228 (unary_expression -> NOT unary_expression .)
    GREATEREQUAL    reduce using rule 228 (unary_expression -> NOT unary_expression .)
    IN              reduce using rule 228 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    THEN            reduce using rule 228 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 228 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 228 (unary_expression -> NOT unary_expression .)
    OF              reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DO              reduce using rule 228 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 228 (unary_expression -> NOT unary_expression .)
    ELSE            reduce using rule 228 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 228 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 228 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DOBLEDOT        reduce using rule 228 (unary_expression -> NOT unary_expression .)
    TO              reduce using rule 228 (unary_expression -> NOT unary_expression .)
    DOWNTO          reduce using rule 228 (unary_expression -> NOT unary_expression .)


state 192

    (231) unary_expression -> ADDRESS_OF unary_expression .

    TIMES           reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DIVIDE          reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DIV             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    MOD             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    SHL             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    SHR             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    PLUS            reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    MINUS           reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    EQUAL           reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DISTINT         reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    LESS            reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    LESSEQUAL       reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATER         reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATEREQUAL    reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    IN              reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    AND             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    THEN            reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    OR              reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    XOR             reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    OF              reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DO              reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    SEMICOLON       reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    ELSE            reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    RBRACKET        reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    COMMA           reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    RPAREN          reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DOBLEDOT        reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    TO              reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)
    DOWNTO          reduce using rule 231 (unary_expression -> ADDRESS_OF unary_expression .)


state 193

    (249) variable -> variable DOT . ID
    (254) function_call -> variable DOT . ID LPAREN expression_list RPAREN
    (255) function_call -> variable DOT . ID LPAREN RPAREN

    ID              shift and go to state 291


state 194

    (239) primary_expression -> LPAREN expression . RPAREN
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    RPAREN          shift and go to state 292
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 195

    (252) function_call -> ID LPAREN . expression_list RPAREN
    (253) function_call -> ID LPAREN . RPAREN
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 294
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression_list                shift and go to state 293
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 196

    (246) set_constructor -> LBRACKET set_item_list . RBRACKET
    (245) set_item_list -> set_item_list . COMMA set_item

    RBRACKET        shift and go to state 295
    COMMA           shift and go to state 296


state 197

    (247) set_constructor -> LBRACKET RBRACKET .

    TIMES           reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DIV             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    MOD             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    SHL             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    SHR             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DISTINT         reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    LESS            reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    IN              reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    AND             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    THEN            reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    OR              reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    XOR             reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    OF              reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DO              reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DOBLEDOT        reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    TO              reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)
    DOWNTO          reduce using rule 247 (set_constructor -> LBRACKET RBRACKET .)


state 198

    (244) set_item_list -> set_item .

    RBRACKET        reduce using rule 244 (set_item_list -> set_item .)
    COMMA           reduce using rule 244 (set_item_list -> set_item .)


state 199

    (242) set_item -> expression .
    (243) set_item -> expression . DOBLEDOT expression
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 242 (set_item -> expression .)
    COMMA           reduce using rule 242 (set_item -> expression .)
    DOBLEDOT        shift and go to state 297
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 200

    (185) case_statement -> CASE expression OF . case_list END
    (186) case_statement -> CASE expression OF . case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> CASE expression OF . case_list ELSE sentences_list END
    (188) case_list -> . case_list case_label COLON sentence SEMICOLON
    (189) case_list -> . case_label COLON sentence SEMICOLON
    (190) case_list -> . empty
    (191) case_label -> . constant
    (192) case_label -> . constant DOBLEDOT constant
    (193) case_label -> . case_label COMMA constant
    (203) empty -> .
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for ORDINAL_CONSTANT resolved as shift
    END             reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)
    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

  ! NUMBER          [ reduce using rule 203 (empty -> .) ]
  ! STRING          [ reduce using rule 203 (empty -> .) ]
  ! TRUE            [ reduce using rule 203 (empty -> .) ]
  ! FALSE           [ reduce using rule 203 (empty -> .) ]
  ! NIL             [ reduce using rule 203 (empty -> .) ]
  ! ORDINAL_CONSTANT [ reduce using rule 203 (empty -> .) ]

    case_list                      shift and go to state 298
    case_label                     shift and go to state 299
    empty                          shift and go to state 300
    constant                       shift and go to state 301

state 201

    (194) for_statement -> FOR ID ASIGNATION . expression TO expression DO sentence
    (195) for_statement -> FOR ID ASIGNATION . expression DOWNTO expression DO sentence
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 302
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 202

    (196) while_statement -> WHILE expression DO . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 303
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 203

    (197) repeat_statement -> REPEAT sentences_list UNTIL . expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 304
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 204

    (198) with_statement -> WITH variable_list DO . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 305
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 205

    (200) variable_list -> variable_list COMMA . variable
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 131

    variable                       shift and go to state 306

state 206

    (249) variable -> variable DOT . ID

    ID              shift and go to state 307


state 207

    (202) labeled_sentence -> NUMBER COLON sentence .

    SEMICOLON       reduce using rule 202 (labeled_sentence -> NUMBER COLON sentence .)
    ELSE            reduce using rule 202 (labeled_sentence -> NUMBER COLON sentence .)


state 208

    (26) number_list -> number_list COMMA NUMBER .

    SEMICOLON       reduce using rule 26 (number_list -> number_list COMMA NUMBER .)
    COMMA           reduce using rule 26 (number_list -> number_list COMMA NUMBER .)


state 209

    (30) const_declaration -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 308


state 210

    (32) constant -> NUMBER .

    SEMICOLON       reduce using rule 32 (constant -> NUMBER .)
    DOBLEDOT        reduce using rule 32 (constant -> NUMBER .)
    COLON           reduce using rule 32 (constant -> NUMBER .)
    COMMA           reduce using rule 32 (constant -> NUMBER .)


state 211

    (33) constant -> STRING .

    SEMICOLON       reduce using rule 33 (constant -> STRING .)
    DOBLEDOT        reduce using rule 33 (constant -> STRING .)
    COLON           reduce using rule 33 (constant -> STRING .)
    COMMA           reduce using rule 33 (constant -> STRING .)


state 212

    (34) constant -> TRUE .

    SEMICOLON       reduce using rule 34 (constant -> TRUE .)
    DOBLEDOT        reduce using rule 34 (constant -> TRUE .)
    COLON           reduce using rule 34 (constant -> TRUE .)
    COMMA           reduce using rule 34 (constant -> TRUE .)


state 213

    (35) constant -> FALSE .

    SEMICOLON       reduce using rule 35 (constant -> FALSE .)
    DOBLEDOT        reduce using rule 35 (constant -> FALSE .)
    COLON           reduce using rule 35 (constant -> FALSE .)
    COMMA           reduce using rule 35 (constant -> FALSE .)


state 214

    (36) constant -> NIL .

    SEMICOLON       reduce using rule 36 (constant -> NIL .)
    DOBLEDOT        reduce using rule 36 (constant -> NIL .)
    COLON           reduce using rule 36 (constant -> NIL .)
    COMMA           reduce using rule 36 (constant -> NIL .)


state 215

    (37) constant -> ORDINAL_CONSTANT .

    SEMICOLON       reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    DOBLEDOT        reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COLON           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COMMA           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)


state 216

    (148) data_type_list -> ID .

    EQUAL           reduce using rule 148 (data_type_list -> ID .)
    SEMICOLON       reduce using rule 148 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> ID .)
    RPAREN          reduce using rule 148 (data_type_list -> ID .)
    END             reduce using rule 148 (data_type_list -> ID .)
    CASE            reduce using rule 148 (data_type_list -> ID .)
    ID              reduce using rule 148 (data_type_list -> ID .)
    OF              reduce using rule 148 (data_type_list -> ID .)


state 217

    (31) const_declaration -> ID COLON data_type_list . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 309


state 218

    (134) data_type_list -> INTEGER .

    EQUAL           reduce using rule 134 (data_type_list -> INTEGER .)
    SEMICOLON       reduce using rule 134 (data_type_list -> INTEGER .)
    ABSOLUTE        reduce using rule 134 (data_type_list -> INTEGER .)
    RPAREN          reduce using rule 134 (data_type_list -> INTEGER .)
    END             reduce using rule 134 (data_type_list -> INTEGER .)
    CASE            reduce using rule 134 (data_type_list -> INTEGER .)
    ID              reduce using rule 134 (data_type_list -> INTEGER .)
    OF              reduce using rule 134 (data_type_list -> INTEGER .)


state 219

    (135) data_type_list -> BYTE .

    EQUAL           reduce using rule 135 (data_type_list -> BYTE .)
    SEMICOLON       reduce using rule 135 (data_type_list -> BYTE .)
    ABSOLUTE        reduce using rule 135 (data_type_list -> BYTE .)
    RPAREN          reduce using rule 135 (data_type_list -> BYTE .)
    END             reduce using rule 135 (data_type_list -> BYTE .)
    CASE            reduce using rule 135 (data_type_list -> BYTE .)
    ID              reduce using rule 135 (data_type_list -> BYTE .)
    OF              reduce using rule 135 (data_type_list -> BYTE .)


state 220

    (136) data_type_list -> LONGINT .

    EQUAL           reduce using rule 136 (data_type_list -> LONGINT .)
    SEMICOLON       reduce using rule 136 (data_type_list -> LONGINT .)
    ABSOLUTE        reduce using rule 136 (data_type_list -> LONGINT .)
    RPAREN          reduce using rule 136 (data_type_list -> LONGINT .)
    END             reduce using rule 136 (data_type_list -> LONGINT .)
    CASE            reduce using rule 136 (data_type_list -> LONGINT .)
    ID              reduce using rule 136 (data_type_list -> LONGINT .)
    OF              reduce using rule 136 (data_type_list -> LONGINT .)


state 221

    (137) data_type_list -> SHORTINT .

    EQUAL           reduce using rule 137 (data_type_list -> SHORTINT .)
    SEMICOLON       reduce using rule 137 (data_type_list -> SHORTINT .)
    ABSOLUTE        reduce using rule 137 (data_type_list -> SHORTINT .)
    RPAREN          reduce using rule 137 (data_type_list -> SHORTINT .)
    END             reduce using rule 137 (data_type_list -> SHORTINT .)
    CASE            reduce using rule 137 (data_type_list -> SHORTINT .)
    ID              reduce using rule 137 (data_type_list -> SHORTINT .)
    OF              reduce using rule 137 (data_type_list -> SHORTINT .)


state 222

    (138) data_type_list -> WORD .

    EQUAL           reduce using rule 138 (data_type_list -> WORD .)
    SEMICOLON       reduce using rule 138 (data_type_list -> WORD .)
    ABSOLUTE        reduce using rule 138 (data_type_list -> WORD .)
    RPAREN          reduce using rule 138 (data_type_list -> WORD .)
    END             reduce using rule 138 (data_type_list -> WORD .)
    CASE            reduce using rule 138 (data_type_list -> WORD .)
    ID              reduce using rule 138 (data_type_list -> WORD .)
    OF              reduce using rule 138 (data_type_list -> WORD .)


state 223

    (139) data_type_list -> REAL .

    EQUAL           reduce using rule 139 (data_type_list -> REAL .)
    SEMICOLON       reduce using rule 139 (data_type_list -> REAL .)
    ABSOLUTE        reduce using rule 139 (data_type_list -> REAL .)
    RPAREN          reduce using rule 139 (data_type_list -> REAL .)
    END             reduce using rule 139 (data_type_list -> REAL .)
    CASE            reduce using rule 139 (data_type_list -> REAL .)
    ID              reduce using rule 139 (data_type_list -> REAL .)
    OF              reduce using rule 139 (data_type_list -> REAL .)


state 224

    (140) data_type_list -> SINGLE .

    EQUAL           reduce using rule 140 (data_type_list -> SINGLE .)
    SEMICOLON       reduce using rule 140 (data_type_list -> SINGLE .)
    ABSOLUTE        reduce using rule 140 (data_type_list -> SINGLE .)
    RPAREN          reduce using rule 140 (data_type_list -> SINGLE .)
    END             reduce using rule 140 (data_type_list -> SINGLE .)
    CASE            reduce using rule 140 (data_type_list -> SINGLE .)
    ID              reduce using rule 140 (data_type_list -> SINGLE .)
    OF              reduce using rule 140 (data_type_list -> SINGLE .)


state 225

    (141) data_type_list -> DOUBLE .

    EQUAL           reduce using rule 141 (data_type_list -> DOUBLE .)
    SEMICOLON       reduce using rule 141 (data_type_list -> DOUBLE .)
    ABSOLUTE        reduce using rule 141 (data_type_list -> DOUBLE .)
    RPAREN          reduce using rule 141 (data_type_list -> DOUBLE .)
    END             reduce using rule 141 (data_type_list -> DOUBLE .)
    CASE            reduce using rule 141 (data_type_list -> DOUBLE .)
    ID              reduce using rule 141 (data_type_list -> DOUBLE .)
    OF              reduce using rule 141 (data_type_list -> DOUBLE .)


state 226

    (142) data_type_list -> EXTENDED .

    EQUAL           reduce using rule 142 (data_type_list -> EXTENDED .)
    SEMICOLON       reduce using rule 142 (data_type_list -> EXTENDED .)
    ABSOLUTE        reduce using rule 142 (data_type_list -> EXTENDED .)
    RPAREN          reduce using rule 142 (data_type_list -> EXTENDED .)
    END             reduce using rule 142 (data_type_list -> EXTENDED .)
    CASE            reduce using rule 142 (data_type_list -> EXTENDED .)
    ID              reduce using rule 142 (data_type_list -> EXTENDED .)
    OF              reduce using rule 142 (data_type_list -> EXTENDED .)


state 227

    (143) data_type_list -> SHORT .

    EQUAL           reduce using rule 143 (data_type_list -> SHORT .)
    SEMICOLON       reduce using rule 143 (data_type_list -> SHORT .)
    ABSOLUTE        reduce using rule 143 (data_type_list -> SHORT .)
    RPAREN          reduce using rule 143 (data_type_list -> SHORT .)
    END             reduce using rule 143 (data_type_list -> SHORT .)
    CASE            reduce using rule 143 (data_type_list -> SHORT .)
    ID              reduce using rule 143 (data_type_list -> SHORT .)
    OF              reduce using rule 143 (data_type_list -> SHORT .)


state 228

    (144) data_type_list -> BOOLEAN .

    EQUAL           reduce using rule 144 (data_type_list -> BOOLEAN .)
    SEMICOLON       reduce using rule 144 (data_type_list -> BOOLEAN .)
    ABSOLUTE        reduce using rule 144 (data_type_list -> BOOLEAN .)
    RPAREN          reduce using rule 144 (data_type_list -> BOOLEAN .)
    END             reduce using rule 144 (data_type_list -> BOOLEAN .)
    CASE            reduce using rule 144 (data_type_list -> BOOLEAN .)
    ID              reduce using rule 144 (data_type_list -> BOOLEAN .)
    OF              reduce using rule 144 (data_type_list -> BOOLEAN .)


state 229

    (145) data_type_list -> CHAR .

    EQUAL           reduce using rule 145 (data_type_list -> CHAR .)
    SEMICOLON       reduce using rule 145 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 145 (data_type_list -> CHAR .)
    RPAREN          reduce using rule 145 (data_type_list -> CHAR .)
    END             reduce using rule 145 (data_type_list -> CHAR .)
    CASE            reduce using rule 145 (data_type_list -> CHAR .)
    ID              reduce using rule 145 (data_type_list -> CHAR .)
    OF              reduce using rule 145 (data_type_list -> CHAR .)


state 230

    (146) data_type_list -> STRING .
    (147) data_type_list -> STRING . LBRACKET NUMBER RBRACKET

    EQUAL           reduce using rule 146 (data_type_list -> STRING .)
    SEMICOLON       reduce using rule 146 (data_type_list -> STRING .)
    ABSOLUTE        reduce using rule 146 (data_type_list -> STRING .)
    RPAREN          reduce using rule 146 (data_type_list -> STRING .)
    END             reduce using rule 146 (data_type_list -> STRING .)
    CASE            reduce using rule 146 (data_type_list -> STRING .)
    ID              reduce using rule 146 (data_type_list -> STRING .)
    OF              reduce using rule 146 (data_type_list -> STRING .)
    LBRACKET        shift and go to state 310


state 231

    (149) data_type_list -> ABSOLUTE . ID

    ID              shift and go to state 311


state 232

    (150) data_type_list -> FILE .

    EQUAL           reduce using rule 150 (data_type_list -> FILE .)
    SEMICOLON       reduce using rule 150 (data_type_list -> FILE .)
    ABSOLUTE        reduce using rule 150 (data_type_list -> FILE .)
    RPAREN          reduce using rule 150 (data_type_list -> FILE .)
    END             reduce using rule 150 (data_type_list -> FILE .)
    CASE            reduce using rule 150 (data_type_list -> FILE .)
    ID              reduce using rule 150 (data_type_list -> FILE .)
    OF              reduce using rule 150 (data_type_list -> FILE .)


state 233

    (46) type_definition -> ID . DOBLEDOT ID
    (148) data_type_list -> ID .

    DOBLEDOT        shift and go to state 312
    SEMICOLON       reduce using rule 148 (data_type_list -> ID .)


state 234

    (41) type_declaration -> ID EQUAL type_definition . SEMICOLON

    SEMICOLON       shift and go to state 313


state 235

    (42) type_definition -> data_type_list .

    SEMICOLON       reduce using rule 42 (type_definition -> data_type_list .)


state 236

    (43) type_definition -> LPAREN . id_list RPAREN
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 314

state 237

    (44) type_definition -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 315


state 238

    (45) type_definition -> CHAR . DOBLEDOT CHAR
    (145) data_type_list -> CHAR .

    DOBLEDOT        shift and go to state 316
    SEMICOLON       reduce using rule 145 (data_type_list -> CHAR .)


state 239

    (47) type_definition -> record_type .

    SEMICOLON       reduce using rule 47 (type_definition -> record_type .)


state 240

    (48) type_definition -> array_type .

    SEMICOLON       reduce using rule 48 (type_definition -> array_type .)


state 241

    (49) type_definition -> set_type .

    SEMICOLON       reduce using rule 49 (type_definition -> set_type .)


state 242

    (50) type_definition -> pointer_type .

    SEMICOLON       reduce using rule 50 (type_definition -> pointer_type .)


state 243

    (51) type_definition -> file_type .

    SEMICOLON       reduce using rule 51 (type_definition -> file_type .)


state 244

    (52) type_definition -> object_type .

    SEMICOLON       reduce using rule 52 (type_definition -> object_type .)


state 245

    (53) type_definition -> string_type .

    SEMICOLON       reduce using rule 53 (type_definition -> string_type .)


state 246

    (146) data_type_list -> STRING .
    (147) data_type_list -> STRING . LBRACKET NUMBER RBRACKET
    (54) string_type -> STRING .
    (55) string_type -> STRING . LBRACKET NUMBER RBRACKET

  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (string_type -> STRING .)
    LBRACKET        shift and go to state 317
    SEMICOLON       reduce using rule 54 (string_type -> STRING .)

  ! SEMICOLON       [ reduce using rule 146 (data_type_list -> STRING .) ]


state 247

    (150) data_type_list -> FILE .
    (73) file_type -> FILE . OF data_type_list
    (74) file_type -> FILE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (file_type -> FILE .)
    OF              shift and go to state 318
    SEMICOLON       reduce using rule 74 (file_type -> FILE .)

  ! SEMICOLON       [ reduce using rule 150 (data_type_list -> FILE .) ]


state 248

    (56) record_type -> RECORD . record_list END
    (96) record_list -> . record_list record_declaration
    (97) record_list -> . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_list                    shift and go to state 319
    record_declaration             shift and go to state 320
    id_list                        shift and go to state 321

state 249

    (57) record_type -> PACKED . RECORD record_list END
    (59) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list

    RECORD          shift and go to state 323
    ARRAY           shift and go to state 324


state 250

    (58) array_type -> ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 325


state 251

    (66) set_type -> SET . OF set_range

    OF              shift and go to state 326


state 252

    (71) pointer_type -> CARET . ID
    (72) pointer_type -> CARET . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    ID              shift and go to state 327
    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 328

state 253

    (75) object_type -> OBJECT . object_heritage object_fields object_methods END
    (76) object_heritage -> . LPAREN ID RPAREN
    (77) object_heritage -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 330
    ID              reduce using rule 203 (empty -> .)
    END             reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)

    object_heritage                shift and go to state 329
    empty                          shift and go to state 331

state 254

    (110) var_declaration -> id_list COLON data_type_list . SEMICOLON
    (111) var_declaration -> id_list COLON data_type_list . EQUAL expression SEMICOLON
    (112) var_declaration -> id_list COLON data_type_list . ABSOLUTE ID SEMICOLON

    SEMICOLON       shift and go to state 332
    EQUAL           shift and go to state 333
    ABSOLUTE        shift and go to state 334


state 255

    (113) procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .

    BEGIN           reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    LABEL           reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONST           reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    TYPE            reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    VAR             reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONSTRUCTOR     reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    DESTRUCTOR      reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    PROCEDURE       reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    FUNCTION        reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    IMPLEMENTATION  reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    INTERFACE       reduce using rule 113 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)


state 256

    (114) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 335


state 257

    (118) directive -> EXTERNAL STRING .

    SEMICOLON       reduce using rule 118 (directive -> EXTERNAL STRING .)
    BEGIN           reduce using rule 118 (directive -> EXTERNAL STRING .)
    LABEL           reduce using rule 118 (directive -> EXTERNAL STRING .)
    CONST           reduce using rule 118 (directive -> EXTERNAL STRING .)
    TYPE            reduce using rule 118 (directive -> EXTERNAL STRING .)
    VAR             reduce using rule 118 (directive -> EXTERNAL STRING .)
    CONSTRUCTOR     reduce using rule 118 (directive -> EXTERNAL STRING .)
    DESTRUCTOR      reduce using rule 118 (directive -> EXTERNAL STRING .)
    PROCEDURE       reduce using rule 118 (directive -> EXTERNAL STRING .)
    FUNCTION        reduce using rule 118 (directive -> EXTERNAL STRING .)
    IMPLEMENTATION  reduce using rule 118 (directive -> EXTERNAL STRING .)
    INTERFACE       reduce using rule 118 (directive -> EXTERNAL STRING .)
    END             reduce using rule 118 (directive -> EXTERNAL STRING .)


state 258

    (123) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 336


state 259

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 337
    empty                          shift and go to state 157

state 260

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 338
    empty                          shift and go to state 157

state 261

    (90) method_implementation -> PROCEDURE ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 339
    empty                          shift and go to state 157

state 262

    (125) parameters -> LPAREN parameter_list . RPAREN
    (127) parameter_list -> parameter_list . SEMICOLON parameter_group

    RPAREN          shift and go to state 340
    SEMICOLON       shift and go to state 341


state 263

    (128) parameter_list -> parameter_group .

    RPAREN          reduce using rule 128 (parameter_list -> parameter_group .)
    SEMICOLON       reduce using rule 128 (parameter_list -> parameter_group .)


state 264

    (129) parameter_group -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 342
    COMMA           shift and go to state 44


state 265

    (130) parameter_group -> VAR . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 343

state 266

    (131) parameter_group -> CONST . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 344

state 267

    (132) parameter_group -> procedure_header .

    RPAREN          reduce using rule 132 (parameter_group -> procedure_header .)
    SEMICOLON       reduce using rule 132 (parameter_group -> procedure_header .)


state 268

    (133) parameter_group -> function_header .

    RPAREN          reduce using rule 133 (parameter_group -> function_header .)
    SEMICOLON       reduce using rule 133 (parameter_group -> function_header .)


state 269

    (115) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 345


state 270

    (124) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 346


state 271

    (91) method_implementation -> FUNCTION ID DOT ID . parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    COLON           reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 347
    empty                          shift and go to state 157

state 272

    (124) function_header -> FUNCTION ID parameters COLON . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 348

state 273

    (179) procedure_call -> variable DOT ID LPAREN . expression_list RPAREN
    (180) procedure_call -> variable DOT ID LPAREN . RPAREN
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 350
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    variable                       shift and go to state 114
    expression_list                shift and go to state 349
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 274

    (250) variable -> variable LBRACKET expression_list RBRACKET .

    ASIGNATION      reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    CARET           reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DISTINT         reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOBLEDOT        reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 250 (variable -> variable LBRACKET expression_list RBRACKET .)


state 275

    (257) expression_list -> expression_list COMMA . expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 351
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 276

    (177) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 177 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 177 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 277

    (181) procedure_call -> NEW LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 181 (procedure_call -> NEW LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 181 (procedure_call -> NEW LPAREN expression_list RPAREN .)


state 278

    (183) if_statement -> IF expression THEN sentence .
    (184) if_statement -> IF expression THEN sentence . ELSE sentence

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 183 (if_statement -> IF expression THEN sentence .)
    ELSE            shift and go to state 352

  ! ELSE            [ reduce using rule 183 (if_statement -> IF expression THEN sentence .) ]


state 279

    (204) expression -> expression OR simple_expression .
    (207) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 204 (expression -> expression OR simple_expression .)
    OR              reduce using rule 204 (expression -> expression OR simple_expression .)
    XOR             reduce using rule 204 (expression -> expression OR simple_expression .)
    OF              reduce using rule 204 (expression -> expression OR simple_expression .)
    DO              reduce using rule 204 (expression -> expression OR simple_expression .)
    SEMICOLON       reduce using rule 204 (expression -> expression OR simple_expression .)
    ELSE            reduce using rule 204 (expression -> expression OR simple_expression .)
    RBRACKET        reduce using rule 204 (expression -> expression OR simple_expression .)
    COMMA           reduce using rule 204 (expression -> expression OR simple_expression .)
    RPAREN          reduce using rule 204 (expression -> expression OR simple_expression .)
    DOBLEDOT        reduce using rule 204 (expression -> expression OR simple_expression .)
    TO              reduce using rule 204 (expression -> expression OR simple_expression .)
    DOWNTO          reduce using rule 204 (expression -> expression OR simple_expression .)
    AND             shift and go to state 172


state 280

    (205) expression -> expression XOR simple_expression .
    (207) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 205 (expression -> expression XOR simple_expression .)
    OR              reduce using rule 205 (expression -> expression XOR simple_expression .)
    XOR             reduce using rule 205 (expression -> expression XOR simple_expression .)
    OF              reduce using rule 205 (expression -> expression XOR simple_expression .)
    DO              reduce using rule 205 (expression -> expression XOR simple_expression .)
    SEMICOLON       reduce using rule 205 (expression -> expression XOR simple_expression .)
    ELSE            reduce using rule 205 (expression -> expression XOR simple_expression .)
    RBRACKET        reduce using rule 205 (expression -> expression XOR simple_expression .)
    COMMA           reduce using rule 205 (expression -> expression XOR simple_expression .)
    RPAREN          reduce using rule 205 (expression -> expression XOR simple_expression .)
    DOBLEDOT        reduce using rule 205 (expression -> expression XOR simple_expression .)
    TO              reduce using rule 205 (expression -> expression XOR simple_expression .)
    DOWNTO          reduce using rule 205 (expression -> expression XOR simple_expression .)
    AND             shift and go to state 172


state 281

    (207) simple_expression -> simple_expression AND relational_expression .
    (209) relational_expression -> relational_expression . relational_operator additive_expression
    (211) relational_operator -> . EQUAL
    (212) relational_operator -> . DISTINT
    (213) relational_operator -> . LESS
    (214) relational_operator -> . LESSEQUAL
    (215) relational_operator -> . GREATER
    (216) relational_operator -> . GREATEREQUAL
    (217) relational_operator -> . IN

    AND             reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    THEN            reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    OR              reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    XOR             reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    OF              reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    DO              reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    SEMICOLON       reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    ELSE            reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    RBRACKET        reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    COMMA           reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    RPAREN          reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    DOBLEDOT        reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    TO              reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    DOWNTO          reduce using rule 207 (simple_expression -> simple_expression AND relational_expression .)
    EQUAL           shift and go to state 174
    DISTINT         shift and go to state 175
    LESS            shift and go to state 176
    LESSEQUAL       shift and go to state 177
    GREATER         shift and go to state 178
    GREATEREQUAL    shift and go to state 179
    IN              shift and go to state 180

    relational_operator            shift and go to state 173

state 282

    (209) relational_expression -> relational_expression relational_operator additive_expression .
    (218) additive_expression -> additive_expression . PLUS multiplicative_expression
    (219) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    DISTINT         reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESS            reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESSEQUAL       reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATER         reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATEREQUAL    reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    IN              reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    AND             reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    THEN            reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    OR              reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    XOR             reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    OF              reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    DO              reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    SEMICOLON       reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    ELSE            reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    RBRACKET        reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    COMMA           reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    RPAREN          reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOBLEDOT        reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    TO              reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOWNTO          reduce using rule 209 (relational_expression -> relational_expression relational_operator additive_expression .)
    PLUS            shift and go to state 181
    MINUS           shift and go to state 182


state 283

    (218) additive_expression -> additive_expression PLUS multiplicative_expression .
    (221) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (222) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (223) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (224) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (225) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (226) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DISTINT         reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OF              reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 218 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 184
    DIVIDE          shift and go to state 185
    DIV             shift and go to state 186
    MOD             shift and go to state 187
    SHL             shift and go to state 188
    SHR             shift and go to state 189


state 284

    (219) additive_expression -> additive_expression MINUS multiplicative_expression .
    (221) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (222) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (223) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (224) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (225) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (226) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DISTINT         reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OF              reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 219 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 184
    DIVIDE          shift and go to state 185
    DIV             shift and go to state 186
    MOD             shift and go to state 187
    SHL             shift and go to state 188
    SHR             shift and go to state 189


state 285

    (221) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHL             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHR             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DISTINT         reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESSEQUAL       reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATEREQUAL    reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IN              reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    THEN            reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OF              reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DO              reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    ELSE            reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOBLEDOT        reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TO              reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOWNTO          reduce using rule 221 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 286

    (222) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIV             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHL             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHR             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DISTINT         reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESSEQUAL       reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATEREQUAL    reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IN              reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THEN            reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OF              reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DO              reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ELSE            reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOBLEDOT        reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TO              reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOWNTO          reduce using rule 222 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 287

    (223) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVIDE          reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHL             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHR             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUAL           reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DISTINT         reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS            reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESSEQUAL       reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER         reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATEREQUAL    reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    IN              reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    THEN            reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    XOR             reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OF              reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DO              reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ELSE            reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOBLEDOT        reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    TO              reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOWNTO          reduce using rule 223 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 288

    (224) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHL             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHR             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUAL           reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DISTINT         reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS            reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESSEQUAL       reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER         reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATEREQUAL    reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IN              reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    THEN            reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OF              reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DO              reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    ELSE            reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOBLEDOT        reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    TO              reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOWNTO          reduce using rule 224 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 289

    (225) multiplicative_expression -> multiplicative_expression SHL unary_expression .

    TIMES           reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIVIDE          reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIV             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MOD             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHL             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHR             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    PLUS            reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MINUS           reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    EQUAL           reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DISTINT         reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESS            reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESSEQUAL       reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATER         reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATEREQUAL    reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    IN              reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    AND             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    THEN            reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OR              reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    XOR             reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OF              reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DO              reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SEMICOLON       reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    ELSE            reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RBRACKET        reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COMMA           reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RPAREN          reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOBLEDOT        reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    TO              reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOWNTO          reduce using rule 225 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)


state 290

    (226) multiplicative_expression -> multiplicative_expression SHR unary_expression .

    TIMES           reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIVIDE          reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIV             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MOD             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHL             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHR             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    PLUS            reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MINUS           reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    EQUAL           reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DISTINT         reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESS            reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESSEQUAL       reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATER         reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATEREQUAL    reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    IN              reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    AND             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    THEN            reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OR              reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    XOR             reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OF              reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DO              reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SEMICOLON       reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    ELSE            reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RBRACKET        reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COMMA           reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RPAREN          reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOBLEDOT        reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    TO              reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOWNTO          reduce using rule 226 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)


state 291

    (249) variable -> variable DOT ID .
    (254) function_call -> variable DOT ID . LPAREN expression_list RPAREN
    (255) function_call -> variable DOT ID . LPAREN RPAREN

    DOT             reduce using rule 249 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 249 (variable -> variable DOT ID .)
    CARET           reduce using rule 249 (variable -> variable DOT ID .)
    TIMES           reduce using rule 249 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 249 (variable -> variable DOT ID .)
    DIV             reduce using rule 249 (variable -> variable DOT ID .)
    MOD             reduce using rule 249 (variable -> variable DOT ID .)
    SHL             reduce using rule 249 (variable -> variable DOT ID .)
    SHR             reduce using rule 249 (variable -> variable DOT ID .)
    PLUS            reduce using rule 249 (variable -> variable DOT ID .)
    MINUS           reduce using rule 249 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 249 (variable -> variable DOT ID .)
    DISTINT         reduce using rule 249 (variable -> variable DOT ID .)
    LESS            reduce using rule 249 (variable -> variable DOT ID .)
    LESSEQUAL       reduce using rule 249 (variable -> variable DOT ID .)
    GREATER         reduce using rule 249 (variable -> variable DOT ID .)
    GREATEREQUAL    reduce using rule 249 (variable -> variable DOT ID .)
    IN              reduce using rule 249 (variable -> variable DOT ID .)
    AND             reduce using rule 249 (variable -> variable DOT ID .)
    THEN            reduce using rule 249 (variable -> variable DOT ID .)
    OR              reduce using rule 249 (variable -> variable DOT ID .)
    XOR             reduce using rule 249 (variable -> variable DOT ID .)
    OF              reduce using rule 249 (variable -> variable DOT ID .)
    DO              reduce using rule 249 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 249 (variable -> variable DOT ID .)
    ELSE            reduce using rule 249 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 249 (variable -> variable DOT ID .)
    COMMA           reduce using rule 249 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 249 (variable -> variable DOT ID .)
    DOBLEDOT        reduce using rule 249 (variable -> variable DOT ID .)
    TO              reduce using rule 249 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 249 (variable -> variable DOT ID .)
    LPAREN          shift and go to state 353


state 292

    (239) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DOBLEDOT        reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 239 (primary_expression -> LPAREN expression RPAREN .)


state 293

    (252) function_call -> ID LPAREN expression_list . RPAREN
    (257) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 354
    COMMA           shift and go to state 275


state 294

    (253) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    SHL             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    SHR             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DISTINT         reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    OF              reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 253 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 253 (function_call -> ID LPAREN RPAREN .)


state 295

    (246) set_constructor -> LBRACKET set_item_list RBRACKET .

    TIMES           reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIVIDE          reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIV             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MOD             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHL             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHR             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    PLUS            reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MINUS           reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    EQUAL           reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DISTINT         reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESS            reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESSEQUAL       reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATER         reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATEREQUAL    reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    IN              reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    AND             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    THEN            reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OR              reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    XOR             reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OF              reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DO              reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SEMICOLON       reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    ELSE            reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RBRACKET        reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COMMA           reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RPAREN          reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOBLEDOT        reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    TO              reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOWNTO          reduce using rule 246 (set_constructor -> LBRACKET set_item_list RBRACKET .)


state 296

    (245) set_item_list -> set_item_list COMMA . set_item
    (242) set_item -> . expression
    (243) set_item -> . expression DOBLEDOT expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    set_item                       shift and go to state 355
    expression                     shift and go to state 199
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 297

    (243) set_item -> expression DOBLEDOT . expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 356
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 298

    (185) case_statement -> CASE expression OF case_list . END
    (186) case_statement -> CASE expression OF case_list . ELSE sentences_list SEMICOLON END
    (187) case_statement -> CASE expression OF case_list . ELSE sentences_list END
    (188) case_list -> case_list . case_label COLON sentence SEMICOLON
    (191) case_label -> . constant
    (192) case_label -> . constant DOBLEDOT constant
    (193) case_label -> . case_label COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             shift and go to state 357
    ELSE            shift and go to state 358
    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    case_label                     shift and go to state 359
    constant                       shift and go to state 301

state 299

    (189) case_list -> case_label . COLON sentence SEMICOLON
    (193) case_label -> case_label . COMMA constant

    COLON           shift and go to state 360
    COMMA           shift and go to state 361


state 300

    (190) case_list -> empty .

    END             reduce using rule 190 (case_list -> empty .)
    ELSE            reduce using rule 190 (case_list -> empty .)
    NUMBER          reduce using rule 190 (case_list -> empty .)
    STRING          reduce using rule 190 (case_list -> empty .)
    TRUE            reduce using rule 190 (case_list -> empty .)
    FALSE           reduce using rule 190 (case_list -> empty .)
    NIL             reduce using rule 190 (case_list -> empty .)
    ORDINAL_CONSTANT reduce using rule 190 (case_list -> empty .)


state 301

    (191) case_label -> constant .
    (192) case_label -> constant . DOBLEDOT constant

    COLON           reduce using rule 191 (case_label -> constant .)
    COMMA           reduce using rule 191 (case_label -> constant .)
    DOBLEDOT        shift and go to state 362


state 302

    (194) for_statement -> FOR ID ASIGNATION expression . TO expression DO sentence
    (195) for_statement -> FOR ID ASIGNATION expression . DOWNTO expression DO sentence
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    TO              shift and go to state 363
    DOWNTO          shift and go to state 364
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 303

    (196) while_statement -> WHILE expression DO sentence .

    SEMICOLON       reduce using rule 196 (while_statement -> WHILE expression DO sentence .)
    ELSE            reduce using rule 196 (while_statement -> WHILE expression DO sentence .)


state 304

    (197) repeat_statement -> REPEAT sentences_list UNTIL expression .
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 197 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    ELSE            reduce using rule 197 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 305

    (198) with_statement -> WITH variable_list DO sentence .

    SEMICOLON       reduce using rule 198 (with_statement -> WITH variable_list DO sentence .)
    ELSE            reduce using rule 198 (with_statement -> WITH variable_list DO sentence .)


state 306

    (200) variable_list -> variable_list COMMA variable .
    (249) variable -> variable . DOT ID
    (250) variable -> variable . LBRACKET expression_list RBRACKET
    (251) variable -> variable . CARET

    DO              reduce using rule 200 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 200 (variable_list -> variable_list COMMA variable .)
    DOT             shift and go to state 206
    LBRACKET        shift and go to state 99
    CARET           shift and go to state 100


state 307

    (249) variable -> variable DOT ID .

    DOT             reduce using rule 249 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 249 (variable -> variable DOT ID .)
    CARET           reduce using rule 249 (variable -> variable DOT ID .)
    DO              reduce using rule 249 (variable -> variable DOT ID .)
    COMMA           reduce using rule 249 (variable -> variable DOT ID .)


state 308

    (30) const_declaration -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)


state 309

    (31) const_declaration -> ID COLON data_type_list EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    constant                       shift and go to state 365

state 310

    (147) data_type_list -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 366


state 311

    (149) data_type_list -> ABSOLUTE ID .

    EQUAL           reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    SEMICOLON       reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    ABSOLUTE        reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    RPAREN          reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    END             reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    CASE            reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    ID              reduce using rule 149 (data_type_list -> ABSOLUTE ID .)
    OF              reduce using rule 149 (data_type_list -> ABSOLUTE ID .)


state 312

    (46) type_definition -> ID DOBLEDOT . ID

    ID              shift and go to state 367


state 313

    (41) type_declaration -> ID EQUAL type_definition SEMICOLON .

    ID              reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    BEGIN           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    LABEL           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONST           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    TYPE            reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    VAR             reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    FUNCTION        reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    INTERFACE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)


state 314

    (43) type_definition -> LPAREN id_list . RPAREN
    (7) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 368
    COMMA           shift and go to state 44


state 315

    (44) type_definition -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 369


state 316

    (45) type_definition -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 370


state 317

    (147) data_type_list -> STRING LBRACKET . NUMBER RBRACKET
    (55) string_type -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 371


state 318

    (73) file_type -> FILE OF . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 372

state 319

    (56) record_type -> RECORD record_list . END
    (96) record_list -> record_list . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 373
    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_declaration             shift and go to state 374
    id_list                        shift and go to state 321

state 320

    (97) record_list -> record_declaration .

    END             reduce using rule 97 (record_list -> record_declaration .)
    CASE            reduce using rule 97 (record_list -> record_declaration .)
    ID              reduce using rule 97 (record_list -> record_declaration .)
    RPAREN          reduce using rule 97 (record_list -> record_declaration .)


state 321

    (98) record_declaration -> id_list . COLON data_type_list SEMICOLON
    (100) record_declaration -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 375
    COMMA           shift and go to state 44


state 322

    (99) record_declaration -> CASE . ID COLON data_type_list OF variant_list

    ID              shift and go to state 376


state 323

    (57) record_type -> PACKED RECORD . record_list END
    (96) record_list -> . record_list record_declaration
    (97) record_list -> . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_list                    shift and go to state 377
    record_declaration             shift and go to state 320
    id_list                        shift and go to state 321

state 324

    (59) array_type -> PACKED ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 378


state 325

    (58) array_type -> ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (60) type_range_list -> . type_range
    (61) type_range_list -> . type_range_list COMMA type_range
    (62) type_range -> . NUMBER DOBLEDOT NUMBER
    (63) type_range -> . CHAR DOBLEDOT CHAR
    (64) type_range -> . ID DOBLEDOT ID
    (65) type_range -> . ID

    NUMBER          shift and go to state 381
    CHAR            shift and go to state 382
    ID              shift and go to state 383

    type_range_list                shift and go to state 379
    type_range                     shift and go to state 380

state 326

    (66) set_type -> SET OF . set_range
    (67) set_range -> . data_type_set
    (68) set_range -> . NUMBER DOBLEDOT NUMBER
    (69) set_range -> . CHAR DOBLEDOT CHAR
    (70) set_range -> . ID
    (151) data_type_set -> . BYTE
    (152) data_type_set -> . SHORTINT
    (153) data_type_set -> . WORD
    (154) data_type_set -> . BOOLEAN
    (155) data_type_set -> . CHAR
    (156) data_type_set -> . ID

    NUMBER          shift and go to state 386
    CHAR            shift and go to state 387
    ID              shift and go to state 388
    BYTE            shift and go to state 389
    SHORTINT        shift and go to state 390
    WORD            shift and go to state 391
    BOOLEAN         shift and go to state 392

    set_range                      shift and go to state 384
    data_type_set                  shift and go to state 385

state 327

    (71) pointer_type -> CARET ID .
    (148) data_type_list -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 71 (pointer_type -> CARET ID .)
    SEMICOLON       reduce using rule 71 (pointer_type -> CARET ID .)

  ! SEMICOLON       [ reduce using rule 148 (data_type_list -> ID .) ]


state 328

    (72) pointer_type -> CARET data_type_list .

    SEMICOLON       reduce using rule 72 (pointer_type -> CARET data_type_list .)


state 329

    (75) object_type -> OBJECT object_heritage . object_fields object_methods END
    (78) object_fields -> . object_fields var_declaration
    (79) object_fields -> . empty
    (203) empty -> .

    ID              reduce using rule 203 (empty -> .)
    END             reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)

    object_fields                  shift and go to state 393
    empty                          shift and go to state 394

state 330

    (76) object_heritage -> LPAREN . ID RPAREN

    ID              shift and go to state 395


state 331

    (77) object_heritage -> empty .

    ID              reduce using rule 77 (object_heritage -> empty .)
    END             reduce using rule 77 (object_heritage -> empty .)
    PROCEDURE       reduce using rule 77 (object_heritage -> empty .)
    FUNCTION        reduce using rule 77 (object_heritage -> empty .)
    CONSTRUCTOR     reduce using rule 77 (object_heritage -> empty .)
    DESTRUCTOR      reduce using rule 77 (object_heritage -> empty .)


state 332

    (110) var_declaration -> id_list COLON data_type_list SEMICOLON .

    ID              reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    BEGIN           reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    LABEL           reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    CONST           reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    TYPE            reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    VAR             reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    PROCEDURE       reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    FUNCTION        reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    INTERFACE       reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)
    END             reduce using rule 110 (var_declaration -> id_list COLON data_type_list SEMICOLON .)


state 333

    (111) var_declaration -> id_list COLON data_type_list EQUAL . expression SEMICOLON
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 396
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 334

    (112) var_declaration -> id_list COLON data_type_list ABSOLUTE . ID SEMICOLON

    ID              shift and go to state 397


state 335

    (114) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 114 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 336

    (123) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 123 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 337

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 398


state 338

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 399


state 339

    (90) method_implementation -> PROCEDURE ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 400


state 340

    (125) parameters -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 125 (parameters -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 125 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 125 (parameters -> LPAREN parameter_list RPAREN .)


state 341

    (127) parameter_list -> parameter_list SEMICOLON . parameter_group
    (129) parameter_group -> . id_list COLON data_type_list
    (130) parameter_group -> . VAR id_list COLON data_type_list
    (131) parameter_group -> . CONST id_list COLON data_type_list
    (132) parameter_group -> . procedure_header
    (133) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 265
    CONST           shift and go to state 266
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 269
    FUNCTION        shift and go to state 270

    parameter_group                shift and go to state 401
    id_list                        shift and go to state 264
    procedure_header               shift and go to state 267
    function_header                shift and go to state 268

state 342

    (129) parameter_group -> id_list COLON . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 402

state 343

    (130) parameter_group -> VAR id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 403
    COMMA           shift and go to state 44


state 344

    (131) parameter_group -> CONST id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 404
    COMMA           shift and go to state 44


state 345

    (115) procedure_header -> PROCEDURE ID . parameters
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    RPAREN          reduce using rule 203 (empty -> .)
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 155
    empty                          shift and go to state 157

state 346

    (124) function_header -> FUNCTION ID . parameters COLON data_type_list
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    COLON           reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 159
    empty                          shift and go to state 157

state 347

    (91) method_implementation -> FUNCTION ID DOT ID parameters . COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    COLON           shift and go to state 405


state 348

    (124) function_header -> FUNCTION ID parameters COLON data_type_list .

    SEMICOLON       reduce using rule 124 (function_header -> FUNCTION ID parameters COLON data_type_list .)
    RPAREN          reduce using rule 124 (function_header -> FUNCTION ID parameters COLON data_type_list .)


state 349

    (179) procedure_call -> variable DOT ID LPAREN expression_list . RPAREN
    (257) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 406
    COMMA           shift and go to state 275


state 350

    (180) procedure_call -> variable DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 180 (procedure_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 180 (procedure_call -> variable DOT ID LPAREN RPAREN .)


state 351

    (257) expression_list -> expression_list COMMA expression .
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 257 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 257 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 257 (expression_list -> expression_list COMMA expression .)
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 352

    (184) if_statement -> IF expression THEN sentence ELSE . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 407
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 353

    (254) function_call -> variable DOT ID LPAREN . expression_list RPAREN
    (255) function_call -> variable DOT ID LPAREN . RPAREN
    (256) expression_list -> . expression
    (257) expression_list -> . expression_list COMMA expression
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 409
    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    variable                       shift and go to state 114
    expression_list                shift and go to state 408
    expression                     shift and go to state 164
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 354

    (252) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 252 (function_call -> ID LPAREN expression_list RPAREN .)


state 355

    (245) set_item_list -> set_item_list COMMA set_item .

    RBRACKET        reduce using rule 245 (set_item_list -> set_item_list COMMA set_item .)
    COMMA           reduce using rule 245 (set_item_list -> set_item_list COMMA set_item .)


state 356

    (243) set_item -> expression DOBLEDOT expression .
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 243 (set_item -> expression DOBLEDOT expression .)
    COMMA           reduce using rule 243 (set_item -> expression DOBLEDOT expression .)
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 357

    (185) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 185 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 185 (case_statement -> CASE expression OF case_list END .)


state 358

    (186) case_statement -> CASE expression OF case_list ELSE . sentences_list SEMICOLON END
    (187) case_statement -> CASE expression OF case_list ELSE . sentences_list END
    (158) sentences_list -> . sentences_list sentence SEMICOLON
    (159) sentences_list -> . sentence SEMICOLON
    (160) sentences_list -> . empty
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (203) empty -> .
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
    SEMICOLON       reduce using rule 203 (empty -> .)
    END             reduce using rule 203 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72

  ! ID              [ reduce using rule 203 (empty -> .) ]
  ! NEW             [ reduce using rule 203 (empty -> .) ]
  ! BEGIN           [ reduce using rule 203 (empty -> .) ]
  ! IF              [ reduce using rule 203 (empty -> .) ]
  ! CASE            [ reduce using rule 203 (empty -> .) ]
  ! FOR             [ reduce using rule 203 (empty -> .) ]
  ! WHILE           [ reduce using rule 203 (empty -> .) ]
  ! REPEAT          [ reduce using rule 203 (empty -> .) ]
  ! WITH            [ reduce using rule 203 (empty -> .) ]
  ! GOTO            [ reduce using rule 203 (empty -> .) ]
  ! NUMBER          [ reduce using rule 203 (empty -> .) ]
  ! ASM             [ reduce using rule 203 (empty -> .) ]

    sentences_list                 shift and go to state 410
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 359

    (188) case_list -> case_list case_label . COLON sentence SEMICOLON
    (193) case_label -> case_label . COMMA constant

    COLON           shift and go to state 411
    COMMA           shift and go to state 361


state 360

    (189) case_list -> case_label COLON . sentence SEMICOLON
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 412
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 361

    (193) case_label -> case_label COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    constant                       shift and go to state 413

state 362

    (192) case_label -> constant DOBLEDOT . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    constant                       shift and go to state 414

state 363

    (194) for_statement -> FOR ID ASIGNATION expression TO . expression DO sentence
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 415
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 364

    (195) for_statement -> FOR ID ASIGNATION expression DOWNTO . expression DO sentence
    (204) expression -> . expression OR simple_expression
    (205) expression -> . expression XOR simple_expression
    (206) expression -> . simple_expression
    (207) simple_expression -> . simple_expression AND relational_expression
    (208) simple_expression -> . relational_expression
    (209) relational_expression -> . relational_expression relational_operator additive_expression
    (210) relational_expression -> . additive_expression
    (218) additive_expression -> . additive_expression PLUS multiplicative_expression
    (219) additive_expression -> . additive_expression MINUS multiplicative_expression
    (220) additive_expression -> . multiplicative_expression
    (221) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (222) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (223) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (224) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (225) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (226) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (227) multiplicative_expression -> . unary_expression
    (228) unary_expression -> . NOT unary_expression
    (229) unary_expression -> . MINUS unary_expression
    (230) unary_expression -> . PLUS unary_expression
    (231) unary_expression -> . ADDRESS_OF unary_expression
    (232) unary_expression -> . primary_expression
    (233) primary_expression -> . variable
    (234) primary_expression -> . NUMBER
    (235) primary_expression -> . STRING
    (236) primary_expression -> . TRUE
    (237) primary_expression -> . FALSE
    (238) primary_expression -> . NIL
    (239) primary_expression -> . LPAREN expression RPAREN
    (240) primary_expression -> . function_call
    (241) primary_expression -> . set_constructor
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET
    (252) function_call -> . ID LPAREN expression_list RPAREN
    (253) function_call -> . ID LPAREN RPAREN
    (254) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (255) function_call -> . variable DOT ID LPAREN RPAREN
    (246) set_constructor -> . LBRACKET set_item_list RBRACKET
    (247) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 111
    MINUS           shift and go to state 109
    PLUS            shift and go to state 107
    ADDRESS_OF      shift and go to state 112
    NUMBER          shift and go to state 115
    STRING          shift and go to state 116
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118
    NIL             shift and go to state 119
    LPAREN          shift and go to state 120
    ID              shift and go to state 123
    LBRACKET        shift and go to state 124

    expression                     shift and go to state 416
    simple_expression              shift and go to state 104
    relational_expression          shift and go to state 105
    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 110
    primary_expression             shift and go to state 113
    variable                       shift and go to state 114
    function_call                  shift and go to state 121
    set_constructor                shift and go to state 122

state 365

    (31) const_declaration -> ID COLON data_type_list EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 417


state 366

    (147) data_type_list -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 418


state 367

    (46) type_definition -> ID DOBLEDOT ID .

    SEMICOLON       reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)


state 368

    (43) type_definition -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)


state 369

    (44) type_definition -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)


state 370

    (45) type_definition -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)


state 371

    (147) data_type_list -> STRING LBRACKET NUMBER . RBRACKET
    (55) string_type -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 419


state 372

    (73) file_type -> FILE OF data_type_list .

    SEMICOLON       reduce using rule 73 (file_type -> FILE OF data_type_list .)


state 373

    (56) record_type -> RECORD record_list END .

    SEMICOLON       reduce using rule 56 (record_type -> RECORD record_list END .)


state 374

    (96) record_list -> record_list record_declaration .

    END             reduce using rule 96 (record_list -> record_list record_declaration .)
    CASE            reduce using rule 96 (record_list -> record_list record_declaration .)
    ID              reduce using rule 96 (record_list -> record_list record_declaration .)
    RPAREN          reduce using rule 96 (record_list -> record_list record_declaration .)


state 375

    (98) record_declaration -> id_list COLON . data_type_list SEMICOLON
    (100) record_declaration -> id_list COLON . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 420

state 376

    (99) record_declaration -> CASE ID . COLON data_type_list OF variant_list

    COLON           shift and go to state 421


state 377

    (57) record_type -> PACKED RECORD record_list . END
    (96) record_list -> record_list . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 422
    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_declaration             shift and go to state 374
    id_list                        shift and go to state 321

state 378

    (59) array_type -> PACKED ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (60) type_range_list -> . type_range
    (61) type_range_list -> . type_range_list COMMA type_range
    (62) type_range -> . NUMBER DOBLEDOT NUMBER
    (63) type_range -> . CHAR DOBLEDOT CHAR
    (64) type_range -> . ID DOBLEDOT ID
    (65) type_range -> . ID

    NUMBER          shift and go to state 381
    CHAR            shift and go to state 382
    ID              shift and go to state 383

    type_range_list                shift and go to state 423
    type_range                     shift and go to state 380

state 379

    (58) array_type -> ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (61) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 424
    COMMA           shift and go to state 425


state 380

    (60) type_range_list -> type_range .

    RBRACKET        reduce using rule 60 (type_range_list -> type_range .)
    COMMA           reduce using rule 60 (type_range_list -> type_range .)


state 381

    (62) type_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 426


state 382

    (63) type_range -> CHAR . DOBLEDOT CHAR

    DOBLEDOT        shift and go to state 427


state 383

    (64) type_range -> ID . DOBLEDOT ID
    (65) type_range -> ID .

    DOBLEDOT        shift and go to state 428
    RBRACKET        reduce using rule 65 (type_range -> ID .)
    COMMA           reduce using rule 65 (type_range -> ID .)


state 384

    (66) set_type -> SET OF set_range .

    SEMICOLON       reduce using rule 66 (set_type -> SET OF set_range .)


state 385

    (67) set_range -> data_type_set .

    SEMICOLON       reduce using rule 67 (set_range -> data_type_set .)


state 386

    (68) set_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 429


state 387

    (69) set_range -> CHAR . DOBLEDOT CHAR
    (155) data_type_set -> CHAR .

    DOBLEDOT        shift and go to state 430
    SEMICOLON       reduce using rule 155 (data_type_set -> CHAR .)


state 388

    (70) set_range -> ID .
    (156) data_type_set -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (set_range -> ID .)
    SEMICOLON       reduce using rule 70 (set_range -> ID .)

  ! SEMICOLON       [ reduce using rule 156 (data_type_set -> ID .) ]


state 389

    (151) data_type_set -> BYTE .

    SEMICOLON       reduce using rule 151 (data_type_set -> BYTE .)


state 390

    (152) data_type_set -> SHORTINT .

    SEMICOLON       reduce using rule 152 (data_type_set -> SHORTINT .)


state 391

    (153) data_type_set -> WORD .

    SEMICOLON       reduce using rule 153 (data_type_set -> WORD .)


state 392

    (154) data_type_set -> BOOLEAN .

    SEMICOLON       reduce using rule 154 (data_type_set -> BOOLEAN .)


state 393

    (75) object_type -> OBJECT object_heritage object_fields . object_methods END
    (78) object_fields -> object_fields . var_declaration
    (80) object_methods -> . object_methods method_declaration
    (81) object_methods -> . empty
    (110) var_declaration -> . id_list COLON data_type_list SEMICOLON
    (111) var_declaration -> . id_list COLON data_type_list EQUAL expression SEMICOLON
    (112) var_declaration -> . id_list COLON data_type_list ABSOLUTE ID SEMICOLON
    (203) empty -> .
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    ID              shift and go to state 13

    object_methods                 shift and go to state 431
    var_declaration                shift and go to state 432
    empty                          shift and go to state 433
    id_list                        shift and go to state 83

state 394

    (79) object_fields -> empty .

    ID              reduce using rule 79 (object_fields -> empty .)
    END             reduce using rule 79 (object_fields -> empty .)
    PROCEDURE       reduce using rule 79 (object_fields -> empty .)
    FUNCTION        reduce using rule 79 (object_fields -> empty .)
    CONSTRUCTOR     reduce using rule 79 (object_fields -> empty .)
    DESTRUCTOR      reduce using rule 79 (object_fields -> empty .)


state 395

    (76) object_heritage -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 434


state 396

    (111) var_declaration -> id_list COLON data_type_list EQUAL expression . SEMICOLON
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    SEMICOLON       shift and go to state 435
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 397

    (112) var_declaration -> id_list COLON data_type_list ABSOLUTE ID . SEMICOLON

    SEMICOLON       shift and go to state 436


state 398

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 437
    empty                          shift and go to state 11

state 399

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 438
    empty                          shift and go to state 11

state 400

    (90) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 439
    empty                          shift and go to state 11

state 401

    (127) parameter_list -> parameter_list SEMICOLON parameter_group .

    RPAREN          reduce using rule 127 (parameter_list -> parameter_list SEMICOLON parameter_group .)
    SEMICOLON       reduce using rule 127 (parameter_list -> parameter_list SEMICOLON parameter_group .)


state 402

    (129) parameter_group -> id_list COLON data_type_list .

    RPAREN          reduce using rule 129 (parameter_group -> id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 129 (parameter_group -> id_list COLON data_type_list .)


state 403

    (130) parameter_group -> VAR id_list COLON . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 440

state 404

    (131) parameter_group -> CONST id_list COLON . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 441

state 405

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON . data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 442

state 406

    (179) procedure_call -> variable DOT ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 179 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 179 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 407

    (184) if_statement -> IF expression THEN sentence ELSE sentence .

    SEMICOLON       reduce using rule 184 (if_statement -> IF expression THEN sentence ELSE sentence .)
    ELSE            reduce using rule 184 (if_statement -> IF expression THEN sentence ELSE sentence .)


state 408

    (254) function_call -> variable DOT ID LPAREN expression_list . RPAREN
    (257) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 443
    COMMA           shift and go to state 275


state 409

    (255) function_call -> variable DOT ID LPAREN RPAREN .

    TIMES           reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIV             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    MOD             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHL             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHR             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    PLUS            reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    MINUS           reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    EQUAL           reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DISTINT         reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESS            reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATER         reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    IN              reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    AND             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    THEN            reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    OR              reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    XOR             reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    OF              reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DO              reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    COMMA           reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    TO              reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 255 (function_call -> variable DOT ID LPAREN RPAREN .)


state 410

    (186) case_statement -> CASE expression OF case_list ELSE sentences_list . SEMICOLON END
    (187) case_statement -> CASE expression OF case_list ELSE sentences_list . END
    (158) sentences_list -> sentences_list . sentence SEMICOLON
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 444
    END             shift and go to state 445
    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72

  ! SEMICOLON       [ reduce using rule 203 (empty -> .) ]

    sentence                       shift and go to state 94
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 411

    (188) case_list -> case_list case_label COLON . sentence SEMICOLON
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 446
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 412

    (189) case_list -> case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 447


state 413

    (193) case_label -> case_label COMMA constant .

    COLON           reduce using rule 193 (case_label -> case_label COMMA constant .)
    COMMA           reduce using rule 193 (case_label -> case_label COMMA constant .)


state 414

    (192) case_label -> constant DOBLEDOT constant .

    COLON           reduce using rule 192 (case_label -> constant DOBLEDOT constant .)
    COMMA           reduce using rule 192 (case_label -> constant DOBLEDOT constant .)


state 415

    (194) for_statement -> FOR ID ASIGNATION expression TO expression . DO sentence
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    DO              shift and go to state 448
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 416

    (195) for_statement -> FOR ID ASIGNATION expression DOWNTO expression . DO sentence
    (204) expression -> expression . OR simple_expression
    (205) expression -> expression . XOR simple_expression

    DO              shift and go to state 449
    OR              shift and go to state 170
    XOR             shift and go to state 171


state 417

    (31) const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .

    ID              reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONST           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    VAR             reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)


state 418

    (147) data_type_list -> STRING LBRACKET NUMBER RBRACKET .

    EQUAL           reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    ABSOLUTE        reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .)


state 419

    (147) data_type_list -> STRING LBRACKET NUMBER RBRACKET .
    (55) string_type -> STRING LBRACKET NUMBER RBRACKET .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)

  ! SEMICOLON       [ reduce using rule 147 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]


state 420

    (98) record_declaration -> id_list COLON data_type_list . SEMICOLON
    (100) record_declaration -> id_list COLON data_type_list .

    SEMICOLON       shift and go to state 450
    END             reduce using rule 100 (record_declaration -> id_list COLON data_type_list .)
    CASE            reduce using rule 100 (record_declaration -> id_list COLON data_type_list .)
    ID              reduce using rule 100 (record_declaration -> id_list COLON data_type_list .)
    RPAREN          reduce using rule 100 (record_declaration -> id_list COLON data_type_list .)


state 421

    (99) record_declaration -> CASE ID COLON . data_type_list OF variant_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 451

state 422

    (57) record_type -> PACKED RECORD record_list END .

    SEMICOLON       reduce using rule 57 (record_type -> PACKED RECORD record_list END .)


state 423

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (61) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 452
    COMMA           shift and go to state 425


state 424

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 453


state 425

    (61) type_range_list -> type_range_list COMMA . type_range
    (62) type_range -> . NUMBER DOBLEDOT NUMBER
    (63) type_range -> . CHAR DOBLEDOT CHAR
    (64) type_range -> . ID DOBLEDOT ID
    (65) type_range -> . ID

    NUMBER          shift and go to state 381
    CHAR            shift and go to state 382
    ID              shift and go to state 383

    type_range                     shift and go to state 454

state 426

    (62) type_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 455


state 427

    (63) type_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 456


state 428

    (64) type_range -> ID DOBLEDOT . ID

    ID              shift and go to state 457


state 429

    (68) set_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 458


state 430

    (69) set_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 459


state 431

    (75) object_type -> OBJECT object_heritage object_fields object_methods . END
    (80) object_methods -> object_methods . method_declaration
    (82) method_declaration -> . procedure_header SEMICOLON
    (83) method_declaration -> . function_header SEMICOLON
    (84) method_declaration -> . constructor_declaration
    (85) method_declaration -> . destructor_declaration
    (86) method_declaration -> . procedure_header SEMICOLON directive
    (87) method_declaration -> . function_header SEMICOLON directive
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list
    (92) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON
    (93) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON directive
    (94) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON
    (95) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON directive

    END             shift and go to state 460
    PROCEDURE       shift and go to state 269
    FUNCTION        shift and go to state 270
    CONSTRUCTOR     shift and go to state 466
    DESTRUCTOR      shift and go to state 467

    method_declaration             shift and go to state 461
    procedure_header               shift and go to state 462
    function_header                shift and go to state 463
    constructor_declaration        shift and go to state 464
    destructor_declaration         shift and go to state 465

state 432

    (78) object_fields -> object_fields var_declaration .

    ID              reduce using rule 78 (object_fields -> object_fields var_declaration .)
    END             reduce using rule 78 (object_fields -> object_fields var_declaration .)
    PROCEDURE       reduce using rule 78 (object_fields -> object_fields var_declaration .)
    FUNCTION        reduce using rule 78 (object_fields -> object_fields var_declaration .)
    CONSTRUCTOR     reduce using rule 78 (object_fields -> object_fields var_declaration .)
    DESTRUCTOR      reduce using rule 78 (object_fields -> object_fields var_declaration .)


state 433

    (81) object_methods -> empty .

    END             reduce using rule 81 (object_methods -> empty .)
    PROCEDURE       reduce using rule 81 (object_methods -> empty .)
    FUNCTION        reduce using rule 81 (object_methods -> empty .)
    CONSTRUCTOR     reduce using rule 81 (object_methods -> empty .)
    DESTRUCTOR      reduce using rule 81 (object_methods -> empty .)


state 434

    (76) object_heritage -> LPAREN ID RPAREN .

    ID              reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)
    END             reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)
    PROCEDURE       reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)
    FUNCTION        reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)
    CONSTRUCTOR     reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)
    DESTRUCTOR      reduce using rule 76 (object_heritage -> LPAREN ID RPAREN .)


state 435

    (111) var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .

    ID              reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    LABEL           reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    CONST           reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    TYPE            reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    VAR             reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    PROCEDURE       reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    IMPLEMENTATION  reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)
    END             reduce using rule 111 (var_declaration -> id_list COLON data_type_list EQUAL expression SEMICOLON .)


state 436

    (112) var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .

    ID              reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    BEGIN           reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    LABEL           reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    CONST           reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    TYPE            reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    VAR             reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    PROCEDURE       reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    FUNCTION        reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    INTERFACE       reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)
    END             reduce using rule 112 (var_declaration -> id_list COLON data_type_list ABSOLUTE ID SEMICOLON .)


state 437

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 468
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 438

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 469
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 439

    (90) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 470
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 440

    (130) parameter_group -> VAR id_list COLON data_type_list .

    RPAREN          reduce using rule 130 (parameter_group -> VAR id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 130 (parameter_group -> VAR id_list COLON data_type_list .)


state 441

    (131) parameter_group -> CONST id_list COLON data_type_list .

    RPAREN          reduce using rule 131 (parameter_group -> CONST id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 131 (parameter_group -> CONST id_list COLON data_type_list .)


state 442

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 471


state 443

    (254) function_call -> variable DOT ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 254 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 444

    (186) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON . END

    END             shift and go to state 472


state 445

    (187) case_statement -> CASE expression OF case_list ELSE sentences_list END .

    SEMICOLON       reduce using rule 187 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)
    ELSE            reduce using rule 187 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)


state 446

    (188) case_list -> case_list case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 473


state 447

    (189) case_list -> case_label COLON sentence SEMICOLON .

    END             reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 189 (case_list -> case_label COLON sentence SEMICOLON .)


state 448

    (194) for_statement -> FOR ID ASIGNATION expression TO expression DO . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 474
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 449

    (195) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO . sentence
    (161) sentence -> . assignment
    (162) sentence -> . procedure_call
    (163) sentence -> . compound_statement
    (164) sentence -> . if_statement
    (165) sentence -> . case_statement
    (166) sentence -> . for_statement
    (167) sentence -> . while_statement
    (168) sentence -> . repeat_statement
    (169) sentence -> . with_statement
    (170) sentence -> . goto_statement
    (171) sentence -> . labeled_sentence
    (172) sentence -> . asm_statement
    (173) sentence -> . empty
    (175) assignment -> . variable ASIGNATION expression
    (176) procedure_call -> . ID
    (177) procedure_call -> . ID LPAREN expression_list RPAREN
    (178) procedure_call -> . ID LPAREN RPAREN
    (179) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (180) procedure_call -> . variable DOT ID LPAREN RPAREN
    (181) procedure_call -> . NEW LPAREN expression_list RPAREN
    (182) procedure_call -> . NEW LPAREN RPAREN
    (157) compound_statement -> . BEGIN sentences_list END
    (183) if_statement -> . IF expression THEN sentence
    (184) if_statement -> . IF expression THEN sentence ELSE sentence
    (185) case_statement -> . CASE expression OF case_list END
    (186) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (187) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (194) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (195) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (196) while_statement -> . WHILE expression DO sentence
    (197) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (198) with_statement -> . WITH variable_list DO sentence
    (201) goto_statement -> . GOTO NUMBER
    (202) labeled_sentence -> . NUMBER COLON sentence
    (174) asm_statement -> . ASM
    (203) empty -> .
    (248) variable -> . ID
    (249) variable -> . variable DOT ID
    (250) variable -> . variable LBRACKET expression_list RBRACKET
    (251) variable -> . variable CARET

    ID              shift and go to state 62
    NEW             shift and go to state 63
    BEGIN           shift and go to state 30
    IF              shift and go to state 64
    CASE            shift and go to state 65
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    REPEAT          shift and go to state 68
    WITH            shift and go to state 69
    GOTO            shift and go to state 70
    NUMBER          shift and go to state 71
    ASM             shift and go to state 72
    SEMICOLON       reduce using rule 203 (empty -> .)
    ELSE            reduce using rule 203 (empty -> .)

    sentence                       shift and go to state 475
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 95
    variable                       shift and go to state 61

state 450

    (98) record_declaration -> id_list COLON data_type_list SEMICOLON .

    END             reduce using rule 98 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    CASE            reduce using rule 98 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    ID              reduce using rule 98 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    RPAREN          reduce using rule 98 (record_declaration -> id_list COLON data_type_list SEMICOLON .)


state 451

    (99) record_declaration -> CASE ID COLON data_type_list . OF variant_list

    OF              shift and go to state 476


state 452

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 477


state 453

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 478

state 454

    (61) type_range_list -> type_range_list COMMA type_range .

    RBRACKET        reduce using rule 61 (type_range_list -> type_range_list COMMA type_range .)
    COMMA           reduce using rule 61 (type_range_list -> type_range_list COMMA type_range .)


state 455

    (62) type_range -> NUMBER DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 62 (type_range -> NUMBER DOBLEDOT NUMBER .)
    COMMA           reduce using rule 62 (type_range -> NUMBER DOBLEDOT NUMBER .)


state 456

    (63) type_range -> CHAR DOBLEDOT CHAR .

    RBRACKET        reduce using rule 63 (type_range -> CHAR DOBLEDOT CHAR .)
    COMMA           reduce using rule 63 (type_range -> CHAR DOBLEDOT CHAR .)


state 457

    (64) type_range -> ID DOBLEDOT ID .

    RBRACKET        reduce using rule 64 (type_range -> ID DOBLEDOT ID .)
    COMMA           reduce using rule 64 (type_range -> ID DOBLEDOT ID .)


state 458

    (68) set_range -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 68 (set_range -> NUMBER DOBLEDOT NUMBER .)


state 459

    (69) set_range -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 69 (set_range -> CHAR DOBLEDOT CHAR .)


state 460

    (75) object_type -> OBJECT object_heritage object_fields object_methods END .

    SEMICOLON       reduce using rule 75 (object_type -> OBJECT object_heritage object_fields object_methods END .)


state 461

    (80) object_methods -> object_methods method_declaration .

    END             reduce using rule 80 (object_methods -> object_methods method_declaration .)
    PROCEDURE       reduce using rule 80 (object_methods -> object_methods method_declaration .)
    FUNCTION        reduce using rule 80 (object_methods -> object_methods method_declaration .)
    CONSTRUCTOR     reduce using rule 80 (object_methods -> object_methods method_declaration .)
    DESTRUCTOR      reduce using rule 80 (object_methods -> object_methods method_declaration .)


state 462

    (82) method_declaration -> procedure_header . SEMICOLON
    (86) method_declaration -> procedure_header . SEMICOLON directive

    SEMICOLON       shift and go to state 479


state 463

    (83) method_declaration -> function_header . SEMICOLON
    (87) method_declaration -> function_header . SEMICOLON directive

    SEMICOLON       shift and go to state 480


state 464

    (84) method_declaration -> constructor_declaration .

    END             reduce using rule 84 (method_declaration -> constructor_declaration .)
    PROCEDURE       reduce using rule 84 (method_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 84 (method_declaration -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 84 (method_declaration -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 84 (method_declaration -> constructor_declaration .)


state 465

    (85) method_declaration -> destructor_declaration .

    END             reduce using rule 85 (method_declaration -> destructor_declaration .)
    PROCEDURE       reduce using rule 85 (method_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 85 (method_declaration -> destructor_declaration .)
    CONSTRUCTOR     reduce using rule 85 (method_declaration -> destructor_declaration .)
    DESTRUCTOR      reduce using rule 85 (method_declaration -> destructor_declaration .)


state 466

    (92) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON
    (93) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 481


state 467

    (94) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON
    (95) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 482


state 468

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 483


state 469

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 484


state 470

    (90) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 485


state 471

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (203) empty -> .

    BEGIN           reduce using rule 203 (empty -> .)
    LABEL           reduce using rule 203 (empty -> .)
    CONST           reduce using rule 203 (empty -> .)
    TYPE            reduce using rule 203 (empty -> .)
    VAR             reduce using rule 203 (empty -> .)
    CONSTRUCTOR     reduce using rule 203 (empty -> .)
    DESTRUCTOR      reduce using rule 203 (empty -> .)
    PROCEDURE       reduce using rule 203 (empty -> .)
    FUNCTION        reduce using rule 203 (empty -> .)
    IMPLEMENTATION  reduce using rule 203 (empty -> .)
    INTERFACE       reduce using rule 203 (empty -> .)

    declaration_blocks             shift and go to state 486
    empty                          shift and go to state 11

state 472

    (186) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .

    SEMICOLON       reduce using rule 186 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)
    ELSE            reduce using rule 186 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)


state 473

    (188) case_list -> case_list case_label COLON sentence SEMICOLON .

    END             reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 188 (case_list -> case_list case_label COLON sentence SEMICOLON .)


state 474

    (194) for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .

    SEMICOLON       reduce using rule 194 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)
    ELSE            reduce using rule 194 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)


state 475

    (195) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .

    SEMICOLON       reduce using rule 195 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)
    ELSE            reduce using rule 195 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)


state 476

    (99) record_declaration -> CASE ID COLON data_type_list OF . variant_list
    (101) variant_list -> . variant_list variant
    (102) variant_list -> . variant
    (103) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (104) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (105) constant_list -> . constant
    (106) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    variant_list                   shift and go to state 487
    variant                        shift and go to state 488
    constant_list                  shift and go to state 489
    constant                       shift and go to state 490

state 477

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (134) data_type_list -> . INTEGER
    (135) data_type_list -> . BYTE
    (136) data_type_list -> . LONGINT
    (137) data_type_list -> . SHORTINT
    (138) data_type_list -> . WORD
    (139) data_type_list -> . REAL
    (140) data_type_list -> . SINGLE
    (141) data_type_list -> . DOUBLE
    (142) data_type_list -> . EXTENDED
    (143) data_type_list -> . SHORT
    (144) data_type_list -> . BOOLEAN
    (145) data_type_list -> . CHAR
    (146) data_type_list -> . STRING
    (147) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (148) data_type_list -> . ID
    (149) data_type_list -> . ABSOLUTE ID
    (150) data_type_list -> . FILE

    INTEGER         shift and go to state 218
    BYTE            shift and go to state 219
    LONGINT         shift and go to state 220
    SHORTINT        shift and go to state 221
    WORD            shift and go to state 222
    REAL            shift and go to state 223
    SINGLE          shift and go to state 224
    DOUBLE          shift and go to state 225
    EXTENDED        shift and go to state 226
    SHORT           shift and go to state 227
    BOOLEAN         shift and go to state 228
    CHAR            shift and go to state 229
    STRING          shift and go to state 230
    ID              shift and go to state 216
    ABSOLUTE        shift and go to state 231
    FILE            shift and go to state 232

    data_type_list                 shift and go to state 491

state 478

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    SEMICOLON       reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 479

    (82) method_declaration -> procedure_header SEMICOLON .
    (86) method_declaration -> procedure_header SEMICOLON . directive
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL

    END             reduce using rule 82 (method_declaration -> procedure_header SEMICOLON .)
    PROCEDURE       reduce using rule 82 (method_declaration -> procedure_header SEMICOLON .)
    FUNCTION        reduce using rule 82 (method_declaration -> procedure_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 82 (method_declaration -> procedure_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 82 (method_declaration -> procedure_header SEMICOLON .)
    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149

    directive                      shift and go to state 492

state 480

    (83) method_declaration -> function_header SEMICOLON .
    (87) method_declaration -> function_header SEMICOLON . directive
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL

    END             reduce using rule 83 (method_declaration -> function_header SEMICOLON .)
    PROCEDURE       reduce using rule 83 (method_declaration -> function_header SEMICOLON .)
    FUNCTION        reduce using rule 83 (method_declaration -> function_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 83 (method_declaration -> function_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 83 (method_declaration -> function_header SEMICOLON .)
    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149

    directive                      shift and go to state 493

state 481

    (92) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON
    (93) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON directive
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 494
    empty                          shift and go to state 157

state 482

    (94) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON
    (95) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON directive
    (125) parameters -> . LPAREN parameter_list RPAREN
    (126) parameters -> . empty
    (203) empty -> .

    LPAREN          shift and go to state 156
    SEMICOLON       reduce using rule 203 (empty -> .)

    parameters                     shift and go to state 495
    empty                          shift and go to state 157

state 483

    (88) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 88 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 484

    (89) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 89 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 485

    (90) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 90 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 486

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (157) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (107) var_declaration_block -> . VAR var_list
    (113) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (114) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (122) function_declaration -> . function_header SEMICOLON directive
    (123) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (88) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (89) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (90) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (115) procedure_header -> . PROCEDURE ID parameters
    (124) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 496
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 487

    (99) record_declaration -> CASE ID COLON data_type_list OF variant_list .
    (101) variant_list -> variant_list . variant
    (103) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (104) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (105) constant_list -> . constant
    (106) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             reduce using rule 99 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    CASE            reduce using rule 99 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    ID              reduce using rule 99 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    RPAREN          reduce using rule 99 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    variant                        shift and go to state 497
    constant_list                  shift and go to state 489
    constant                       shift and go to state 490

state 488

    (102) variant_list -> variant .

    NUMBER          reduce using rule 102 (variant_list -> variant .)
    STRING          reduce using rule 102 (variant_list -> variant .)
    TRUE            reduce using rule 102 (variant_list -> variant .)
    FALSE           reduce using rule 102 (variant_list -> variant .)
    NIL             reduce using rule 102 (variant_list -> variant .)
    ORDINAL_CONSTANT reduce using rule 102 (variant_list -> variant .)
    END             reduce using rule 102 (variant_list -> variant .)
    CASE            reduce using rule 102 (variant_list -> variant .)
    ID              reduce using rule 102 (variant_list -> variant .)
    RPAREN          reduce using rule 102 (variant_list -> variant .)


state 489

    (103) variant -> constant_list . COLON LPAREN record_list RPAREN SEMICOLON
    (104) variant -> constant_list . COLON LPAREN RPAREN SEMICOLON
    (106) constant_list -> constant_list . COMMA constant

    COLON           shift and go to state 498
    COMMA           shift and go to state 499


state 490

    (105) constant_list -> constant .

    COLON           reduce using rule 105 (constant_list -> constant .)
    COMMA           reduce using rule 105 (constant_list -> constant .)


state 491

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    SEMICOLON       reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 492

    (86) method_declaration -> procedure_header SEMICOLON directive .

    END             reduce using rule 86 (method_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 86 (method_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 86 (method_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 86 (method_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 86 (method_declaration -> procedure_header SEMICOLON directive .)


state 493

    (87) method_declaration -> function_header SEMICOLON directive .

    END             reduce using rule 87 (method_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 87 (method_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 87 (method_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 87 (method_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 87 (method_declaration -> function_header SEMICOLON directive .)


state 494

    (92) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON
    (93) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 500


state 495

    (94) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON
    (95) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 501


state 496

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 502


state 497

    (101) variant_list -> variant_list variant .

    NUMBER          reduce using rule 101 (variant_list -> variant_list variant .)
    STRING          reduce using rule 101 (variant_list -> variant_list variant .)
    TRUE            reduce using rule 101 (variant_list -> variant_list variant .)
    FALSE           reduce using rule 101 (variant_list -> variant_list variant .)
    NIL             reduce using rule 101 (variant_list -> variant_list variant .)
    ORDINAL_CONSTANT reduce using rule 101 (variant_list -> variant_list variant .)
    END             reduce using rule 101 (variant_list -> variant_list variant .)
    CASE            reduce using rule 101 (variant_list -> variant_list variant .)
    ID              reduce using rule 101 (variant_list -> variant_list variant .)
    RPAREN          reduce using rule 101 (variant_list -> variant_list variant .)


state 498

    (103) variant -> constant_list COLON . LPAREN record_list RPAREN SEMICOLON
    (104) variant -> constant_list COLON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 503


state 499

    (106) constant_list -> constant_list COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 210
    STRING          shift and go to state 211
    TRUE            shift and go to state 212
    FALSE           shift and go to state 213
    NIL             shift and go to state 214
    ORDINAL_CONSTANT shift and go to state 215

    constant                       shift and go to state 504

state 500

    (92) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .
    (93) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON . directive
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL

    END             reduce using rule 92 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 92 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 92 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 92 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 92 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149

    directive                      shift and go to state 505

state 501

    (94) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .
    (95) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON . directive
    (116) directive -> . FORWARD
    (117) directive -> . EXTERNAL
    (118) directive -> . EXTERNAL STRING
    (119) directive -> . ASM
    (120) directive -> . INLINE
    (121) directive -> . VIRTUAL

    END             reduce using rule 94 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 94 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 94 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 94 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 94 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 145
    EXTERNAL        shift and go to state 146
    ASM             shift and go to state 147
    INLINE          shift and go to state 148
    VIRTUAL         shift and go to state 149

    directive                      shift and go to state 506

state 502

    (91) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 91 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 503

    (103) variant -> constant_list COLON LPAREN . record_list RPAREN SEMICOLON
    (104) variant -> constant_list COLON LPAREN . RPAREN SEMICOLON
    (96) record_list -> . record_list record_declaration
    (97) record_list -> . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 508
    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_list                    shift and go to state 507
    record_declaration             shift and go to state 320
    id_list                        shift and go to state 321

state 504

    (106) constant_list -> constant_list COMMA constant .

    COLON           reduce using rule 106 (constant_list -> constant_list COMMA constant .)
    COMMA           reduce using rule 106 (constant_list -> constant_list COMMA constant .)


state 505

    (93) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 93 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 93 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 93 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 93 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 93 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)


state 506

    (95) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 95 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 95 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 95 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 95 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 95 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)


state 507

    (103) variant -> constant_list COLON LPAREN record_list . RPAREN SEMICOLON
    (96) record_list -> record_list . record_declaration
    (98) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (99) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (100) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 509
    CASE            shift and go to state 322
    ID              shift and go to state 13

    record_declaration             shift and go to state 374
    id_list                        shift and go to state 321

state 508

    (104) variant -> constant_list COLON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 510


state 509

    (103) variant -> constant_list COLON LPAREN record_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 511


state 510

    (104) variant -> constant_list COLON LPAREN RPAREN SEMICOLON .

    NUMBER          reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    NIL             reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 104 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)


state 511

    (103) variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .

    NUMBER          reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    STRING          reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    NIL             reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    END             reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    CASE            reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ID              reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 103 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NEW in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for CASE in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for WITH in state 30 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for ASM in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for NEW in state 68 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for CASE in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 68 resolved as shift
WARNING: shift/reduce conflict for WITH in state 68 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 68 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 68 resolved as shift
WARNING: shift/reduce conflict for ASM in state 68 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 90 resolved as shift
WARNING: shift/reduce conflict for CONST in state 90 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 90 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 90 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 90 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 90 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 90 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 90 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 91 resolved as shift
WARNING: shift/reduce conflict for CONST in state 91 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR in state 91 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 91 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 91 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 91 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 91 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 91 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 91 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING in state 200 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 200 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 200 resolved as shift
WARNING: shift/reduce conflict for NIL in state 200 resolved as shift
WARNING: shift/reduce conflict for ORDINAL_CONSTANT in state 200 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 358 resolved as shift
WARNING: shift/reduce conflict for NEW in state 358 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 358 resolved as shift
WARNING: shift/reduce conflict for IF in state 358 resolved as shift
WARNING: shift/reduce conflict for CASE in state 358 resolved as shift
WARNING: shift/reduce conflict for FOR in state 358 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 358 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 358 resolved as shift
WARNING: shift/reduce conflict for WITH in state 358 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 358 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 358 resolved as shift
WARNING: shift/reduce conflict for ASM in state 358 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 410 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (sentences_list -> empty)
WARNING: rejected rule (sentence -> empty) in state 48
WARNING: reduce/reduce conflict in state 246 resolved using rule (string_type -> STRING)
WARNING: rejected rule (data_type_list -> STRING) in state 246
WARNING: reduce/reduce conflict in state 247 resolved using rule (file_type -> FILE)
WARNING: rejected rule (data_type_list -> FILE) in state 247
WARNING: reduce/reduce conflict in state 327 resolved using rule (pointer_type -> CARET ID)
WARNING: rejected rule (data_type_list -> ID) in state 327
WARNING: reduce/reduce conflict in state 388 resolved using rule (set_range -> ID)
WARNING: rejected rule (data_type_set -> ID) in state 388
WARNING: reduce/reduce conflict in state 419 resolved using rule (string_type -> STRING LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) in state 419
WARNING: Rule (data_type_set -> ID) is never reduced
