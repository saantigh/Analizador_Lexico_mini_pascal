Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EXIT
    INHERITED
    INTERRUPT
    PRIVATE
    TEXT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_header uses_clause declaration_blocks main_block
Rule 2     program_header -> PROGRAM ID SEMICOLON
Rule 3     program_header -> UNIT ID SEMICOLON
Rule 4     uses_clause -> USES id_list SEMICOLON
Rule 5     uses_clause -> empty
Rule 6     id_list -> ID
Rule 7     id_list -> id_list COMMA ID
Rule 8     declaration_blocks -> declaration_blocks declaration_block
Rule 9     declaration_blocks -> empty
Rule 10    declaration_block -> label_declaration
Rule 11    declaration_block -> const_declaration_block
Rule 12    declaration_block -> type_declaration_block
Rule 13    declaration_block -> var_declaration_block
Rule 14    declaration_block -> procedure_declaration
Rule 15    declaration_block -> function_declaration
Rule 16    declaration_block -> constructor_implementation
Rule 17    declaration_block -> destructor_implementation
Rule 18    declaration_block -> method_implementation
Rule 19    declaration_block -> implementation_block
Rule 20    declaration_block -> interface_block
Rule 21    main_block -> compound_statement DOT
Rule 22    interface_block -> INTERFACE declaration_blocks
Rule 23    implementation_block -> IMPLEMENTATION declaration_blocks
Rule 24    label_declaration -> LABEL number_list SEMICOLON
Rule 25    number_list -> NUMBER
Rule 26    number_list -> number_list COMMA NUMBER
Rule 27    const_declaration_block -> CONST const_list
Rule 28    const_list -> const_list const_declaration
Rule 29    const_list -> const_declaration
Rule 30    const_declaration -> ID EQUAL constant SEMICOLON
Rule 31    const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON
Rule 32    constant -> NUMBER
Rule 33    constant -> STRING
Rule 34    constant -> TRUE
Rule 35    constant -> FALSE
Rule 36    constant -> NIL
Rule 37    constant -> ORDINAL_CONSTANT
Rule 38    type_declaration_block -> TYPE type_list
Rule 39    type_list -> type_list type_declaration
Rule 40    type_list -> type_declaration
Rule 41    type_declaration -> ID EQUAL type_definition SEMICOLON
Rule 42    type_definition -> data_type_list
Rule 43    type_definition -> LPAREN id_list RPAREN
Rule 44    type_definition -> NUMBER DOBLEDOT NUMBER
Rule 45    type_definition -> CHAR DOBLEDOT CHAR
Rule 46    type_definition -> ID DOBLEDOT ID
Rule 47    type_definition -> record_type
Rule 48    type_definition -> array_type
Rule 49    type_definition -> set_type
Rule 50    type_definition -> pointer_type
Rule 51    type_definition -> file_type
Rule 52    type_definition -> object_type
Rule 53    type_definition -> string_type
Rule 54    string_type -> STRING
Rule 55    string_type -> STRING LBRACKET NUMBER RBRACKET
Rule 56    record_type -> RECORD record_list END
Rule 57    record_type -> PACKED RECORD record_list END
Rule 58    array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 59    array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
Rule 60    array_type -> ARRAY OF data_type_list
Rule 61    type_range_list -> type_range
Rule 62    type_range_list -> type_range_list COMMA type_range
Rule 63    type_range -> NUMBER DOBLEDOT NUMBER
Rule 64    type_range -> NUMBER DOBLEDOT ID
Rule 65    type_range -> ID DOBLEDOT NUMBER
Rule 66    type_range -> CHAR DOBLEDOT CHAR
Rule 67    type_range -> ID DOBLEDOT ID
Rule 68    type_range -> ID
Rule 69    set_type -> SET OF set_range
Rule 70    set_range -> data_type_set
Rule 71    set_range -> NUMBER DOBLEDOT NUMBER
Rule 72    set_range -> CHAR DOBLEDOT CHAR
Rule 73    set_range -> ID
Rule 74    pointer_type -> CARET ID
Rule 75    pointer_type -> CARET data_type_list
Rule 76    file_type -> FILE OF data_type_list
Rule 77    file_type -> FILE
Rule 78    object_type -> OBJECT object_heritage object_fields object_methods END
Rule 79    object_heritage -> LPAREN ID RPAREN
Rule 80    object_heritage -> empty
Rule 81    object_fields -> object_fields var_declaration
Rule 82    object_fields -> empty
Rule 83    object_methods -> object_methods method_declaration
Rule 84    object_methods -> empty
Rule 85    method_declaration -> procedure_header SEMICOLON
Rule 86    method_declaration -> function_header SEMICOLON
Rule 87    method_declaration -> constructor_declaration
Rule 88    method_declaration -> destructor_declaration
Rule 89    method_declaration -> procedure_header SEMICOLON directive
Rule 90    method_declaration -> function_header SEMICOLON directive
Rule 91    constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 92    destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 93    method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 94    method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 95    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON
Rule 96    constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive
Rule 97    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON
Rule 98    destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive
Rule 99    record_list -> record_list record_declaration
Rule 100   record_list -> record_declaration
Rule 101   record_declaration -> id_list COLON data_type_list SEMICOLON
Rule 102   record_declaration -> CASE ID COLON data_type_list OF variant_list
Rule 103   record_declaration -> id_list COLON data_type_list
Rule 104   variant_list -> variant_list variant
Rule 105   variant_list -> variant
Rule 106   variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON
Rule 107   variant -> constant_list COLON LPAREN RPAREN SEMICOLON
Rule 108   constant_list -> constant
Rule 109   constant_list -> constant_list COMMA constant
Rule 110   var_declaration_block -> VAR var_list
Rule 111   var_list -> var_list var_declaration
Rule 112   var_list -> var_declaration
Rule 113   var_declaration -> id_list COLON type_definition SEMICOLON
Rule 114   var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON
Rule 115   var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON
Rule 116   procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON
Rule 117   procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 118   procedure_header -> PROCEDURE ID parameters
Rule 119   directive -> FORWARD
Rule 120   directive -> EXTERNAL
Rule 121   directive -> EXTERNAL STRING
Rule 122   directive -> ASM
Rule 123   directive -> INLINE
Rule 124   directive -> VIRTUAL
Rule 125   function_declaration -> function_header SEMICOLON directive
Rule 126   function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
Rule 127   function_header -> FUNCTION ID parameters COLON data_type_list
Rule 128   parameters -> LPAREN parameter_list RPAREN
Rule 129   parameters -> empty
Rule 130   parameter_list -> parameter_list SEMICOLON parameter_group
Rule 131   parameter_list -> parameter_group
Rule 132   parameter_group -> id_list COLON data_type_list
Rule 133   parameter_group -> VAR id_list COLON data_type_list
Rule 134   parameter_group -> CONST id_list COLON data_type_list
Rule 135   parameter_group -> procedure_header
Rule 136   parameter_group -> function_header
Rule 137   data_type_list -> INTEGER
Rule 138   data_type_list -> BYTE
Rule 139   data_type_list -> LONGINT
Rule 140   data_type_list -> SHORTINT
Rule 141   data_type_list -> WORD
Rule 142   data_type_list -> REAL
Rule 143   data_type_list -> SINGLE
Rule 144   data_type_list -> DOUBLE
Rule 145   data_type_list -> EXTENDED
Rule 146   data_type_list -> SHORT
Rule 147   data_type_list -> BOOLEAN
Rule 148   data_type_list -> CHAR
Rule 149   data_type_list -> STRING
Rule 150   data_type_list -> STRING LBRACKET NUMBER RBRACKET
Rule 151   data_type_list -> ID
Rule 152   data_type_list -> ABSOLUTE ID
Rule 153   data_type_list -> FILE
Rule 154   data_type_list -> array_type
Rule 155   data_type_list -> pointer_type
Rule 156   data_type_list -> record_type
Rule 157   data_type_list -> set_type
Rule 158   data_type_list -> file_type
Rule 159   data_type_list -> object_type
Rule 160   data_type_list -> string_type
Rule 161   data_type_set -> BYTE
Rule 162   data_type_set -> SHORTINT
Rule 163   data_type_set -> WORD
Rule 164   data_type_set -> BOOLEAN
Rule 165   data_type_set -> CHAR
Rule 166   data_type_set -> ID
Rule 167   compound_statement -> BEGIN sentences_list END
Rule 168   sentences_list -> sentences_list sentence SEMICOLON
Rule 169   sentences_list -> sentence SEMICOLON
Rule 170   sentences_list -> empty
Rule 171   sentence -> assignment
Rule 172   sentence -> procedure_call
Rule 173   sentence -> compound_statement
Rule 174   sentence -> if_statement
Rule 175   sentence -> case_statement
Rule 176   sentence -> for_statement
Rule 177   sentence -> while_statement
Rule 178   sentence -> repeat_statement
Rule 179   sentence -> with_statement
Rule 180   sentence -> goto_statement
Rule 181   sentence -> labeled_sentence
Rule 182   sentence -> asm_statement
Rule 183   sentence -> empty
Rule 184   asm_statement -> ASM
Rule 185   assignment -> variable ASIGNATION expression
Rule 186   assignment -> ID ASIGNATION expression
Rule 187   procedure_call -> ID
Rule 188   procedure_call -> ID LPAREN expression_list RPAREN
Rule 189   procedure_call -> ID LPAREN RPAREN
Rule 190   procedure_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 191   procedure_call -> variable DOT ID LPAREN RPAREN
Rule 192   procedure_call -> NEW LPAREN expression_list RPAREN
Rule 193   procedure_call -> NEW LPAREN RPAREN
Rule 194   procedure_call -> DISPOSE LPAREN expression_list RPAREN
Rule 195   procedure_call -> DISPOSE LPAREN RPAREN
Rule 196   if_statement -> IF expression THEN sentence
Rule 197   if_statement -> IF expression THEN sentence ELSE sentence
Rule 198   case_statement -> CASE expression OF case_list END
Rule 199   case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END
Rule 200   case_statement -> CASE expression OF case_list ELSE sentences_list END
Rule 201   case_list -> case_list case_label COLON sentence SEMICOLON
Rule 202   case_list -> case_label COLON sentence SEMICOLON
Rule 203   case_list -> empty
Rule 204   case_label -> constant
Rule 205   case_label -> constant DOBLEDOT constant
Rule 206   case_label -> case_label COMMA constant
Rule 207   for_statement -> FOR ID ASIGNATION expression TO expression DO sentence
Rule 208   for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence
Rule 209   for_statement -> FOR ID IN expression DO sentence
Rule 210   while_statement -> WHILE expression DO sentence
Rule 211   repeat_statement -> REPEAT sentences_list UNTIL expression
Rule 212   with_statement -> WITH variable_list DO sentence
Rule 213   variable_list -> variable
Rule 214   variable_list -> variable_list COMMA variable
Rule 215   goto_statement -> GOTO NUMBER
Rule 216   labeled_sentence -> NUMBER COLON sentence
Rule 217   empty -> <empty>
Rule 218   expression -> expression OR simple_expression
Rule 219   expression -> expression XOR simple_expression
Rule 220   expression -> simple_expression
Rule 221   simple_expression -> simple_expression AND relational_expression
Rule 222   simple_expression -> relational_expression
Rule 223   relational_expression -> relational_expression relational_operator additive_expression
Rule 224   relational_expression -> additive_expression
Rule 225   relational_operator -> EQUAL
Rule 226   relational_operator -> DISTINT
Rule 227   relational_operator -> LESS
Rule 228   relational_operator -> LESSEQUAL
Rule 229   relational_operator -> GREATER
Rule 230   relational_operator -> GREATEREQUAL
Rule 231   relational_operator -> IN
Rule 232   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 233   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 234   additive_expression -> multiplicative_expression
Rule 235   multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 236   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 237   multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 238   multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 239   multiplicative_expression -> multiplicative_expression SHL unary_expression
Rule 240   multiplicative_expression -> multiplicative_expression SHR unary_expression
Rule 241   multiplicative_expression -> unary_expression
Rule 242   unary_expression -> NOT unary_expression
Rule 243   unary_expression -> MINUS unary_expression
Rule 244   unary_expression -> PLUS unary_expression
Rule 245   unary_expression -> ADDRESS_OF unary_expression
Rule 246   unary_expression -> primary_expression
Rule 247   primary_expression -> variable
Rule 248   primary_expression -> NUMBER
Rule 249   primary_expression -> STRING
Rule 250   primary_expression -> TRUE
Rule 251   primary_expression -> FALSE
Rule 252   primary_expression -> NIL
Rule 253   primary_expression -> LPAREN expression RPAREN
Rule 254   primary_expression -> function_call
Rule 255   primary_expression -> set_constructor
Rule 256   set_item -> expression
Rule 257   set_item -> expression DOBLEDOT expression
Rule 258   set_item_list -> set_item
Rule 259   set_item_list -> set_item_list COMMA set_item
Rule 260   set_constructor -> LBRACKET set_item_list RBRACKET
Rule 261   set_constructor -> LBRACKET RBRACKET
Rule 262   variable -> ID
Rule 263   variable -> variable DOT ID
Rule 264   variable -> variable LBRACKET expression_list RBRACKET
Rule 265   variable -> variable CARET
Rule 266   variable -> LPAREN variable RPAREN CARET
Rule 267   function_call -> ID LPAREN expression_list RPAREN
Rule 268   function_call -> ID LPAREN RPAREN
Rule 269   function_call -> variable DOT ID LPAREN expression_list RPAREN
Rule 270   function_call -> variable DOT ID LPAREN RPAREN
Rule 271   expression_list -> expression
Rule 272   expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

ABSOLUTE             : 115 152
ADDRESS_OF           : 245
AND                  : 221
ARRAY                : 58 59 60
ASIGNATION           : 185 186 207 208
ASM                  : 122 184
BEGIN                : 167
BOOLEAN              : 147 164
BYTE                 : 138 161
CARET                : 74 75 265 266
CASE                 : 102 198 199 200
CHAR                 : 45 45 66 66 72 72 148 165
COLON                : 31 94 101 102 103 106 107 113 114 115 127 132 133 134 201 202 216
COMMA                : 7 26 62 109 206 214 259 272
CONST                : 27 134
CONSTRUCTOR          : 91 95 96
DESTRUCTOR           : 92 97 98
DISPOSE              : 194 195
DISTINT              : 226
DIV                  : 237
DIVIDE               : 236
DO                   : 207 208 209 210 212
DOBLEDOT             : 44 45 46 63 64 65 66 67 71 72 205 257
DOT                  : 21 91 92 93 94 190 191 263 269 270
DOUBLE               : 144
DOWNTO               : 208
ELSE                 : 197 199 200
END                  : 56 57 78 167 198 199 200
EQUAL                : 30 31 41 114 225
EXIT                 : 
EXTENDED             : 145
EXTERNAL             : 120 121
FALSE                : 35 251
FILE                 : 76 77 153
FOR                  : 207 208 209
FORWARD              : 119
FUNCTION             : 94 127
GOTO                 : 215
GREATER              : 229
GREATEREQUAL         : 230
ID                   : 2 3 6 7 30 31 41 46 46 64 65 67 67 68 73 74 79 91 91 92 92 93 93 94 94 95 96 97 98 102 115 118 127 151 152 166 186 187 188 189 190 191 207 208 209 262 263 267 268 269 270
IF                   : 196 197
IMPLEMENTATION       : 23
IN                   : 209 231
INHERITED            : 
INLINE               : 123
INTEGER              : 137
INTERFACE            : 22
INTERRUPT            : 
LABEL                : 24
LBRACKET             : 55 58 59 150 260 261 264
LESS                 : 227
LESSEQUAL            : 228
LONGINT              : 139
LPAREN               : 43 79 106 107 128 188 189 190 191 192 193 194 195 253 266 267 268 269 270
MINUS                : 233 243
MOD                  : 238
NEW                  : 192 193
NIL                  : 36 252
NOT                  : 242
NUMBER               : 25 26 32 44 44 55 63 63 64 65 71 71 150 215 216 248
OBJECT               : 78
OF                   : 58 59 60 69 76 102 198 199 200
OR                   : 218
ORDINAL_CONSTANT     : 37
PACKED               : 57 59
PLUS                 : 232 244
PRIVATE              : 
PROCEDURE            : 93 118
PROGRAM              : 2
RBRACKET             : 55 58 59 150 260 261 264
REAL                 : 142
RECORD               : 56 57
REPEAT               : 211
RPAREN               : 43 79 106 107 128 188 189 190 191 192 193 194 195 253 266 267 268 269 270
SEMICOLON            : 2 3 4 24 30 31 41 85 86 89 90 91 91 92 92 93 93 94 94 95 96 97 98 101 106 107 113 114 115 116 116 117 117 125 126 126 130 168 169 199 201 202
SET                  : 69
SHL                  : 239
SHORT                : 146
SHORTINT             : 140 162
SHR                  : 240
SINGLE               : 143
STRING               : 33 54 55 121 149 150 249
TEXT                 : 
THEN                 : 196 197
TIMES                : 235
TO                   : 207
TRUE                 : 34 250
TYPE                 : 38
UNIT                 : 3
UNTIL                : 211
USES                 : 4
VAR                  : 110 133
VIRTUAL              : 124
WHILE                : 210
WITH                 : 212
WORD                 : 141 163
XOR                  : 219
error                : 

Nonterminals, with rules where they appear

additive_expression  : 223 224 232 233
array_type           : 48 154
asm_statement        : 182
assignment           : 171
case_label           : 201 202 206
case_list            : 198 199 200 201
case_statement       : 175
compound_statement   : 21 91 92 93 94 117 126 173
const_declaration    : 28 29
const_declaration_block : 11
const_list           : 27 28
constant             : 30 31 108 109 204 205 205 206
constant_list        : 106 107 109
constructor_declaration : 87
constructor_implementation : 16
data_type_list       : 31 42 58 59 60 75 76 94 101 102 103 127 132 133 134
data_type_set        : 70
declaration_block    : 8
declaration_blocks   : 1 8 22 23 91 92 93 94 117 126
destructor_declaration : 88
destructor_implementation : 17
directive            : 89 90 96 98 116 125
empty                : 5 9 80 82 84 129 170 183 203
expression           : 114 185 186 196 197 198 199 200 207 207 208 208 209 210 211 218 219 253 256 257 257 271 272
expression_list      : 188 190 192 194 264 267 269 272
file_type            : 51 158
for_statement        : 176
function_call        : 254
function_declaration : 15
function_header      : 86 90 125 126 136
goto_statement       : 180
id_list              : 4 7 43 101 103 113 114 115 132 133 134
if_statement         : 174
implementation_block : 19
interface_block      : 20
label_declaration    : 10
labeled_sentence     : 181
main_block           : 1
method_declaration   : 83
method_implementation : 18
multiplicative_expression : 232 233 234 235 236 237 238 239 240
number_list          : 24 26
object_fields        : 78 81
object_heritage      : 78
object_methods       : 78 83
object_type          : 52 159
parameter_group      : 130 131
parameter_list       : 128 130
parameters           : 91 92 93 94 95 96 97 98 118 127
pointer_type         : 50 155
primary_expression   : 246
procedure_call       : 172
procedure_declaration : 14
procedure_header     : 85 89 116 117 135
program              : 0
program_header       : 1
record_declaration   : 99 100
record_list          : 56 57 99 106
record_type          : 47 156
relational_expression : 221 222 223
relational_operator  : 223
repeat_statement     : 178
sentence             : 168 169 196 197 197 201 202 207 208 209 210 212 216
sentences_list       : 167 168 199 200 211
set_constructor      : 255
set_item             : 258 259
set_item_list        : 259 260
set_range            : 69
set_type             : 49 157
simple_expression    : 218 219 220 221
string_type          : 53 160
type_declaration     : 39 40
type_declaration_block : 12
type_definition      : 41 113 114 115
type_list            : 38 39
type_range           : 61 62
type_range_list      : 58 59 62
unary_expression     : 235 236 237 238 239 240 241 242 243 244 245
uses_clause          : 1
var_declaration      : 81 111 112
var_declaration_block : 13
var_list             : 110 111
variable             : 185 190 191 213 214 247 263 264 265 266 269 270
variable_list        : 212 214
variant              : 104 105
variant_list         : 102 104
while_statement      : 177
with_statement       : 179

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_header uses_clause declaration_blocks main_block
    (2) program_header -> . PROGRAM ID SEMICOLON
    (3) program_header -> . UNIT ID SEMICOLON

    PROGRAM         shift and go to state 3
    UNIT            shift and go to state 4

    program                        shift and go to state 1
    program_header                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_header . uses_clause declaration_blocks main_block
    (4) uses_clause -> . USES id_list SEMICOLON
    (5) uses_clause -> . empty
    (217) empty -> .

    USES            shift and go to state 6
    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    uses_clause                    shift and go to state 5
    empty                          shift and go to state 7

state 3

    (2) program_header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 8


state 4

    (3) program_header -> UNIT . ID SEMICOLON

    ID              shift and go to state 9


state 5

    (1) program -> program_header uses_clause . declaration_blocks main_block
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 10
    empty                          shift and go to state 11

state 6

    (4) uses_clause -> USES . id_list SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 12

state 7

    (5) uses_clause -> empty .

    BEGIN           reduce using rule 5 (uses_clause -> empty .)
    LABEL           reduce using rule 5 (uses_clause -> empty .)
    CONST           reduce using rule 5 (uses_clause -> empty .)
    TYPE            reduce using rule 5 (uses_clause -> empty .)
    VAR             reduce using rule 5 (uses_clause -> empty .)
    CONSTRUCTOR     reduce using rule 5 (uses_clause -> empty .)
    DESTRUCTOR      reduce using rule 5 (uses_clause -> empty .)
    PROCEDURE       reduce using rule 5 (uses_clause -> empty .)
    FUNCTION        reduce using rule 5 (uses_clause -> empty .)
    IMPLEMENTATION  reduce using rule 5 (uses_clause -> empty .)
    INTERFACE       reduce using rule 5 (uses_clause -> empty .)


state 8

    (2) program_header -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (3) program_header -> UNIT ID . SEMICOLON

    SEMICOLON       shift and go to state 15


state 10

    (1) program -> program_header uses_clause declaration_blocks . main_block
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (21) main_block -> . compound_statement DOT
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (167) compound_statement -> . BEGIN sentences_list END
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    main_block                     shift and go to state 16
    declaration_block              shift and go to state 17
    compound_statement             shift and go to state 18
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 11

    (9) declaration_blocks -> empty .

    BEGIN           reduce using rule 9 (declaration_blocks -> empty .)
    LABEL           reduce using rule 9 (declaration_blocks -> empty .)
    CONST           reduce using rule 9 (declaration_blocks -> empty .)
    TYPE            reduce using rule 9 (declaration_blocks -> empty .)
    VAR             reduce using rule 9 (declaration_blocks -> empty .)
    CONSTRUCTOR     reduce using rule 9 (declaration_blocks -> empty .)
    DESTRUCTOR      reduce using rule 9 (declaration_blocks -> empty .)
    PROCEDURE       reduce using rule 9 (declaration_blocks -> empty .)
    FUNCTION        reduce using rule 9 (declaration_blocks -> empty .)
    IMPLEMENTATION  reduce using rule 9 (declaration_blocks -> empty .)
    INTERFACE       reduce using rule 9 (declaration_blocks -> empty .)


state 12

    (4) uses_clause -> USES id_list . SEMICOLON
    (7) id_list -> id_list . COMMA ID

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 44


state 13

    (6) id_list -> ID .

    SEMICOLON       reduce using rule 6 (id_list -> ID .)
    COMMA           reduce using rule 6 (id_list -> ID .)
    COLON           reduce using rule 6 (id_list -> ID .)
    RPAREN          reduce using rule 6 (id_list -> ID .)


state 14

    (2) program_header -> PROGRAM ID SEMICOLON .

    USES            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    BEGIN           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    LABEL           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONST           reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    TYPE            reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)
    INTERFACE       reduce using rule 2 (program_header -> PROGRAM ID SEMICOLON .)


state 15

    (3) program_header -> UNIT ID SEMICOLON .

    USES            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    BEGIN           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    LABEL           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONST           reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    TYPE            reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    VAR             reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)
    INTERFACE       reduce using rule 3 (program_header -> UNIT ID SEMICOLON .)


state 16

    (1) program -> program_header uses_clause declaration_blocks main_block .

    $end            reduce using rule 1 (program -> program_header uses_clause declaration_blocks main_block .)


state 17

    (8) declaration_blocks -> declaration_blocks declaration_block .

    BEGIN           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    LABEL           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONST           reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    TYPE            reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    VAR             reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    CONSTRUCTOR     reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    DESTRUCTOR      reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    PROCEDURE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    FUNCTION        reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    IMPLEMENTATION  reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)
    INTERFACE       reduce using rule 8 (declaration_blocks -> declaration_blocks declaration_block .)


state 18

    (21) main_block -> compound_statement . DOT

    DOT             shift and go to state 45


state 19

    (10) declaration_block -> label_declaration .

    BEGIN           reduce using rule 10 (declaration_block -> label_declaration .)
    LABEL           reduce using rule 10 (declaration_block -> label_declaration .)
    CONST           reduce using rule 10 (declaration_block -> label_declaration .)
    TYPE            reduce using rule 10 (declaration_block -> label_declaration .)
    VAR             reduce using rule 10 (declaration_block -> label_declaration .)
    CONSTRUCTOR     reduce using rule 10 (declaration_block -> label_declaration .)
    DESTRUCTOR      reduce using rule 10 (declaration_block -> label_declaration .)
    PROCEDURE       reduce using rule 10 (declaration_block -> label_declaration .)
    FUNCTION        reduce using rule 10 (declaration_block -> label_declaration .)
    IMPLEMENTATION  reduce using rule 10 (declaration_block -> label_declaration .)
    INTERFACE       reduce using rule 10 (declaration_block -> label_declaration .)


state 20

    (11) declaration_block -> const_declaration_block .

    BEGIN           reduce using rule 11 (declaration_block -> const_declaration_block .)
    LABEL           reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONST           reduce using rule 11 (declaration_block -> const_declaration_block .)
    TYPE            reduce using rule 11 (declaration_block -> const_declaration_block .)
    VAR             reduce using rule 11 (declaration_block -> const_declaration_block .)
    CONSTRUCTOR     reduce using rule 11 (declaration_block -> const_declaration_block .)
    DESTRUCTOR      reduce using rule 11 (declaration_block -> const_declaration_block .)
    PROCEDURE       reduce using rule 11 (declaration_block -> const_declaration_block .)
    FUNCTION        reduce using rule 11 (declaration_block -> const_declaration_block .)
    IMPLEMENTATION  reduce using rule 11 (declaration_block -> const_declaration_block .)
    INTERFACE       reduce using rule 11 (declaration_block -> const_declaration_block .)


state 21

    (12) declaration_block -> type_declaration_block .

    BEGIN           reduce using rule 12 (declaration_block -> type_declaration_block .)
    LABEL           reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONST           reduce using rule 12 (declaration_block -> type_declaration_block .)
    TYPE            reduce using rule 12 (declaration_block -> type_declaration_block .)
    VAR             reduce using rule 12 (declaration_block -> type_declaration_block .)
    CONSTRUCTOR     reduce using rule 12 (declaration_block -> type_declaration_block .)
    DESTRUCTOR      reduce using rule 12 (declaration_block -> type_declaration_block .)
    PROCEDURE       reduce using rule 12 (declaration_block -> type_declaration_block .)
    FUNCTION        reduce using rule 12 (declaration_block -> type_declaration_block .)
    IMPLEMENTATION  reduce using rule 12 (declaration_block -> type_declaration_block .)
    INTERFACE       reduce using rule 12 (declaration_block -> type_declaration_block .)


state 22

    (13) declaration_block -> var_declaration_block .

    BEGIN           reduce using rule 13 (declaration_block -> var_declaration_block .)
    LABEL           reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONST           reduce using rule 13 (declaration_block -> var_declaration_block .)
    TYPE            reduce using rule 13 (declaration_block -> var_declaration_block .)
    VAR             reduce using rule 13 (declaration_block -> var_declaration_block .)
    CONSTRUCTOR     reduce using rule 13 (declaration_block -> var_declaration_block .)
    DESTRUCTOR      reduce using rule 13 (declaration_block -> var_declaration_block .)
    PROCEDURE       reduce using rule 13 (declaration_block -> var_declaration_block .)
    FUNCTION        reduce using rule 13 (declaration_block -> var_declaration_block .)
    IMPLEMENTATION  reduce using rule 13 (declaration_block -> var_declaration_block .)
    INTERFACE       reduce using rule 13 (declaration_block -> var_declaration_block .)


state 23

    (14) declaration_block -> procedure_declaration .

    BEGIN           reduce using rule 14 (declaration_block -> procedure_declaration .)
    LABEL           reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONST           reduce using rule 14 (declaration_block -> procedure_declaration .)
    TYPE            reduce using rule 14 (declaration_block -> procedure_declaration .)
    VAR             reduce using rule 14 (declaration_block -> procedure_declaration .)
    CONSTRUCTOR     reduce using rule 14 (declaration_block -> procedure_declaration .)
    DESTRUCTOR      reduce using rule 14 (declaration_block -> procedure_declaration .)
    PROCEDURE       reduce using rule 14 (declaration_block -> procedure_declaration .)
    FUNCTION        reduce using rule 14 (declaration_block -> procedure_declaration .)
    IMPLEMENTATION  reduce using rule 14 (declaration_block -> procedure_declaration .)
    INTERFACE       reduce using rule 14 (declaration_block -> procedure_declaration .)


state 24

    (15) declaration_block -> function_declaration .

    BEGIN           reduce using rule 15 (declaration_block -> function_declaration .)
    LABEL           reduce using rule 15 (declaration_block -> function_declaration .)
    CONST           reduce using rule 15 (declaration_block -> function_declaration .)
    TYPE            reduce using rule 15 (declaration_block -> function_declaration .)
    VAR             reduce using rule 15 (declaration_block -> function_declaration .)
    CONSTRUCTOR     reduce using rule 15 (declaration_block -> function_declaration .)
    DESTRUCTOR      reduce using rule 15 (declaration_block -> function_declaration .)
    PROCEDURE       reduce using rule 15 (declaration_block -> function_declaration .)
    FUNCTION        reduce using rule 15 (declaration_block -> function_declaration .)
    IMPLEMENTATION  reduce using rule 15 (declaration_block -> function_declaration .)
    INTERFACE       reduce using rule 15 (declaration_block -> function_declaration .)


state 25

    (16) declaration_block -> constructor_implementation .

    BEGIN           reduce using rule 16 (declaration_block -> constructor_implementation .)
    LABEL           reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONST           reduce using rule 16 (declaration_block -> constructor_implementation .)
    TYPE            reduce using rule 16 (declaration_block -> constructor_implementation .)
    VAR             reduce using rule 16 (declaration_block -> constructor_implementation .)
    CONSTRUCTOR     reduce using rule 16 (declaration_block -> constructor_implementation .)
    DESTRUCTOR      reduce using rule 16 (declaration_block -> constructor_implementation .)
    PROCEDURE       reduce using rule 16 (declaration_block -> constructor_implementation .)
    FUNCTION        reduce using rule 16 (declaration_block -> constructor_implementation .)
    IMPLEMENTATION  reduce using rule 16 (declaration_block -> constructor_implementation .)
    INTERFACE       reduce using rule 16 (declaration_block -> constructor_implementation .)


state 26

    (17) declaration_block -> destructor_implementation .

    BEGIN           reduce using rule 17 (declaration_block -> destructor_implementation .)
    LABEL           reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONST           reduce using rule 17 (declaration_block -> destructor_implementation .)
    TYPE            reduce using rule 17 (declaration_block -> destructor_implementation .)
    VAR             reduce using rule 17 (declaration_block -> destructor_implementation .)
    CONSTRUCTOR     reduce using rule 17 (declaration_block -> destructor_implementation .)
    DESTRUCTOR      reduce using rule 17 (declaration_block -> destructor_implementation .)
    PROCEDURE       reduce using rule 17 (declaration_block -> destructor_implementation .)
    FUNCTION        reduce using rule 17 (declaration_block -> destructor_implementation .)
    IMPLEMENTATION  reduce using rule 17 (declaration_block -> destructor_implementation .)
    INTERFACE       reduce using rule 17 (declaration_block -> destructor_implementation .)


state 27

    (18) declaration_block -> method_implementation .

    BEGIN           reduce using rule 18 (declaration_block -> method_implementation .)
    LABEL           reduce using rule 18 (declaration_block -> method_implementation .)
    CONST           reduce using rule 18 (declaration_block -> method_implementation .)
    TYPE            reduce using rule 18 (declaration_block -> method_implementation .)
    VAR             reduce using rule 18 (declaration_block -> method_implementation .)
    CONSTRUCTOR     reduce using rule 18 (declaration_block -> method_implementation .)
    DESTRUCTOR      reduce using rule 18 (declaration_block -> method_implementation .)
    PROCEDURE       reduce using rule 18 (declaration_block -> method_implementation .)
    FUNCTION        reduce using rule 18 (declaration_block -> method_implementation .)
    IMPLEMENTATION  reduce using rule 18 (declaration_block -> method_implementation .)
    INTERFACE       reduce using rule 18 (declaration_block -> method_implementation .)


state 28

    (19) declaration_block -> implementation_block .

    BEGIN           reduce using rule 19 (declaration_block -> implementation_block .)
    LABEL           reduce using rule 19 (declaration_block -> implementation_block .)
    CONST           reduce using rule 19 (declaration_block -> implementation_block .)
    TYPE            reduce using rule 19 (declaration_block -> implementation_block .)
    VAR             reduce using rule 19 (declaration_block -> implementation_block .)
    CONSTRUCTOR     reduce using rule 19 (declaration_block -> implementation_block .)
    DESTRUCTOR      reduce using rule 19 (declaration_block -> implementation_block .)
    PROCEDURE       reduce using rule 19 (declaration_block -> implementation_block .)
    FUNCTION        reduce using rule 19 (declaration_block -> implementation_block .)
    IMPLEMENTATION  reduce using rule 19 (declaration_block -> implementation_block .)
    INTERFACE       reduce using rule 19 (declaration_block -> implementation_block .)


state 29

    (20) declaration_block -> interface_block .

    BEGIN           reduce using rule 20 (declaration_block -> interface_block .)
    LABEL           reduce using rule 20 (declaration_block -> interface_block .)
    CONST           reduce using rule 20 (declaration_block -> interface_block .)
    TYPE            reduce using rule 20 (declaration_block -> interface_block .)
    VAR             reduce using rule 20 (declaration_block -> interface_block .)
    CONSTRUCTOR     reduce using rule 20 (declaration_block -> interface_block .)
    DESTRUCTOR      reduce using rule 20 (declaration_block -> interface_block .)
    PROCEDURE       reduce using rule 20 (declaration_block -> interface_block .)
    FUNCTION        reduce using rule 20 (declaration_block -> interface_block .)
    IMPLEMENTATION  reduce using rule 20 (declaration_block -> interface_block .)
    INTERFACE       reduce using rule 20 (declaration_block -> interface_block .)


state 30

    (167) compound_statement -> BEGIN . sentences_list END
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (217) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    END             reduce using rule 217 (empty -> .)
    SEMICOLON       reduce using rule 217 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 217 (empty -> .) ]
  ! NEW             [ reduce using rule 217 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 217 (empty -> .) ]
  ! BEGIN           [ reduce using rule 217 (empty -> .) ]
  ! IF              [ reduce using rule 217 (empty -> .) ]
  ! CASE            [ reduce using rule 217 (empty -> .) ]
  ! FOR             [ reduce using rule 217 (empty -> .) ]
  ! WHILE           [ reduce using rule 217 (empty -> .) ]
  ! REPEAT          [ reduce using rule 217 (empty -> .) ]
  ! WITH            [ reduce using rule 217 (empty -> .) ]
  ! GOTO            [ reduce using rule 217 (empty -> .) ]
  ! NUMBER          [ reduce using rule 217 (empty -> .) ]
  ! ASM             [ reduce using rule 217 (empty -> .) ]
  ! LPAREN          [ reduce using rule 217 (empty -> .) ]

    sentences_list                 shift and go to state 46
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 31

    (24) label_declaration -> LABEL . number_list SEMICOLON
    (25) number_list -> . NUMBER
    (26) number_list -> . number_list COMMA NUMBER

    NUMBER          shift and go to state 76

    number_list                    shift and go to state 75

state 32

    (27) const_declaration_block -> CONST . const_list
    (28) const_list -> . const_list const_declaration
    (29) const_list -> . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    ID              shift and go to state 79

    const_list                     shift and go to state 77
    const_declaration              shift and go to state 78

state 33

    (38) type_declaration_block -> TYPE . type_list
    (39) type_list -> . type_list type_declaration
    (40) type_list -> . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    ID              shift and go to state 82

    type_list                      shift and go to state 80
    type_declaration               shift and go to state 81

state 34

    (110) var_declaration_block -> VAR . var_list
    (111) var_list -> . var_list var_declaration
    (112) var_list -> . var_declaration
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    var_list                       shift and go to state 83
    var_declaration                shift and go to state 84
    id_list                        shift and go to state 85

state 35

    (116) procedure_declaration -> procedure_header . SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> procedure_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 86


state 36

    (125) function_declaration -> function_header . SEMICOLON directive
    (126) function_declaration -> function_header . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 87


state 37

    (91) constructor_implementation -> CONSTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 88


state 38

    (92) destructor_implementation -> DESTRUCTOR . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 89


state 39

    (93) method_implementation -> PROCEDURE . ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (118) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 90


state 40

    (94) method_implementation -> FUNCTION . ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (127) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 91


state 41

    (23) implementation_block -> IMPLEMENTATION . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)
    BEGIN           reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 92
    empty                          shift and go to state 11

state 42

    (22) interface_block -> INTERFACE . declaration_blocks
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)
    BEGIN           reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 93
    empty                          shift and go to state 11

state 43

    (4) uses_clause -> USES id_list SEMICOLON .

    BEGIN           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    LABEL           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONST           reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    TYPE            reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    VAR             reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    PROCEDURE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    FUNCTION        reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)
    INTERFACE       reduce using rule 4 (uses_clause -> USES id_list SEMICOLON .)


state 44

    (7) id_list -> id_list COMMA . ID

    ID              shift and go to state 94


state 45

    (21) main_block -> compound_statement DOT .

    $end            reduce using rule 21 (main_block -> compound_statement DOT .)


state 46

    (167) compound_statement -> BEGIN sentences_list . END
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    END             shift and go to state 95
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 47

    (169) sentences_list -> sentence . SEMICOLON

    SEMICOLON       shift and go to state 98


state 48

    (170) sentences_list -> empty .
    (183) sentence -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 170 (sentences_list -> empty .)
    END             reduce using rule 170 (sentences_list -> empty .)
    ID              reduce using rule 170 (sentences_list -> empty .)
    NEW             reduce using rule 170 (sentences_list -> empty .)
    DISPOSE         reduce using rule 170 (sentences_list -> empty .)
    BEGIN           reduce using rule 170 (sentences_list -> empty .)
    IF              reduce using rule 170 (sentences_list -> empty .)
    CASE            reduce using rule 170 (sentences_list -> empty .)
    FOR             reduce using rule 170 (sentences_list -> empty .)
    WHILE           reduce using rule 170 (sentences_list -> empty .)
    REPEAT          reduce using rule 170 (sentences_list -> empty .)
    WITH            reduce using rule 170 (sentences_list -> empty .)
    GOTO            reduce using rule 170 (sentences_list -> empty .)
    NUMBER          reduce using rule 170 (sentences_list -> empty .)
    ASM             reduce using rule 170 (sentences_list -> empty .)
    LPAREN          reduce using rule 170 (sentences_list -> empty .)
    SEMICOLON       reduce using rule 170 (sentences_list -> empty .)
    UNTIL           reduce using rule 170 (sentences_list -> empty .)

  ! SEMICOLON       [ reduce using rule 183 (sentence -> empty .) ]


state 49

    (171) sentence -> assignment .

    SEMICOLON       reduce using rule 171 (sentence -> assignment .)
    ELSE            reduce using rule 171 (sentence -> assignment .)


state 50

    (172) sentence -> procedure_call .

    SEMICOLON       reduce using rule 172 (sentence -> procedure_call .)
    ELSE            reduce using rule 172 (sentence -> procedure_call .)


state 51

    (173) sentence -> compound_statement .

    SEMICOLON       reduce using rule 173 (sentence -> compound_statement .)
    ELSE            reduce using rule 173 (sentence -> compound_statement .)


state 52

    (174) sentence -> if_statement .

    SEMICOLON       reduce using rule 174 (sentence -> if_statement .)
    ELSE            reduce using rule 174 (sentence -> if_statement .)


state 53

    (175) sentence -> case_statement .

    SEMICOLON       reduce using rule 175 (sentence -> case_statement .)
    ELSE            reduce using rule 175 (sentence -> case_statement .)


state 54

    (176) sentence -> for_statement .

    SEMICOLON       reduce using rule 176 (sentence -> for_statement .)
    ELSE            reduce using rule 176 (sentence -> for_statement .)


state 55

    (177) sentence -> while_statement .

    SEMICOLON       reduce using rule 177 (sentence -> while_statement .)
    ELSE            reduce using rule 177 (sentence -> while_statement .)


state 56

    (178) sentence -> repeat_statement .

    SEMICOLON       reduce using rule 178 (sentence -> repeat_statement .)
    ELSE            reduce using rule 178 (sentence -> repeat_statement .)


state 57

    (179) sentence -> with_statement .

    SEMICOLON       reduce using rule 179 (sentence -> with_statement .)
    ELSE            reduce using rule 179 (sentence -> with_statement .)


state 58

    (180) sentence -> goto_statement .

    SEMICOLON       reduce using rule 180 (sentence -> goto_statement .)
    ELSE            reduce using rule 180 (sentence -> goto_statement .)


state 59

    (181) sentence -> labeled_sentence .

    SEMICOLON       reduce using rule 181 (sentence -> labeled_sentence .)
    ELSE            reduce using rule 181 (sentence -> labeled_sentence .)


state 60

    (182) sentence -> asm_statement .

    SEMICOLON       reduce using rule 182 (sentence -> asm_statement .)
    ELSE            reduce using rule 182 (sentence -> asm_statement .)


state 61

    (185) assignment -> variable . ASIGNATION expression
    (190) procedure_call -> variable . DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> variable . DOT ID LPAREN RPAREN
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET

    ASIGNATION      shift and go to state 99
    DOT             shift and go to state 100
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102


state 62

    (186) assignment -> ID . ASIGNATION expression
    (187) procedure_call -> ID .
    (188) procedure_call -> ID . LPAREN expression_list RPAREN
    (189) procedure_call -> ID . LPAREN RPAREN
    (262) variable -> ID .

  ! shift/reduce conflict for ASIGNATION resolved as shift
    ASIGNATION      shift and go to state 103
    SEMICOLON       reduce using rule 187 (procedure_call -> ID .)
    ELSE            reduce using rule 187 (procedure_call -> ID .)
    LPAREN          shift and go to state 104
    DOT             reduce using rule 262 (variable -> ID .)
    LBRACKET        reduce using rule 262 (variable -> ID .)
    CARET           reduce using rule 262 (variable -> ID .)

  ! ASIGNATION      [ reduce using rule 262 (variable -> ID .) ]


state 63

    (266) variable -> LPAREN . variable RPAREN CARET
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 106
    LPAREN          shift and go to state 63

    variable                       shift and go to state 105

state 64

    (192) procedure_call -> NEW . LPAREN expression_list RPAREN
    (193) procedure_call -> NEW . LPAREN RPAREN

    LPAREN          shift and go to state 107


state 65

    (194) procedure_call -> DISPOSE . LPAREN expression_list RPAREN
    (195) procedure_call -> DISPOSE . LPAREN RPAREN

    LPAREN          shift and go to state 108


state 66

    (196) if_statement -> IF . expression THEN sentence
    (197) if_statement -> IF . expression THEN sentence ELSE sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 109
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 67

    (198) case_statement -> CASE . expression OF case_list END
    (199) case_statement -> CASE . expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> CASE . expression OF case_list ELSE sentences_list END
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 131
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 68

    (207) for_statement -> FOR . ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> FOR . ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> FOR . ID IN expression DO sentence

    ID              shift and go to state 132


state 69

    (210) while_statement -> WHILE . expression DO sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 133
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 70

    (211) repeat_statement -> REPEAT . sentences_list UNTIL expression
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (217) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    UNTIL           reduce using rule 217 (empty -> .)
    SEMICOLON       reduce using rule 217 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 217 (empty -> .) ]
  ! NEW             [ reduce using rule 217 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 217 (empty -> .) ]
  ! BEGIN           [ reduce using rule 217 (empty -> .) ]
  ! IF              [ reduce using rule 217 (empty -> .) ]
  ! CASE            [ reduce using rule 217 (empty -> .) ]
  ! FOR             [ reduce using rule 217 (empty -> .) ]
  ! WHILE           [ reduce using rule 217 (empty -> .) ]
  ! REPEAT          [ reduce using rule 217 (empty -> .) ]
  ! WITH            [ reduce using rule 217 (empty -> .) ]
  ! GOTO            [ reduce using rule 217 (empty -> .) ]
  ! NUMBER          [ reduce using rule 217 (empty -> .) ]
  ! ASM             [ reduce using rule 217 (empty -> .) ]
  ! LPAREN          [ reduce using rule 217 (empty -> .) ]

    sentences_list                 shift and go to state 134
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 71

    (212) with_statement -> WITH . variable_list DO sentence
    (213) variable_list -> . variable
    (214) variable_list -> . variable_list COMMA variable
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 106
    LPAREN          shift and go to state 63

    variable_list                  shift and go to state 135
    variable                       shift and go to state 136

state 72

    (215) goto_statement -> GOTO . NUMBER

    NUMBER          shift and go to state 137


state 73

    (216) labeled_sentence -> NUMBER . COLON sentence

    COLON           shift and go to state 138


state 74

    (184) asm_statement -> ASM .

    SEMICOLON       reduce using rule 184 (asm_statement -> ASM .)
    ELSE            reduce using rule 184 (asm_statement -> ASM .)


state 75

    (24) label_declaration -> LABEL number_list . SEMICOLON
    (26) number_list -> number_list . COMMA NUMBER

    SEMICOLON       shift and go to state 139
    COMMA           shift and go to state 140


state 76

    (25) number_list -> NUMBER .

    SEMICOLON       reduce using rule 25 (number_list -> NUMBER .)
    COMMA           reduce using rule 25 (number_list -> NUMBER .)


state 77

    (27) const_declaration_block -> CONST const_list .
    (28) const_list -> const_list . const_declaration
    (30) const_declaration -> . ID EQUAL constant SEMICOLON
    (31) const_declaration -> . ID COLON data_type_list EQUAL constant SEMICOLON

    BEGIN           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    LABEL           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONST           reduce using rule 27 (const_declaration_block -> CONST const_list .)
    TYPE            reduce using rule 27 (const_declaration_block -> CONST const_list .)
    VAR             reduce using rule 27 (const_declaration_block -> CONST const_list .)
    CONSTRUCTOR     reduce using rule 27 (const_declaration_block -> CONST const_list .)
    DESTRUCTOR      reduce using rule 27 (const_declaration_block -> CONST const_list .)
    PROCEDURE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    FUNCTION        reduce using rule 27 (const_declaration_block -> CONST const_list .)
    IMPLEMENTATION  reduce using rule 27 (const_declaration_block -> CONST const_list .)
    INTERFACE       reduce using rule 27 (const_declaration_block -> CONST const_list .)
    ID              shift and go to state 79

    const_declaration              shift and go to state 141

state 78

    (29) const_list -> const_declaration .

    ID              reduce using rule 29 (const_list -> const_declaration .)
    BEGIN           reduce using rule 29 (const_list -> const_declaration .)
    LABEL           reduce using rule 29 (const_list -> const_declaration .)
    CONST           reduce using rule 29 (const_list -> const_declaration .)
    TYPE            reduce using rule 29 (const_list -> const_declaration .)
    VAR             reduce using rule 29 (const_list -> const_declaration .)
    CONSTRUCTOR     reduce using rule 29 (const_list -> const_declaration .)
    DESTRUCTOR      reduce using rule 29 (const_list -> const_declaration .)
    PROCEDURE       reduce using rule 29 (const_list -> const_declaration .)
    FUNCTION        reduce using rule 29 (const_list -> const_declaration .)
    IMPLEMENTATION  reduce using rule 29 (const_list -> const_declaration .)
    INTERFACE       reduce using rule 29 (const_list -> const_declaration .)


state 79

    (30) const_declaration -> ID . EQUAL constant SEMICOLON
    (31) const_declaration -> ID . COLON data_type_list EQUAL constant SEMICOLON

    EQUAL           shift and go to state 142
    COLON           shift and go to state 143


state 80

    (38) type_declaration_block -> TYPE type_list .
    (39) type_list -> type_list . type_declaration
    (41) type_declaration -> . ID EQUAL type_definition SEMICOLON

    BEGIN           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    LABEL           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONST           reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    TYPE            reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    VAR             reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    CONSTRUCTOR     reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    DESTRUCTOR      reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    PROCEDURE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    FUNCTION        reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    IMPLEMENTATION  reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    INTERFACE       reduce using rule 38 (type_declaration_block -> TYPE type_list .)
    ID              shift and go to state 82

    type_declaration               shift and go to state 144

state 81

    (40) type_list -> type_declaration .

    ID              reduce using rule 40 (type_list -> type_declaration .)
    BEGIN           reduce using rule 40 (type_list -> type_declaration .)
    LABEL           reduce using rule 40 (type_list -> type_declaration .)
    CONST           reduce using rule 40 (type_list -> type_declaration .)
    TYPE            reduce using rule 40 (type_list -> type_declaration .)
    VAR             reduce using rule 40 (type_list -> type_declaration .)
    CONSTRUCTOR     reduce using rule 40 (type_list -> type_declaration .)
    DESTRUCTOR      reduce using rule 40 (type_list -> type_declaration .)
    PROCEDURE       reduce using rule 40 (type_list -> type_declaration .)
    FUNCTION        reduce using rule 40 (type_list -> type_declaration .)
    IMPLEMENTATION  reduce using rule 40 (type_list -> type_declaration .)
    INTERFACE       reduce using rule 40 (type_list -> type_declaration .)


state 82

    (41) type_declaration -> ID . EQUAL type_definition SEMICOLON

    EQUAL           shift and go to state 145


state 83

    (110) var_declaration_block -> VAR var_list .
    (111) var_list -> var_list . var_declaration
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    LABEL           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    CONST           reduce using rule 110 (var_declaration_block -> VAR var_list .)
    TYPE            reduce using rule 110 (var_declaration_block -> VAR var_list .)
    VAR             reduce using rule 110 (var_declaration_block -> VAR var_list .)
    CONSTRUCTOR     reduce using rule 110 (var_declaration_block -> VAR var_list .)
    DESTRUCTOR      reduce using rule 110 (var_declaration_block -> VAR var_list .)
    PROCEDURE       reduce using rule 110 (var_declaration_block -> VAR var_list .)
    FUNCTION        reduce using rule 110 (var_declaration_block -> VAR var_list .)
    IMPLEMENTATION  reduce using rule 110 (var_declaration_block -> VAR var_list .)
    INTERFACE       reduce using rule 110 (var_declaration_block -> VAR var_list .)
    ID              shift and go to state 13

    var_declaration                shift and go to state 146
    id_list                        shift and go to state 85

state 84

    (112) var_list -> var_declaration .

    ID              reduce using rule 112 (var_list -> var_declaration .)
    BEGIN           reduce using rule 112 (var_list -> var_declaration .)
    LABEL           reduce using rule 112 (var_list -> var_declaration .)
    CONST           reduce using rule 112 (var_list -> var_declaration .)
    TYPE            reduce using rule 112 (var_list -> var_declaration .)
    VAR             reduce using rule 112 (var_list -> var_declaration .)
    CONSTRUCTOR     reduce using rule 112 (var_list -> var_declaration .)
    DESTRUCTOR      reduce using rule 112 (var_list -> var_declaration .)
    PROCEDURE       reduce using rule 112 (var_list -> var_declaration .)
    FUNCTION        reduce using rule 112 (var_list -> var_declaration .)
    IMPLEMENTATION  reduce using rule 112 (var_list -> var_declaration .)
    INTERFACE       reduce using rule 112 (var_list -> var_declaration .)


state 85

    (113) var_declaration -> id_list . COLON type_definition SEMICOLON
    (114) var_declaration -> id_list . COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> id_list . COLON type_definition ABSOLUTE ID SEMICOLON
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 147
    COMMA           shift and go to state 44


state 86

    (116) procedure_declaration -> procedure_header SEMICOLON . directive SEMICOLON
    (117) procedure_declaration -> procedure_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154
    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    directive                      shift and go to state 148
    declaration_blocks             shift and go to state 149
    empty                          shift and go to state 11

state 87

    (125) function_declaration -> function_header SEMICOLON . directive
    (126) function_declaration -> function_header SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154
    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    directive                      shift and go to state 155
    declaration_blocks             shift and go to state 156
    empty                          shift and go to state 11

state 88

    (91) constructor_implementation -> CONSTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 157


state 89

    (92) destructor_implementation -> DESTRUCTOR ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    DOT             shift and go to state 158


state 90

    (93) method_implementation -> PROCEDURE ID . DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (118) procedure_header -> PROCEDURE ID . parameters
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    DOT             shift and go to state 159
    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 160
    empty                          shift and go to state 162

state 91

    (94) method_implementation -> FUNCTION ID . DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (127) function_header -> FUNCTION ID . parameters COLON data_type_list
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    DOT             shift and go to state 163
    LPAREN          shift and go to state 161
    COLON           reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 164
    empty                          shift and go to state 162

state 92

    (23) implementation_block -> IMPLEMENTATION declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONST           [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! TYPE            [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! VAR             [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 23 (implementation_block -> IMPLEMENTATION declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 93

    (22) interface_block -> INTERFACE declaration_blocks .
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for DESTRUCTOR resolved as shift
  ! shift/reduce conflict for PROCEDURE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IMPLEMENTATION resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
    BEGIN           reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .)
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

  ! LABEL           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONST           [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! TYPE            [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! VAR             [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! CONSTRUCTOR     [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! DESTRUCTOR      [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! PROCEDURE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! FUNCTION        [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! IMPLEMENTATION  [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]
  ! INTERFACE       [ reduce using rule 22 (interface_block -> INTERFACE declaration_blocks .) ]

    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 94

    (7) id_list -> id_list COMMA ID .

    SEMICOLON       reduce using rule 7 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 7 (id_list -> id_list COMMA ID .)
    COLON           reduce using rule 7 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 7 (id_list -> id_list COMMA ID .)


state 95

    (167) compound_statement -> BEGIN sentences_list END .

    DOT             reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)
    SEMICOLON       reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)
    ELSE            reduce using rule 167 (compound_statement -> BEGIN sentences_list END .)


state 96

    (168) sentences_list -> sentences_list sentence . SEMICOLON

    SEMICOLON       shift and go to state 165


state 97

    (183) sentence -> empty .

    SEMICOLON       reduce using rule 183 (sentence -> empty .)
    ELSE            reduce using rule 183 (sentence -> empty .)


state 98

    (169) sentences_list -> sentence SEMICOLON .

    END             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    ID              reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    NEW             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    DISPOSE         reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    BEGIN           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    IF              reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    CASE            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    FOR             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    WHILE           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    REPEAT          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    WITH            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    GOTO            reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    NUMBER          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    ASM             reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    LPAREN          reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    SEMICOLON       reduce using rule 169 (sentences_list -> sentence SEMICOLON .)
    UNTIL           reduce using rule 169 (sentences_list -> sentence SEMICOLON .)


state 99

    (185) assignment -> variable ASIGNATION . expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    variable                       shift and go to state 120
    expression                     shift and go to state 166
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 100

    (190) procedure_call -> variable DOT . ID LPAREN expression_list RPAREN
    (191) procedure_call -> variable DOT . ID LPAREN RPAREN
    (263) variable -> variable DOT . ID

    ID              shift and go to state 167


state 101

    (264) variable -> variable LBRACKET . expression_list RBRACKET
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    variable                       shift and go to state 120
    expression_list                shift and go to state 168
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 102

    (265) variable -> variable CARET .

    ASIGNATION      reduce using rule 265 (variable -> variable CARET .)
    DOT             reduce using rule 265 (variable -> variable CARET .)
    LBRACKET        reduce using rule 265 (variable -> variable CARET .)
    CARET           reduce using rule 265 (variable -> variable CARET .)
    RPAREN          reduce using rule 265 (variable -> variable CARET .)
    TIMES           reduce using rule 265 (variable -> variable CARET .)
    DIVIDE          reduce using rule 265 (variable -> variable CARET .)
    DIV             reduce using rule 265 (variable -> variable CARET .)
    MOD             reduce using rule 265 (variable -> variable CARET .)
    SHL             reduce using rule 265 (variable -> variable CARET .)
    SHR             reduce using rule 265 (variable -> variable CARET .)
    PLUS            reduce using rule 265 (variable -> variable CARET .)
    MINUS           reduce using rule 265 (variable -> variable CARET .)
    EQUAL           reduce using rule 265 (variable -> variable CARET .)
    DISTINT         reduce using rule 265 (variable -> variable CARET .)
    LESS            reduce using rule 265 (variable -> variable CARET .)
    LESSEQUAL       reduce using rule 265 (variable -> variable CARET .)
    GREATER         reduce using rule 265 (variable -> variable CARET .)
    GREATEREQUAL    reduce using rule 265 (variable -> variable CARET .)
    IN              reduce using rule 265 (variable -> variable CARET .)
    AND             reduce using rule 265 (variable -> variable CARET .)
    THEN            reduce using rule 265 (variable -> variable CARET .)
    OR              reduce using rule 265 (variable -> variable CARET .)
    XOR             reduce using rule 265 (variable -> variable CARET .)
    OF              reduce using rule 265 (variable -> variable CARET .)
    DO              reduce using rule 265 (variable -> variable CARET .)
    COMMA           reduce using rule 265 (variable -> variable CARET .)
    SEMICOLON       reduce using rule 265 (variable -> variable CARET .)
    ELSE            reduce using rule 265 (variable -> variable CARET .)
    RBRACKET        reduce using rule 265 (variable -> variable CARET .)
    DOBLEDOT        reduce using rule 265 (variable -> variable CARET .)
    TO              reduce using rule 265 (variable -> variable CARET .)
    DOWNTO          reduce using rule 265 (variable -> variable CARET .)


state 103

    (186) assignment -> ID ASIGNATION . expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 170
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 104

    (188) procedure_call -> ID LPAREN . expression_list RPAREN
    (189) procedure_call -> ID LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 172
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression_list                shift and go to state 171
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 105

    (266) variable -> LPAREN variable . RPAREN CARET
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET

    RPAREN          shift and go to state 173
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102


state 106

    (262) variable -> ID .

    RPAREN          reduce using rule 262 (variable -> ID .)
    DOT             reduce using rule 262 (variable -> ID .)
    LBRACKET        reduce using rule 262 (variable -> ID .)
    CARET           reduce using rule 262 (variable -> ID .)
    DO              reduce using rule 262 (variable -> ID .)
    COMMA           reduce using rule 262 (variable -> ID .)


state 107

    (192) procedure_call -> NEW LPAREN . expression_list RPAREN
    (193) procedure_call -> NEW LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 176
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression_list                shift and go to state 175
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 108

    (194) procedure_call -> DISPOSE LPAREN . expression_list RPAREN
    (195) procedure_call -> DISPOSE LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 178
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression_list                shift and go to state 177
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 109

    (196) if_statement -> IF expression . THEN sentence
    (197) if_statement -> IF expression . THEN sentence ELSE sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    THEN            shift and go to state 179
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 110

    (220) expression -> simple_expression .
    (221) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 220 (expression -> simple_expression .)
    OR              reduce using rule 220 (expression -> simple_expression .)
    XOR             reduce using rule 220 (expression -> simple_expression .)
    OF              reduce using rule 220 (expression -> simple_expression .)
    DO              reduce using rule 220 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 220 (expression -> simple_expression .)
    ELSE            reduce using rule 220 (expression -> simple_expression .)
    RBRACKET        reduce using rule 220 (expression -> simple_expression .)
    COMMA           reduce using rule 220 (expression -> simple_expression .)
    RPAREN          reduce using rule 220 (expression -> simple_expression .)
    DOBLEDOT        reduce using rule 220 (expression -> simple_expression .)
    TO              reduce using rule 220 (expression -> simple_expression .)
    DOWNTO          reduce using rule 220 (expression -> simple_expression .)
    AND             shift and go to state 182


state 111

    (222) simple_expression -> relational_expression .
    (223) relational_expression -> relational_expression . relational_operator additive_expression
    (225) relational_operator -> . EQUAL
    (226) relational_operator -> . DISTINT
    (227) relational_operator -> . LESS
    (228) relational_operator -> . LESSEQUAL
    (229) relational_operator -> . GREATER
    (230) relational_operator -> . GREATEREQUAL
    (231) relational_operator -> . IN

    AND             reduce using rule 222 (simple_expression -> relational_expression .)
    THEN            reduce using rule 222 (simple_expression -> relational_expression .)
    OR              reduce using rule 222 (simple_expression -> relational_expression .)
    XOR             reduce using rule 222 (simple_expression -> relational_expression .)
    OF              reduce using rule 222 (simple_expression -> relational_expression .)
    DO              reduce using rule 222 (simple_expression -> relational_expression .)
    SEMICOLON       reduce using rule 222 (simple_expression -> relational_expression .)
    ELSE            reduce using rule 222 (simple_expression -> relational_expression .)
    RBRACKET        reduce using rule 222 (simple_expression -> relational_expression .)
    COMMA           reduce using rule 222 (simple_expression -> relational_expression .)
    RPAREN          reduce using rule 222 (simple_expression -> relational_expression .)
    DOBLEDOT        reduce using rule 222 (simple_expression -> relational_expression .)
    TO              reduce using rule 222 (simple_expression -> relational_expression .)
    DOWNTO          reduce using rule 222 (simple_expression -> relational_expression .)
    EQUAL           shift and go to state 184
    DISTINT         shift and go to state 185
    LESS            shift and go to state 186
    LESSEQUAL       shift and go to state 187
    GREATER         shift and go to state 188
    GREATEREQUAL    shift and go to state 189
    IN              shift and go to state 190

    relational_operator            shift and go to state 183

state 112

    (224) relational_expression -> additive_expression .
    (232) additive_expression -> additive_expression . PLUS multiplicative_expression
    (233) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 224 (relational_expression -> additive_expression .)
    DISTINT         reduce using rule 224 (relational_expression -> additive_expression .)
    LESS            reduce using rule 224 (relational_expression -> additive_expression .)
    LESSEQUAL       reduce using rule 224 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 224 (relational_expression -> additive_expression .)
    GREATEREQUAL    reduce using rule 224 (relational_expression -> additive_expression .)
    IN              reduce using rule 224 (relational_expression -> additive_expression .)
    AND             reduce using rule 224 (relational_expression -> additive_expression .)
    THEN            reduce using rule 224 (relational_expression -> additive_expression .)
    OR              reduce using rule 224 (relational_expression -> additive_expression .)
    XOR             reduce using rule 224 (relational_expression -> additive_expression .)
    OF              reduce using rule 224 (relational_expression -> additive_expression .)
    DO              reduce using rule 224 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 224 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 224 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 224 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 224 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 224 (relational_expression -> additive_expression .)
    DOBLEDOT        reduce using rule 224 (relational_expression -> additive_expression .)
    TO              reduce using rule 224 (relational_expression -> additive_expression .)
    DOWNTO          reduce using rule 224 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192


state 113

    (244) unary_expression -> PLUS . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 193
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 114

    (234) additive_expression -> multiplicative_expression .
    (235) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (236) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (237) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (238) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (239) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (240) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 234 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 234 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 234 (additive_expression -> multiplicative_expression .)
    DISTINT         reduce using rule 234 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 234 (additive_expression -> multiplicative_expression .)
    LESSEQUAL       reduce using rule 234 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 234 (additive_expression -> multiplicative_expression .)
    GREATEREQUAL    reduce using rule 234 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 234 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 234 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 234 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 234 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 234 (additive_expression -> multiplicative_expression .)
    OF              reduce using rule 234 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 234 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 234 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 234 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 234 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 234 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 234 (additive_expression -> multiplicative_expression .)
    DOBLEDOT        reduce using rule 234 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 234 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 234 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 194
    DIVIDE          shift and go to state 195
    DIV             shift and go to state 196
    MOD             shift and go to state 197
    SHL             shift and go to state 198
    SHR             shift and go to state 199


state 115

    (243) unary_expression -> MINUS . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 200
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 116

    (241) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    SHL             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    SHR             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 241 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 241 (multiplicative_expression -> unary_expression .)
    EQUAL           reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DISTINT         reduce using rule 241 (multiplicative_expression -> unary_expression .)
    LESS            reduce using rule 241 (multiplicative_expression -> unary_expression .)
    LESSEQUAL       reduce using rule 241 (multiplicative_expression -> unary_expression .)
    GREATER         reduce using rule 241 (multiplicative_expression -> unary_expression .)
    GREATEREQUAL    reduce using rule 241 (multiplicative_expression -> unary_expression .)
    IN              reduce using rule 241 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    THEN            reduce using rule 241 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 241 (multiplicative_expression -> unary_expression .)
    XOR             reduce using rule 241 (multiplicative_expression -> unary_expression .)
    OF              reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DO              reduce using rule 241 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 241 (multiplicative_expression -> unary_expression .)
    ELSE            reduce using rule 241 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 241 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 241 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DOBLEDOT        reduce using rule 241 (multiplicative_expression -> unary_expression .)
    TO              reduce using rule 241 (multiplicative_expression -> unary_expression .)
    DOWNTO          reduce using rule 241 (multiplicative_expression -> unary_expression .)


state 117

    (242) unary_expression -> NOT . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 118

    (245) unary_expression -> ADDRESS_OF . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 119

    (246) unary_expression -> primary_expression .

    TIMES           reduce using rule 246 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 246 (unary_expression -> primary_expression .)
    DIV             reduce using rule 246 (unary_expression -> primary_expression .)
    MOD             reduce using rule 246 (unary_expression -> primary_expression .)
    SHL             reduce using rule 246 (unary_expression -> primary_expression .)
    SHR             reduce using rule 246 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 246 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 246 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 246 (unary_expression -> primary_expression .)
    DISTINT         reduce using rule 246 (unary_expression -> primary_expression .)
    LESS            reduce using rule 246 (unary_expression -> primary_expression .)
    LESSEQUAL       reduce using rule 246 (unary_expression -> primary_expression .)
    GREATER         reduce using rule 246 (unary_expression -> primary_expression .)
    GREATEREQUAL    reduce using rule 246 (unary_expression -> primary_expression .)
    IN              reduce using rule 246 (unary_expression -> primary_expression .)
    AND             reduce using rule 246 (unary_expression -> primary_expression .)
    THEN            reduce using rule 246 (unary_expression -> primary_expression .)
    OR              reduce using rule 246 (unary_expression -> primary_expression .)
    XOR             reduce using rule 246 (unary_expression -> primary_expression .)
    OF              reduce using rule 246 (unary_expression -> primary_expression .)
    DO              reduce using rule 246 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 246 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 246 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 246 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 246 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 246 (unary_expression -> primary_expression .)
    DOBLEDOT        reduce using rule 246 (unary_expression -> primary_expression .)
    TO              reduce using rule 246 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 246 (unary_expression -> primary_expression .)


state 120

    (247) primary_expression -> variable .
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET
    (269) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (270) function_call -> variable . DOT ID LPAREN RPAREN

    TIMES           reduce using rule 247 (primary_expression -> variable .)
    DIVIDE          reduce using rule 247 (primary_expression -> variable .)
    DIV             reduce using rule 247 (primary_expression -> variable .)
    MOD             reduce using rule 247 (primary_expression -> variable .)
    SHL             reduce using rule 247 (primary_expression -> variable .)
    SHR             reduce using rule 247 (primary_expression -> variable .)
    PLUS            reduce using rule 247 (primary_expression -> variable .)
    MINUS           reduce using rule 247 (primary_expression -> variable .)
    EQUAL           reduce using rule 247 (primary_expression -> variable .)
    DISTINT         reduce using rule 247 (primary_expression -> variable .)
    LESS            reduce using rule 247 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 247 (primary_expression -> variable .)
    GREATER         reduce using rule 247 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 247 (primary_expression -> variable .)
    IN              reduce using rule 247 (primary_expression -> variable .)
    AND             reduce using rule 247 (primary_expression -> variable .)
    THEN            reduce using rule 247 (primary_expression -> variable .)
    OR              reduce using rule 247 (primary_expression -> variable .)
    XOR             reduce using rule 247 (primary_expression -> variable .)
    OF              reduce using rule 247 (primary_expression -> variable .)
    DO              reduce using rule 247 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 247 (primary_expression -> variable .)
    ELSE            reduce using rule 247 (primary_expression -> variable .)
    RBRACKET        reduce using rule 247 (primary_expression -> variable .)
    COMMA           reduce using rule 247 (primary_expression -> variable .)
    RPAREN          reduce using rule 247 (primary_expression -> variable .)
    DOBLEDOT        reduce using rule 247 (primary_expression -> variable .)
    TO              reduce using rule 247 (primary_expression -> variable .)
    DOWNTO          reduce using rule 247 (primary_expression -> variable .)
    DOT             shift and go to state 203
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102


state 121

    (248) primary_expression -> NUMBER .

    TIMES           reduce using rule 248 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 248 (primary_expression -> NUMBER .)
    DIV             reduce using rule 248 (primary_expression -> NUMBER .)
    MOD             reduce using rule 248 (primary_expression -> NUMBER .)
    SHL             reduce using rule 248 (primary_expression -> NUMBER .)
    SHR             reduce using rule 248 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 248 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 248 (primary_expression -> NUMBER .)
    EQUAL           reduce using rule 248 (primary_expression -> NUMBER .)
    DISTINT         reduce using rule 248 (primary_expression -> NUMBER .)
    LESS            reduce using rule 248 (primary_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 248 (primary_expression -> NUMBER .)
    GREATER         reduce using rule 248 (primary_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 248 (primary_expression -> NUMBER .)
    IN              reduce using rule 248 (primary_expression -> NUMBER .)
    AND             reduce using rule 248 (primary_expression -> NUMBER .)
    THEN            reduce using rule 248 (primary_expression -> NUMBER .)
    OR              reduce using rule 248 (primary_expression -> NUMBER .)
    XOR             reduce using rule 248 (primary_expression -> NUMBER .)
    OF              reduce using rule 248 (primary_expression -> NUMBER .)
    DO              reduce using rule 248 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 248 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 248 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 248 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 248 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 248 (primary_expression -> NUMBER .)
    DOBLEDOT        reduce using rule 248 (primary_expression -> NUMBER .)
    TO              reduce using rule 248 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 248 (primary_expression -> NUMBER .)


state 122

    (249) primary_expression -> STRING .

    TIMES           reduce using rule 249 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 249 (primary_expression -> STRING .)
    DIV             reduce using rule 249 (primary_expression -> STRING .)
    MOD             reduce using rule 249 (primary_expression -> STRING .)
    SHL             reduce using rule 249 (primary_expression -> STRING .)
    SHR             reduce using rule 249 (primary_expression -> STRING .)
    PLUS            reduce using rule 249 (primary_expression -> STRING .)
    MINUS           reduce using rule 249 (primary_expression -> STRING .)
    EQUAL           reduce using rule 249 (primary_expression -> STRING .)
    DISTINT         reduce using rule 249 (primary_expression -> STRING .)
    LESS            reduce using rule 249 (primary_expression -> STRING .)
    LESSEQUAL       reduce using rule 249 (primary_expression -> STRING .)
    GREATER         reduce using rule 249 (primary_expression -> STRING .)
    GREATEREQUAL    reduce using rule 249 (primary_expression -> STRING .)
    IN              reduce using rule 249 (primary_expression -> STRING .)
    AND             reduce using rule 249 (primary_expression -> STRING .)
    THEN            reduce using rule 249 (primary_expression -> STRING .)
    OR              reduce using rule 249 (primary_expression -> STRING .)
    XOR             reduce using rule 249 (primary_expression -> STRING .)
    OF              reduce using rule 249 (primary_expression -> STRING .)
    DO              reduce using rule 249 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 249 (primary_expression -> STRING .)
    ELSE            reduce using rule 249 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 249 (primary_expression -> STRING .)
    COMMA           reduce using rule 249 (primary_expression -> STRING .)
    RPAREN          reduce using rule 249 (primary_expression -> STRING .)
    DOBLEDOT        reduce using rule 249 (primary_expression -> STRING .)
    TO              reduce using rule 249 (primary_expression -> STRING .)
    DOWNTO          reduce using rule 249 (primary_expression -> STRING .)


state 123

    (250) primary_expression -> TRUE .

    TIMES           reduce using rule 250 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 250 (primary_expression -> TRUE .)
    DIV             reduce using rule 250 (primary_expression -> TRUE .)
    MOD             reduce using rule 250 (primary_expression -> TRUE .)
    SHL             reduce using rule 250 (primary_expression -> TRUE .)
    SHR             reduce using rule 250 (primary_expression -> TRUE .)
    PLUS            reduce using rule 250 (primary_expression -> TRUE .)
    MINUS           reduce using rule 250 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 250 (primary_expression -> TRUE .)
    DISTINT         reduce using rule 250 (primary_expression -> TRUE .)
    LESS            reduce using rule 250 (primary_expression -> TRUE .)
    LESSEQUAL       reduce using rule 250 (primary_expression -> TRUE .)
    GREATER         reduce using rule 250 (primary_expression -> TRUE .)
    GREATEREQUAL    reduce using rule 250 (primary_expression -> TRUE .)
    IN              reduce using rule 250 (primary_expression -> TRUE .)
    AND             reduce using rule 250 (primary_expression -> TRUE .)
    THEN            reduce using rule 250 (primary_expression -> TRUE .)
    OR              reduce using rule 250 (primary_expression -> TRUE .)
    XOR             reduce using rule 250 (primary_expression -> TRUE .)
    OF              reduce using rule 250 (primary_expression -> TRUE .)
    DO              reduce using rule 250 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 250 (primary_expression -> TRUE .)
    ELSE            reduce using rule 250 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 250 (primary_expression -> TRUE .)
    COMMA           reduce using rule 250 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 250 (primary_expression -> TRUE .)
    DOBLEDOT        reduce using rule 250 (primary_expression -> TRUE .)
    TO              reduce using rule 250 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 250 (primary_expression -> TRUE .)


state 124

    (251) primary_expression -> FALSE .

    TIMES           reduce using rule 251 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 251 (primary_expression -> FALSE .)
    DIV             reduce using rule 251 (primary_expression -> FALSE .)
    MOD             reduce using rule 251 (primary_expression -> FALSE .)
    SHL             reduce using rule 251 (primary_expression -> FALSE .)
    SHR             reduce using rule 251 (primary_expression -> FALSE .)
    PLUS            reduce using rule 251 (primary_expression -> FALSE .)
    MINUS           reduce using rule 251 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 251 (primary_expression -> FALSE .)
    DISTINT         reduce using rule 251 (primary_expression -> FALSE .)
    LESS            reduce using rule 251 (primary_expression -> FALSE .)
    LESSEQUAL       reduce using rule 251 (primary_expression -> FALSE .)
    GREATER         reduce using rule 251 (primary_expression -> FALSE .)
    GREATEREQUAL    reduce using rule 251 (primary_expression -> FALSE .)
    IN              reduce using rule 251 (primary_expression -> FALSE .)
    AND             reduce using rule 251 (primary_expression -> FALSE .)
    THEN            reduce using rule 251 (primary_expression -> FALSE .)
    OR              reduce using rule 251 (primary_expression -> FALSE .)
    XOR             reduce using rule 251 (primary_expression -> FALSE .)
    OF              reduce using rule 251 (primary_expression -> FALSE .)
    DO              reduce using rule 251 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 251 (primary_expression -> FALSE .)
    ELSE            reduce using rule 251 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 251 (primary_expression -> FALSE .)
    COMMA           reduce using rule 251 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 251 (primary_expression -> FALSE .)
    DOBLEDOT        reduce using rule 251 (primary_expression -> FALSE .)
    TO              reduce using rule 251 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 251 (primary_expression -> FALSE .)


state 125

    (252) primary_expression -> NIL .

    TIMES           reduce using rule 252 (primary_expression -> NIL .)
    DIVIDE          reduce using rule 252 (primary_expression -> NIL .)
    DIV             reduce using rule 252 (primary_expression -> NIL .)
    MOD             reduce using rule 252 (primary_expression -> NIL .)
    SHL             reduce using rule 252 (primary_expression -> NIL .)
    SHR             reduce using rule 252 (primary_expression -> NIL .)
    PLUS            reduce using rule 252 (primary_expression -> NIL .)
    MINUS           reduce using rule 252 (primary_expression -> NIL .)
    EQUAL           reduce using rule 252 (primary_expression -> NIL .)
    DISTINT         reduce using rule 252 (primary_expression -> NIL .)
    LESS            reduce using rule 252 (primary_expression -> NIL .)
    LESSEQUAL       reduce using rule 252 (primary_expression -> NIL .)
    GREATER         reduce using rule 252 (primary_expression -> NIL .)
    GREATEREQUAL    reduce using rule 252 (primary_expression -> NIL .)
    IN              reduce using rule 252 (primary_expression -> NIL .)
    AND             reduce using rule 252 (primary_expression -> NIL .)
    THEN            reduce using rule 252 (primary_expression -> NIL .)
    OR              reduce using rule 252 (primary_expression -> NIL .)
    XOR             reduce using rule 252 (primary_expression -> NIL .)
    OF              reduce using rule 252 (primary_expression -> NIL .)
    DO              reduce using rule 252 (primary_expression -> NIL .)
    SEMICOLON       reduce using rule 252 (primary_expression -> NIL .)
    ELSE            reduce using rule 252 (primary_expression -> NIL .)
    RBRACKET        reduce using rule 252 (primary_expression -> NIL .)
    COMMA           reduce using rule 252 (primary_expression -> NIL .)
    RPAREN          reduce using rule 252 (primary_expression -> NIL .)
    DOBLEDOT        reduce using rule 252 (primary_expression -> NIL .)
    TO              reduce using rule 252 (primary_expression -> NIL .)
    DOWNTO          reduce using rule 252 (primary_expression -> NIL .)


state 126

    (253) primary_expression -> LPAREN . expression RPAREN
    (266) variable -> LPAREN . variable RPAREN CARET
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 129
    LPAREN          shift and go to state 204
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 205
    variable                       shift and go to state 206
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 127

    (254) primary_expression -> function_call .

    TIMES           reduce using rule 254 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 254 (primary_expression -> function_call .)
    DIV             reduce using rule 254 (primary_expression -> function_call .)
    MOD             reduce using rule 254 (primary_expression -> function_call .)
    SHL             reduce using rule 254 (primary_expression -> function_call .)
    SHR             reduce using rule 254 (primary_expression -> function_call .)
    PLUS            reduce using rule 254 (primary_expression -> function_call .)
    MINUS           reduce using rule 254 (primary_expression -> function_call .)
    EQUAL           reduce using rule 254 (primary_expression -> function_call .)
    DISTINT         reduce using rule 254 (primary_expression -> function_call .)
    LESS            reduce using rule 254 (primary_expression -> function_call .)
    LESSEQUAL       reduce using rule 254 (primary_expression -> function_call .)
    GREATER         reduce using rule 254 (primary_expression -> function_call .)
    GREATEREQUAL    reduce using rule 254 (primary_expression -> function_call .)
    IN              reduce using rule 254 (primary_expression -> function_call .)
    AND             reduce using rule 254 (primary_expression -> function_call .)
    THEN            reduce using rule 254 (primary_expression -> function_call .)
    OR              reduce using rule 254 (primary_expression -> function_call .)
    XOR             reduce using rule 254 (primary_expression -> function_call .)
    OF              reduce using rule 254 (primary_expression -> function_call .)
    DO              reduce using rule 254 (primary_expression -> function_call .)
    SEMICOLON       reduce using rule 254 (primary_expression -> function_call .)
    ELSE            reduce using rule 254 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 254 (primary_expression -> function_call .)
    COMMA           reduce using rule 254 (primary_expression -> function_call .)
    RPAREN          reduce using rule 254 (primary_expression -> function_call .)
    DOBLEDOT        reduce using rule 254 (primary_expression -> function_call .)
    TO              reduce using rule 254 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 254 (primary_expression -> function_call .)


state 128

    (255) primary_expression -> set_constructor .

    TIMES           reduce using rule 255 (primary_expression -> set_constructor .)
    DIVIDE          reduce using rule 255 (primary_expression -> set_constructor .)
    DIV             reduce using rule 255 (primary_expression -> set_constructor .)
    MOD             reduce using rule 255 (primary_expression -> set_constructor .)
    SHL             reduce using rule 255 (primary_expression -> set_constructor .)
    SHR             reduce using rule 255 (primary_expression -> set_constructor .)
    PLUS            reduce using rule 255 (primary_expression -> set_constructor .)
    MINUS           reduce using rule 255 (primary_expression -> set_constructor .)
    EQUAL           reduce using rule 255 (primary_expression -> set_constructor .)
    DISTINT         reduce using rule 255 (primary_expression -> set_constructor .)
    LESS            reduce using rule 255 (primary_expression -> set_constructor .)
    LESSEQUAL       reduce using rule 255 (primary_expression -> set_constructor .)
    GREATER         reduce using rule 255 (primary_expression -> set_constructor .)
    GREATEREQUAL    reduce using rule 255 (primary_expression -> set_constructor .)
    IN              reduce using rule 255 (primary_expression -> set_constructor .)
    AND             reduce using rule 255 (primary_expression -> set_constructor .)
    THEN            reduce using rule 255 (primary_expression -> set_constructor .)
    OR              reduce using rule 255 (primary_expression -> set_constructor .)
    XOR             reduce using rule 255 (primary_expression -> set_constructor .)
    OF              reduce using rule 255 (primary_expression -> set_constructor .)
    DO              reduce using rule 255 (primary_expression -> set_constructor .)
    SEMICOLON       reduce using rule 255 (primary_expression -> set_constructor .)
    ELSE            reduce using rule 255 (primary_expression -> set_constructor .)
    RBRACKET        reduce using rule 255 (primary_expression -> set_constructor .)
    COMMA           reduce using rule 255 (primary_expression -> set_constructor .)
    RPAREN          reduce using rule 255 (primary_expression -> set_constructor .)
    DOBLEDOT        reduce using rule 255 (primary_expression -> set_constructor .)
    TO              reduce using rule 255 (primary_expression -> set_constructor .)
    DOWNTO          reduce using rule 255 (primary_expression -> set_constructor .)


state 129

    (262) variable -> ID .
    (267) function_call -> ID . LPAREN expression_list RPAREN
    (268) function_call -> ID . LPAREN RPAREN

    DOT             reduce using rule 262 (variable -> ID .)
    LBRACKET        reduce using rule 262 (variable -> ID .)
    CARET           reduce using rule 262 (variable -> ID .)
    TIMES           reduce using rule 262 (variable -> ID .)
    DIVIDE          reduce using rule 262 (variable -> ID .)
    DIV             reduce using rule 262 (variable -> ID .)
    MOD             reduce using rule 262 (variable -> ID .)
    SHL             reduce using rule 262 (variable -> ID .)
    SHR             reduce using rule 262 (variable -> ID .)
    PLUS            reduce using rule 262 (variable -> ID .)
    MINUS           reduce using rule 262 (variable -> ID .)
    EQUAL           reduce using rule 262 (variable -> ID .)
    DISTINT         reduce using rule 262 (variable -> ID .)
    LESS            reduce using rule 262 (variable -> ID .)
    LESSEQUAL       reduce using rule 262 (variable -> ID .)
    GREATER         reduce using rule 262 (variable -> ID .)
    GREATEREQUAL    reduce using rule 262 (variable -> ID .)
    IN              reduce using rule 262 (variable -> ID .)
    AND             reduce using rule 262 (variable -> ID .)
    THEN            reduce using rule 262 (variable -> ID .)
    OR              reduce using rule 262 (variable -> ID .)
    XOR             reduce using rule 262 (variable -> ID .)
    OF              reduce using rule 262 (variable -> ID .)
    DO              reduce using rule 262 (variable -> ID .)
    SEMICOLON       reduce using rule 262 (variable -> ID .)
    ELSE            reduce using rule 262 (variable -> ID .)
    RBRACKET        reduce using rule 262 (variable -> ID .)
    COMMA           reduce using rule 262 (variable -> ID .)
    RPAREN          reduce using rule 262 (variable -> ID .)
    DOBLEDOT        reduce using rule 262 (variable -> ID .)
    TO              reduce using rule 262 (variable -> ID .)
    DOWNTO          reduce using rule 262 (variable -> ID .)
    LPAREN          shift and go to state 207


state 130

    (260) set_constructor -> LBRACKET . set_item_list RBRACKET
    (261) set_constructor -> LBRACKET . RBRACKET
    (258) set_item_list -> . set_item
    (259) set_item_list -> . set_item_list COMMA set_item
    (256) set_item -> . expression
    (257) set_item -> . expression DOBLEDOT expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 209
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    set_item_list                  shift and go to state 208
    set_item                       shift and go to state 210
    expression                     shift and go to state 211
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 131

    (198) case_statement -> CASE expression . OF case_list END
    (199) case_statement -> CASE expression . OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> CASE expression . OF case_list ELSE sentences_list END
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    OF              shift and go to state 212
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 132

    (207) for_statement -> FOR ID . ASIGNATION expression TO expression DO sentence
    (208) for_statement -> FOR ID . ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> FOR ID . IN expression DO sentence

    ASIGNATION      shift and go to state 213
    IN              shift and go to state 214


state 133

    (210) while_statement -> WHILE expression . DO sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    DO              shift and go to state 215
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 134

    (211) repeat_statement -> REPEAT sentences_list . UNTIL expression
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    UNTIL           shift and go to state 216
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 135

    (212) with_statement -> WITH variable_list . DO sentence
    (214) variable_list -> variable_list . COMMA variable

    DO              shift and go to state 217
    COMMA           shift and go to state 218


state 136

    (213) variable_list -> variable .
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET

    DO              reduce using rule 213 (variable_list -> variable .)
    COMMA           reduce using rule 213 (variable_list -> variable .)
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102


state 137

    (215) goto_statement -> GOTO NUMBER .

    SEMICOLON       reduce using rule 215 (goto_statement -> GOTO NUMBER .)
    ELSE            reduce using rule 215 (goto_statement -> GOTO NUMBER .)


state 138

    (216) labeled_sentence -> NUMBER COLON . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 219
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 139

    (24) label_declaration -> LABEL number_list SEMICOLON .

    BEGIN           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    LABEL           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONST           reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    TYPE            reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    VAR             reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    CONSTRUCTOR     reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    DESTRUCTOR      reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    PROCEDURE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    FUNCTION        reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    IMPLEMENTATION  reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)
    INTERFACE       reduce using rule 24 (label_declaration -> LABEL number_list SEMICOLON .)


state 140

    (26) number_list -> number_list COMMA . NUMBER

    NUMBER          shift and go to state 220


state 141

    (28) const_list -> const_list const_declaration .

    ID              reduce using rule 28 (const_list -> const_list const_declaration .)
    BEGIN           reduce using rule 28 (const_list -> const_list const_declaration .)
    LABEL           reduce using rule 28 (const_list -> const_list const_declaration .)
    CONST           reduce using rule 28 (const_list -> const_list const_declaration .)
    TYPE            reduce using rule 28 (const_list -> const_list const_declaration .)
    VAR             reduce using rule 28 (const_list -> const_list const_declaration .)
    CONSTRUCTOR     reduce using rule 28 (const_list -> const_list const_declaration .)
    DESTRUCTOR      reduce using rule 28 (const_list -> const_list const_declaration .)
    PROCEDURE       reduce using rule 28 (const_list -> const_list const_declaration .)
    FUNCTION        reduce using rule 28 (const_list -> const_list const_declaration .)
    IMPLEMENTATION  reduce using rule 28 (const_list -> const_list const_declaration .)
    INTERFACE       reduce using rule 28 (const_list -> const_list const_declaration .)


state 142

    (30) const_declaration -> ID EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    constant                       shift and go to state 221

state 143

    (31) const_declaration -> ID COLON . data_type_list EQUAL constant SEMICOLON
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 229
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 144

    (39) type_list -> type_list type_declaration .

    ID              reduce using rule 39 (type_list -> type_list type_declaration .)
    BEGIN           reduce using rule 39 (type_list -> type_list type_declaration .)
    LABEL           reduce using rule 39 (type_list -> type_list type_declaration .)
    CONST           reduce using rule 39 (type_list -> type_list type_declaration .)
    TYPE            reduce using rule 39 (type_list -> type_list type_declaration .)
    VAR             reduce using rule 39 (type_list -> type_list type_declaration .)
    CONSTRUCTOR     reduce using rule 39 (type_list -> type_list type_declaration .)
    DESTRUCTOR      reduce using rule 39 (type_list -> type_list type_declaration .)
    PROCEDURE       reduce using rule 39 (type_list -> type_list type_declaration .)
    FUNCTION        reduce using rule 39 (type_list -> type_list type_declaration .)
    IMPLEMENTATION  reduce using rule 39 (type_list -> type_list type_declaration .)
    INTERFACE       reduce using rule 39 (type_list -> type_list type_declaration .)


state 145

    (41) type_declaration -> ID EQUAL . type_definition SEMICOLON
    (42) type_definition -> . data_type_list
    (43) type_definition -> . LPAREN id_list RPAREN
    (44) type_definition -> . NUMBER DOBLEDOT NUMBER
    (45) type_definition -> . CHAR DOBLEDOT CHAR
    (46) type_definition -> . ID DOBLEDOT ID
    (47) type_definition -> . record_type
    (48) type_definition -> . array_type
    (49) type_definition -> . set_type
    (50) type_definition -> . pointer_type
    (51) type_definition -> . file_type
    (52) type_definition -> . object_type
    (53) type_definition -> . string_type
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (69) set_type -> . SET OF set_range
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 261
    NUMBER          shift and go to state 262
    CHAR            shift and go to state 263
    ID              shift and go to state 258
    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    STRING          shift and go to state 242
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    RECORD          shift and go to state 255
    PACKED          shift and go to state 271
    ARRAY           shift and go to state 252
    SET             shift and go to state 256
    CARET           shift and go to state 254
    OBJECT          shift and go to state 257

    type_definition                shift and go to state 259
    data_type_list                 shift and go to state 260
    record_type                    shift and go to state 264
    array_type                     shift and go to state 265
    set_type                       shift and go to state 266
    pointer_type                   shift and go to state 267
    file_type                      shift and go to state 268
    object_type                    shift and go to state 269
    string_type                    shift and go to state 270

state 146

    (111) var_list -> var_list var_declaration .

    ID              reduce using rule 111 (var_list -> var_list var_declaration .)
    BEGIN           reduce using rule 111 (var_list -> var_list var_declaration .)
    LABEL           reduce using rule 111 (var_list -> var_list var_declaration .)
    CONST           reduce using rule 111 (var_list -> var_list var_declaration .)
    TYPE            reduce using rule 111 (var_list -> var_list var_declaration .)
    VAR             reduce using rule 111 (var_list -> var_list var_declaration .)
    CONSTRUCTOR     reduce using rule 111 (var_list -> var_list var_declaration .)
    DESTRUCTOR      reduce using rule 111 (var_list -> var_list var_declaration .)
    PROCEDURE       reduce using rule 111 (var_list -> var_list var_declaration .)
    FUNCTION        reduce using rule 111 (var_list -> var_list var_declaration .)
    IMPLEMENTATION  reduce using rule 111 (var_list -> var_list var_declaration .)
    INTERFACE       reduce using rule 111 (var_list -> var_list var_declaration .)


state 147

    (113) var_declaration -> id_list COLON . type_definition SEMICOLON
    (114) var_declaration -> id_list COLON . type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> id_list COLON . type_definition ABSOLUTE ID SEMICOLON
    (42) type_definition -> . data_type_list
    (43) type_definition -> . LPAREN id_list RPAREN
    (44) type_definition -> . NUMBER DOBLEDOT NUMBER
    (45) type_definition -> . CHAR DOBLEDOT CHAR
    (46) type_definition -> . ID DOBLEDOT ID
    (47) type_definition -> . record_type
    (48) type_definition -> . array_type
    (49) type_definition -> . set_type
    (50) type_definition -> . pointer_type
    (51) type_definition -> . file_type
    (52) type_definition -> . object_type
    (53) type_definition -> . string_type
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (69) set_type -> . SET OF set_range
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    LPAREN          shift and go to state 261
    NUMBER          shift and go to state 262
    CHAR            shift and go to state 263
    ID              shift and go to state 258
    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    STRING          shift and go to state 242
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    RECORD          shift and go to state 255
    PACKED          shift and go to state 271
    ARRAY           shift and go to state 252
    SET             shift and go to state 256
    CARET           shift and go to state 254
    OBJECT          shift and go to state 257

    type_definition                shift and go to state 272
    data_type_list                 shift and go to state 260
    record_type                    shift and go to state 264
    array_type                     shift and go to state 265
    set_type                       shift and go to state 266
    pointer_type                   shift and go to state 267
    file_type                      shift and go to state 268
    object_type                    shift and go to state 269
    string_type                    shift and go to state 270

state 148

    (116) procedure_declaration -> procedure_header SEMICOLON directive . SEMICOLON

    SEMICOLON       shift and go to state 273


state 149

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    procedure_header               shift and go to state 35
    compound_statement             shift and go to state 274
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    function_header                shift and go to state 36

state 150

    (119) directive -> FORWARD .

    SEMICOLON       reduce using rule 119 (directive -> FORWARD .)
    BEGIN           reduce using rule 119 (directive -> FORWARD .)
    LABEL           reduce using rule 119 (directive -> FORWARD .)
    CONST           reduce using rule 119 (directive -> FORWARD .)
    TYPE            reduce using rule 119 (directive -> FORWARD .)
    VAR             reduce using rule 119 (directive -> FORWARD .)
    CONSTRUCTOR     reduce using rule 119 (directive -> FORWARD .)
    DESTRUCTOR      reduce using rule 119 (directive -> FORWARD .)
    PROCEDURE       reduce using rule 119 (directive -> FORWARD .)
    FUNCTION        reduce using rule 119 (directive -> FORWARD .)
    IMPLEMENTATION  reduce using rule 119 (directive -> FORWARD .)
    INTERFACE       reduce using rule 119 (directive -> FORWARD .)
    END             reduce using rule 119 (directive -> FORWARD .)


state 151

    (120) directive -> EXTERNAL .
    (121) directive -> EXTERNAL . STRING

    SEMICOLON       reduce using rule 120 (directive -> EXTERNAL .)
    BEGIN           reduce using rule 120 (directive -> EXTERNAL .)
    LABEL           reduce using rule 120 (directive -> EXTERNAL .)
    CONST           reduce using rule 120 (directive -> EXTERNAL .)
    TYPE            reduce using rule 120 (directive -> EXTERNAL .)
    VAR             reduce using rule 120 (directive -> EXTERNAL .)
    CONSTRUCTOR     reduce using rule 120 (directive -> EXTERNAL .)
    DESTRUCTOR      reduce using rule 120 (directive -> EXTERNAL .)
    PROCEDURE       reduce using rule 120 (directive -> EXTERNAL .)
    FUNCTION        reduce using rule 120 (directive -> EXTERNAL .)
    IMPLEMENTATION  reduce using rule 120 (directive -> EXTERNAL .)
    INTERFACE       reduce using rule 120 (directive -> EXTERNAL .)
    END             reduce using rule 120 (directive -> EXTERNAL .)
    STRING          shift and go to state 275


state 152

    (122) directive -> ASM .

    SEMICOLON       reduce using rule 122 (directive -> ASM .)
    BEGIN           reduce using rule 122 (directive -> ASM .)
    LABEL           reduce using rule 122 (directive -> ASM .)
    CONST           reduce using rule 122 (directive -> ASM .)
    TYPE            reduce using rule 122 (directive -> ASM .)
    VAR             reduce using rule 122 (directive -> ASM .)
    CONSTRUCTOR     reduce using rule 122 (directive -> ASM .)
    DESTRUCTOR      reduce using rule 122 (directive -> ASM .)
    PROCEDURE       reduce using rule 122 (directive -> ASM .)
    FUNCTION        reduce using rule 122 (directive -> ASM .)
    IMPLEMENTATION  reduce using rule 122 (directive -> ASM .)
    INTERFACE       reduce using rule 122 (directive -> ASM .)
    END             reduce using rule 122 (directive -> ASM .)


state 153

    (123) directive -> INLINE .

    SEMICOLON       reduce using rule 123 (directive -> INLINE .)
    BEGIN           reduce using rule 123 (directive -> INLINE .)
    LABEL           reduce using rule 123 (directive -> INLINE .)
    CONST           reduce using rule 123 (directive -> INLINE .)
    TYPE            reduce using rule 123 (directive -> INLINE .)
    VAR             reduce using rule 123 (directive -> INLINE .)
    CONSTRUCTOR     reduce using rule 123 (directive -> INLINE .)
    DESTRUCTOR      reduce using rule 123 (directive -> INLINE .)
    PROCEDURE       reduce using rule 123 (directive -> INLINE .)
    FUNCTION        reduce using rule 123 (directive -> INLINE .)
    IMPLEMENTATION  reduce using rule 123 (directive -> INLINE .)
    INTERFACE       reduce using rule 123 (directive -> INLINE .)
    END             reduce using rule 123 (directive -> INLINE .)


state 154

    (124) directive -> VIRTUAL .

    SEMICOLON       reduce using rule 124 (directive -> VIRTUAL .)
    BEGIN           reduce using rule 124 (directive -> VIRTUAL .)
    LABEL           reduce using rule 124 (directive -> VIRTUAL .)
    CONST           reduce using rule 124 (directive -> VIRTUAL .)
    TYPE            reduce using rule 124 (directive -> VIRTUAL .)
    VAR             reduce using rule 124 (directive -> VIRTUAL .)
    CONSTRUCTOR     reduce using rule 124 (directive -> VIRTUAL .)
    DESTRUCTOR      reduce using rule 124 (directive -> VIRTUAL .)
    PROCEDURE       reduce using rule 124 (directive -> VIRTUAL .)
    FUNCTION        reduce using rule 124 (directive -> VIRTUAL .)
    IMPLEMENTATION  reduce using rule 124 (directive -> VIRTUAL .)
    INTERFACE       reduce using rule 124 (directive -> VIRTUAL .)
    END             reduce using rule 124 (directive -> VIRTUAL .)


state 155

    (125) function_declaration -> function_header SEMICOLON directive .

    BEGIN           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    LABEL           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    CONST           reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    TYPE            reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    VAR             reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    IMPLEMENTATION  reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)
    INTERFACE       reduce using rule 125 (function_declaration -> function_header SEMICOLON directive .)


state 156

    (126) function_declaration -> function_header SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    function_header                shift and go to state 36
    compound_statement             shift and go to state 276
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35

state 157

    (91) constructor_implementation -> CONSTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 277


state 158

    (92) destructor_implementation -> DESTRUCTOR ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 278


state 159

    (93) method_implementation -> PROCEDURE ID DOT . ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 279


state 160

    (118) procedure_header -> PROCEDURE ID parameters .

    SEMICOLON       reduce using rule 118 (procedure_header -> PROCEDURE ID parameters .)
    RPAREN          reduce using rule 118 (procedure_header -> PROCEDURE ID parameters .)


state 161

    (128) parameters -> LPAREN . parameter_list RPAREN
    (130) parameter_list -> . parameter_list SEMICOLON parameter_group
    (131) parameter_list -> . parameter_group
    (132) parameter_group -> . id_list COLON data_type_list
    (133) parameter_group -> . VAR id_list COLON data_type_list
    (134) parameter_group -> . CONST id_list COLON data_type_list
    (135) parameter_group -> . procedure_header
    (136) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 283
    CONST           shift and go to state 284
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 287
    FUNCTION        shift and go to state 288

    parameter_list                 shift and go to state 280
    parameter_group                shift and go to state 281
    id_list                        shift and go to state 282
    procedure_header               shift and go to state 285
    function_header                shift and go to state 286

state 162

    (129) parameters -> empty .

    SEMICOLON       reduce using rule 129 (parameters -> empty .)
    COLON           reduce using rule 129 (parameters -> empty .)
    RPAREN          reduce using rule 129 (parameters -> empty .)


state 163

    (94) method_implementation -> FUNCTION ID DOT . ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    ID              shift and go to state 289


state 164

    (127) function_header -> FUNCTION ID parameters . COLON data_type_list

    COLON           shift and go to state 290


state 165

    (168) sentences_list -> sentences_list sentence SEMICOLON .

    END             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    ID              reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    NEW             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    DISPOSE         reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    BEGIN           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    IF              reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    CASE            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    FOR             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    WHILE           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    REPEAT          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    WITH            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    GOTO            reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    NUMBER          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    ASM             reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    LPAREN          reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    SEMICOLON       reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)
    UNTIL           reduce using rule 168 (sentences_list -> sentences_list sentence SEMICOLON .)


state 166

    (185) assignment -> variable ASIGNATION expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 185 (assignment -> variable ASIGNATION expression .)
    ELSE            reduce using rule 185 (assignment -> variable ASIGNATION expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 167

    (190) procedure_call -> variable DOT ID . LPAREN expression_list RPAREN
    (191) procedure_call -> variable DOT ID . LPAREN RPAREN
    (263) variable -> variable DOT ID .

    LPAREN          shift and go to state 291
    ASIGNATION      reduce using rule 263 (variable -> variable DOT ID .)
    DOT             reduce using rule 263 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 263 (variable -> variable DOT ID .)
    CARET           reduce using rule 263 (variable -> variable DOT ID .)


state 168

    (264) variable -> variable LBRACKET expression_list . RBRACKET
    (272) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 292
    COMMA           shift and go to state 293


state 169

    (271) expression_list -> expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 271 (expression_list -> expression .)
    COMMA           reduce using rule 271 (expression_list -> expression .)
    RPAREN          reduce using rule 271 (expression_list -> expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 170

    (186) assignment -> ID ASIGNATION expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 186 (assignment -> ID ASIGNATION expression .)
    ELSE            reduce using rule 186 (assignment -> ID ASIGNATION expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 171

    (188) procedure_call -> ID LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 294
    COMMA           shift and go to state 293


state 172

    (189) procedure_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 189 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 189 (procedure_call -> ID LPAREN RPAREN .)


state 173

    (266) variable -> LPAREN variable RPAREN . CARET

    CARET           shift and go to state 295


state 174

    (263) variable -> variable DOT . ID

    ID              shift and go to state 296


state 175

    (192) procedure_call -> NEW LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 297
    COMMA           shift and go to state 293


state 176

    (193) procedure_call -> NEW LPAREN RPAREN .

    SEMICOLON       reduce using rule 193 (procedure_call -> NEW LPAREN RPAREN .)
    ELSE            reduce using rule 193 (procedure_call -> NEW LPAREN RPAREN .)


state 177

    (194) procedure_call -> DISPOSE LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 298
    COMMA           shift and go to state 293


state 178

    (195) procedure_call -> DISPOSE LPAREN RPAREN .

    SEMICOLON       reduce using rule 195 (procedure_call -> DISPOSE LPAREN RPAREN .)
    ELSE            reduce using rule 195 (procedure_call -> DISPOSE LPAREN RPAREN .)


state 179

    (196) if_statement -> IF expression THEN . sentence
    (197) if_statement -> IF expression THEN . sentence ELSE sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 299
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 180

    (218) expression -> expression OR . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    simple_expression              shift and go to state 300
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 181

    (219) expression -> expression XOR . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    simple_expression              shift and go to state 301
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 182

    (221) simple_expression -> simple_expression AND . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    relational_expression          shift and go to state 302
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 183

    (223) relational_expression -> relational_expression relational_operator . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    additive_expression            shift and go to state 303
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 184

    (225) relational_operator -> EQUAL .

    NOT             reduce using rule 225 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 225 (relational_operator -> EQUAL .)
    PLUS            reduce using rule 225 (relational_operator -> EQUAL .)
    ADDRESS_OF      reduce using rule 225 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 225 (relational_operator -> EQUAL .)
    STRING          reduce using rule 225 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 225 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 225 (relational_operator -> EQUAL .)
    NIL             reduce using rule 225 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 225 (relational_operator -> EQUAL .)
    ID              reduce using rule 225 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 225 (relational_operator -> EQUAL .)


state 185

    (226) relational_operator -> DISTINT .

    NOT             reduce using rule 226 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 226 (relational_operator -> DISTINT .)
    PLUS            reduce using rule 226 (relational_operator -> DISTINT .)
    ADDRESS_OF      reduce using rule 226 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 226 (relational_operator -> DISTINT .)
    STRING          reduce using rule 226 (relational_operator -> DISTINT .)
    TRUE            reduce using rule 226 (relational_operator -> DISTINT .)
    FALSE           reduce using rule 226 (relational_operator -> DISTINT .)
    NIL             reduce using rule 226 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 226 (relational_operator -> DISTINT .)
    ID              reduce using rule 226 (relational_operator -> DISTINT .)
    LBRACKET        reduce using rule 226 (relational_operator -> DISTINT .)


state 186

    (227) relational_operator -> LESS .

    NOT             reduce using rule 227 (relational_operator -> LESS .)
    MINUS           reduce using rule 227 (relational_operator -> LESS .)
    PLUS            reduce using rule 227 (relational_operator -> LESS .)
    ADDRESS_OF      reduce using rule 227 (relational_operator -> LESS .)
    NUMBER          reduce using rule 227 (relational_operator -> LESS .)
    STRING          reduce using rule 227 (relational_operator -> LESS .)
    TRUE            reduce using rule 227 (relational_operator -> LESS .)
    FALSE           reduce using rule 227 (relational_operator -> LESS .)
    NIL             reduce using rule 227 (relational_operator -> LESS .)
    LPAREN          reduce using rule 227 (relational_operator -> LESS .)
    ID              reduce using rule 227 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 227 (relational_operator -> LESS .)


state 187

    (228) relational_operator -> LESSEQUAL .

    NOT             reduce using rule 228 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 228 (relational_operator -> LESSEQUAL .)
    PLUS            reduce using rule 228 (relational_operator -> LESSEQUAL .)
    ADDRESS_OF      reduce using rule 228 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 228 (relational_operator -> LESSEQUAL .)
    STRING          reduce using rule 228 (relational_operator -> LESSEQUAL .)
    TRUE            reduce using rule 228 (relational_operator -> LESSEQUAL .)
    FALSE           reduce using rule 228 (relational_operator -> LESSEQUAL .)
    NIL             reduce using rule 228 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 228 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 228 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 228 (relational_operator -> LESSEQUAL .)


state 188

    (229) relational_operator -> GREATER .

    NOT             reduce using rule 229 (relational_operator -> GREATER .)
    MINUS           reduce using rule 229 (relational_operator -> GREATER .)
    PLUS            reduce using rule 229 (relational_operator -> GREATER .)
    ADDRESS_OF      reduce using rule 229 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 229 (relational_operator -> GREATER .)
    STRING          reduce using rule 229 (relational_operator -> GREATER .)
    TRUE            reduce using rule 229 (relational_operator -> GREATER .)
    FALSE           reduce using rule 229 (relational_operator -> GREATER .)
    NIL             reduce using rule 229 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 229 (relational_operator -> GREATER .)
    ID              reduce using rule 229 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 229 (relational_operator -> GREATER .)


state 189

    (230) relational_operator -> GREATEREQUAL .

    NOT             reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    MINUS           reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    PLUS            reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    ADDRESS_OF      reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    NUMBER          reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    STRING          reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    TRUE            reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    FALSE           reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    NIL             reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    LPAREN          reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    ID              reduce using rule 230 (relational_operator -> GREATEREQUAL .)
    LBRACKET        reduce using rule 230 (relational_operator -> GREATEREQUAL .)


state 190

    (231) relational_operator -> IN .

    NOT             reduce using rule 231 (relational_operator -> IN .)
    MINUS           reduce using rule 231 (relational_operator -> IN .)
    PLUS            reduce using rule 231 (relational_operator -> IN .)
    ADDRESS_OF      reduce using rule 231 (relational_operator -> IN .)
    NUMBER          reduce using rule 231 (relational_operator -> IN .)
    STRING          reduce using rule 231 (relational_operator -> IN .)
    TRUE            reduce using rule 231 (relational_operator -> IN .)
    FALSE           reduce using rule 231 (relational_operator -> IN .)
    NIL             reduce using rule 231 (relational_operator -> IN .)
    LPAREN          reduce using rule 231 (relational_operator -> IN .)
    ID              reduce using rule 231 (relational_operator -> IN .)
    LBRACKET        reduce using rule 231 (relational_operator -> IN .)


state 191

    (232) additive_expression -> additive_expression PLUS . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    multiplicative_expression      shift and go to state 304
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 192

    (233) additive_expression -> additive_expression MINUS . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    multiplicative_expression      shift and go to state 305
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 193

    (244) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    MOD             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    SHL             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    SHR             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DISTINT         reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    LESSEQUAL       reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    GREATEREQUAL    reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    IN              reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    THEN            reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    XOR             reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    OF              reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DO              reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DOBLEDOT        reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    TO              reduce using rule 244 (unary_expression -> PLUS unary_expression .)
    DOWNTO          reduce using rule 244 (unary_expression -> PLUS unary_expression .)


state 194

    (235) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 306
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 195

    (236) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 307
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 196

    (237) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 308
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 197

    (238) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 309
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 198

    (239) multiplicative_expression -> multiplicative_expression SHL . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 310
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 199

    (240) multiplicative_expression -> multiplicative_expression SHR . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    unary_expression               shift and go to state 311
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 200

    (243) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    SHL             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    SHR             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DISTINT         reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    LESSEQUAL       reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    GREATEREQUAL    reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    IN              reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    THEN            reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    XOR             reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    OF              reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DO              reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DOBLEDOT        reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    TO              reduce using rule 243 (unary_expression -> MINUS unary_expression .)
    DOWNTO          reduce using rule 243 (unary_expression -> MINUS unary_expression .)


state 201

    (242) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    SHL             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    SHR             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 242 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 242 (unary_expression -> NOT unary_expression .)
    EQUAL           reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DISTINT         reduce using rule 242 (unary_expression -> NOT unary_expression .)
    LESS            reduce using rule 242 (unary_expression -> NOT unary_expression .)
    LESSEQUAL       reduce using rule 242 (unary_expression -> NOT unary_expression .)
    GREATER         reduce using rule 242 (unary_expression -> NOT unary_expression .)
    GREATEREQUAL    reduce using rule 242 (unary_expression -> NOT unary_expression .)
    IN              reduce using rule 242 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    THEN            reduce using rule 242 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 242 (unary_expression -> NOT unary_expression .)
    XOR             reduce using rule 242 (unary_expression -> NOT unary_expression .)
    OF              reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DO              reduce using rule 242 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 242 (unary_expression -> NOT unary_expression .)
    ELSE            reduce using rule 242 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 242 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 242 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DOBLEDOT        reduce using rule 242 (unary_expression -> NOT unary_expression .)
    TO              reduce using rule 242 (unary_expression -> NOT unary_expression .)
    DOWNTO          reduce using rule 242 (unary_expression -> NOT unary_expression .)


state 202

    (245) unary_expression -> ADDRESS_OF unary_expression .

    TIMES           reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DIVIDE          reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DIV             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    MOD             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    SHL             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    SHR             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    PLUS            reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    MINUS           reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    EQUAL           reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DISTINT         reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    LESS            reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    LESSEQUAL       reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATER         reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    GREATEREQUAL    reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    IN              reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    AND             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    THEN            reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    OR              reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    XOR             reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    OF              reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DO              reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    SEMICOLON       reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    ELSE            reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    RBRACKET        reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    COMMA           reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    RPAREN          reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DOBLEDOT        reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    TO              reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)
    DOWNTO          reduce using rule 245 (unary_expression -> ADDRESS_OF unary_expression .)


state 203

    (263) variable -> variable DOT . ID
    (269) function_call -> variable DOT . ID LPAREN expression_list RPAREN
    (270) function_call -> variable DOT . ID LPAREN RPAREN

    ID              shift and go to state 312


state 204

    (266) variable -> LPAREN . variable RPAREN CARET
    (253) primary_expression -> LPAREN . expression RPAREN
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    ID              shift and go to state 129
    LPAREN          shift and go to state 204
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LBRACKET        shift and go to state 130

    variable                       shift and go to state 206
    expression                     shift and go to state 205
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 205

    (253) primary_expression -> LPAREN expression . RPAREN
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    RPAREN          shift and go to state 313
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 206

    (266) variable -> LPAREN variable . RPAREN CARET
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET
    (247) primary_expression -> variable .
    (269) function_call -> variable . DOT ID LPAREN expression_list RPAREN
    (270) function_call -> variable . DOT ID LPAREN RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 173
    DOT             shift and go to state 203
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102
    TIMES           reduce using rule 247 (primary_expression -> variable .)
    DIVIDE          reduce using rule 247 (primary_expression -> variable .)
    DIV             reduce using rule 247 (primary_expression -> variable .)
    MOD             reduce using rule 247 (primary_expression -> variable .)
    SHL             reduce using rule 247 (primary_expression -> variable .)
    SHR             reduce using rule 247 (primary_expression -> variable .)
    PLUS            reduce using rule 247 (primary_expression -> variable .)
    MINUS           reduce using rule 247 (primary_expression -> variable .)
    EQUAL           reduce using rule 247 (primary_expression -> variable .)
    DISTINT         reduce using rule 247 (primary_expression -> variable .)
    LESS            reduce using rule 247 (primary_expression -> variable .)
    LESSEQUAL       reduce using rule 247 (primary_expression -> variable .)
    GREATER         reduce using rule 247 (primary_expression -> variable .)
    GREATEREQUAL    reduce using rule 247 (primary_expression -> variable .)
    IN              reduce using rule 247 (primary_expression -> variable .)
    AND             reduce using rule 247 (primary_expression -> variable .)
    OR              reduce using rule 247 (primary_expression -> variable .)
    XOR             reduce using rule 247 (primary_expression -> variable .)

  ! RPAREN          [ reduce using rule 247 (primary_expression -> variable .) ]


state 207

    (267) function_call -> ID LPAREN . expression_list RPAREN
    (268) function_call -> ID LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 315
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression_list                shift and go to state 314
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 208

    (260) set_constructor -> LBRACKET set_item_list . RBRACKET
    (259) set_item_list -> set_item_list . COMMA set_item

    RBRACKET        shift and go to state 316
    COMMA           shift and go to state 317


state 209

    (261) set_constructor -> LBRACKET RBRACKET .

    TIMES           reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DIV             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    MOD             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    SHL             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    SHR             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    EQUAL           reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DISTINT         reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    LESS            reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    LESSEQUAL       reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    GREATEREQUAL    reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    IN              reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    AND             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    THEN            reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    OR              reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    XOR             reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    OF              reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DO              reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DOBLEDOT        reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    TO              reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)
    DOWNTO          reduce using rule 261 (set_constructor -> LBRACKET RBRACKET .)


state 210

    (258) set_item_list -> set_item .

    RBRACKET        reduce using rule 258 (set_item_list -> set_item .)
    COMMA           reduce using rule 258 (set_item_list -> set_item .)


state 211

    (256) set_item -> expression .
    (257) set_item -> expression . DOBLEDOT expression
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 256 (set_item -> expression .)
    COMMA           reduce using rule 256 (set_item -> expression .)
    DOBLEDOT        shift and go to state 318
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 212

    (198) case_statement -> CASE expression OF . case_list END
    (199) case_statement -> CASE expression OF . case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> CASE expression OF . case_list ELSE sentences_list END
    (201) case_list -> . case_list case_label COLON sentence SEMICOLON
    (202) case_list -> . case_label COLON sentence SEMICOLON
    (203) case_list -> . empty
    (204) case_label -> . constant
    (205) case_label -> . constant DOBLEDOT constant
    (206) case_label -> . case_label COMMA constant
    (217) empty -> .
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for ORDINAL_CONSTANT resolved as shift
    END             reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

  ! NUMBER          [ reduce using rule 217 (empty -> .) ]
  ! STRING          [ reduce using rule 217 (empty -> .) ]
  ! TRUE            [ reduce using rule 217 (empty -> .) ]
  ! FALSE           [ reduce using rule 217 (empty -> .) ]
  ! NIL             [ reduce using rule 217 (empty -> .) ]
  ! ORDINAL_CONSTANT [ reduce using rule 217 (empty -> .) ]

    case_list                      shift and go to state 319
    case_label                     shift and go to state 320
    empty                          shift and go to state 321
    constant                       shift and go to state 322

state 213

    (207) for_statement -> FOR ID ASIGNATION . expression TO expression DO sentence
    (208) for_statement -> FOR ID ASIGNATION . expression DOWNTO expression DO sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 323
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 214

    (209) for_statement -> FOR ID IN . expression DO sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 324
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 215

    (210) while_statement -> WHILE expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 325
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 216

    (211) repeat_statement -> REPEAT sentences_list UNTIL . expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 326
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 217

    (212) with_statement -> WITH variable_list DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 327
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 218

    (214) variable_list -> variable_list COMMA . variable
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 106
    LPAREN          shift and go to state 63

    variable                       shift and go to state 328

state 219

    (216) labeled_sentence -> NUMBER COLON sentence .

    SEMICOLON       reduce using rule 216 (labeled_sentence -> NUMBER COLON sentence .)
    ELSE            reduce using rule 216 (labeled_sentence -> NUMBER COLON sentence .)


state 220

    (26) number_list -> number_list COMMA NUMBER .

    SEMICOLON       reduce using rule 26 (number_list -> number_list COMMA NUMBER .)
    COMMA           reduce using rule 26 (number_list -> number_list COMMA NUMBER .)


state 221

    (30) const_declaration -> ID EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 329


state 222

    (32) constant -> NUMBER .

    SEMICOLON       reduce using rule 32 (constant -> NUMBER .)
    DOBLEDOT        reduce using rule 32 (constant -> NUMBER .)
    COLON           reduce using rule 32 (constant -> NUMBER .)
    COMMA           reduce using rule 32 (constant -> NUMBER .)


state 223

    (33) constant -> STRING .

    SEMICOLON       reduce using rule 33 (constant -> STRING .)
    DOBLEDOT        reduce using rule 33 (constant -> STRING .)
    COLON           reduce using rule 33 (constant -> STRING .)
    COMMA           reduce using rule 33 (constant -> STRING .)


state 224

    (34) constant -> TRUE .

    SEMICOLON       reduce using rule 34 (constant -> TRUE .)
    DOBLEDOT        reduce using rule 34 (constant -> TRUE .)
    COLON           reduce using rule 34 (constant -> TRUE .)
    COMMA           reduce using rule 34 (constant -> TRUE .)


state 225

    (35) constant -> FALSE .

    SEMICOLON       reduce using rule 35 (constant -> FALSE .)
    DOBLEDOT        reduce using rule 35 (constant -> FALSE .)
    COLON           reduce using rule 35 (constant -> FALSE .)
    COMMA           reduce using rule 35 (constant -> FALSE .)


state 226

    (36) constant -> NIL .

    SEMICOLON       reduce using rule 36 (constant -> NIL .)
    DOBLEDOT        reduce using rule 36 (constant -> NIL .)
    COLON           reduce using rule 36 (constant -> NIL .)
    COMMA           reduce using rule 36 (constant -> NIL .)


state 227

    (37) constant -> ORDINAL_CONSTANT .

    SEMICOLON       reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    DOBLEDOT        reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COLON           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)
    COMMA           reduce using rule 37 (constant -> ORDINAL_CONSTANT .)


state 228

    (151) data_type_list -> ID .

    EQUAL           reduce using rule 151 (data_type_list -> ID .)
    SEMICOLON       reduce using rule 151 (data_type_list -> ID .)
    RPAREN          reduce using rule 151 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 151 (data_type_list -> ID .)
    END             reduce using rule 151 (data_type_list -> ID .)
    CASE            reduce using rule 151 (data_type_list -> ID .)
    ID              reduce using rule 151 (data_type_list -> ID .)
    OF              reduce using rule 151 (data_type_list -> ID .)


state 229

    (31) const_declaration -> ID COLON data_type_list . EQUAL constant SEMICOLON

    EQUAL           shift and go to state 330


state 230

    (137) data_type_list -> INTEGER .

    EQUAL           reduce using rule 137 (data_type_list -> INTEGER .)
    SEMICOLON       reduce using rule 137 (data_type_list -> INTEGER .)
    ABSOLUTE        reduce using rule 137 (data_type_list -> INTEGER .)
    RPAREN          reduce using rule 137 (data_type_list -> INTEGER .)
    END             reduce using rule 137 (data_type_list -> INTEGER .)
    CASE            reduce using rule 137 (data_type_list -> INTEGER .)
    ID              reduce using rule 137 (data_type_list -> INTEGER .)
    OF              reduce using rule 137 (data_type_list -> INTEGER .)


state 231

    (138) data_type_list -> BYTE .

    EQUAL           reduce using rule 138 (data_type_list -> BYTE .)
    SEMICOLON       reduce using rule 138 (data_type_list -> BYTE .)
    ABSOLUTE        reduce using rule 138 (data_type_list -> BYTE .)
    RPAREN          reduce using rule 138 (data_type_list -> BYTE .)
    END             reduce using rule 138 (data_type_list -> BYTE .)
    CASE            reduce using rule 138 (data_type_list -> BYTE .)
    ID              reduce using rule 138 (data_type_list -> BYTE .)
    OF              reduce using rule 138 (data_type_list -> BYTE .)


state 232

    (139) data_type_list -> LONGINT .

    EQUAL           reduce using rule 139 (data_type_list -> LONGINT .)
    SEMICOLON       reduce using rule 139 (data_type_list -> LONGINT .)
    ABSOLUTE        reduce using rule 139 (data_type_list -> LONGINT .)
    RPAREN          reduce using rule 139 (data_type_list -> LONGINT .)
    END             reduce using rule 139 (data_type_list -> LONGINT .)
    CASE            reduce using rule 139 (data_type_list -> LONGINT .)
    ID              reduce using rule 139 (data_type_list -> LONGINT .)
    OF              reduce using rule 139 (data_type_list -> LONGINT .)


state 233

    (140) data_type_list -> SHORTINT .

    EQUAL           reduce using rule 140 (data_type_list -> SHORTINT .)
    SEMICOLON       reduce using rule 140 (data_type_list -> SHORTINT .)
    ABSOLUTE        reduce using rule 140 (data_type_list -> SHORTINT .)
    RPAREN          reduce using rule 140 (data_type_list -> SHORTINT .)
    END             reduce using rule 140 (data_type_list -> SHORTINT .)
    CASE            reduce using rule 140 (data_type_list -> SHORTINT .)
    ID              reduce using rule 140 (data_type_list -> SHORTINT .)
    OF              reduce using rule 140 (data_type_list -> SHORTINT .)


state 234

    (141) data_type_list -> WORD .

    EQUAL           reduce using rule 141 (data_type_list -> WORD .)
    SEMICOLON       reduce using rule 141 (data_type_list -> WORD .)
    ABSOLUTE        reduce using rule 141 (data_type_list -> WORD .)
    RPAREN          reduce using rule 141 (data_type_list -> WORD .)
    END             reduce using rule 141 (data_type_list -> WORD .)
    CASE            reduce using rule 141 (data_type_list -> WORD .)
    ID              reduce using rule 141 (data_type_list -> WORD .)
    OF              reduce using rule 141 (data_type_list -> WORD .)


state 235

    (142) data_type_list -> REAL .

    EQUAL           reduce using rule 142 (data_type_list -> REAL .)
    SEMICOLON       reduce using rule 142 (data_type_list -> REAL .)
    ABSOLUTE        reduce using rule 142 (data_type_list -> REAL .)
    RPAREN          reduce using rule 142 (data_type_list -> REAL .)
    END             reduce using rule 142 (data_type_list -> REAL .)
    CASE            reduce using rule 142 (data_type_list -> REAL .)
    ID              reduce using rule 142 (data_type_list -> REAL .)
    OF              reduce using rule 142 (data_type_list -> REAL .)


state 236

    (143) data_type_list -> SINGLE .

    EQUAL           reduce using rule 143 (data_type_list -> SINGLE .)
    SEMICOLON       reduce using rule 143 (data_type_list -> SINGLE .)
    ABSOLUTE        reduce using rule 143 (data_type_list -> SINGLE .)
    RPAREN          reduce using rule 143 (data_type_list -> SINGLE .)
    END             reduce using rule 143 (data_type_list -> SINGLE .)
    CASE            reduce using rule 143 (data_type_list -> SINGLE .)
    ID              reduce using rule 143 (data_type_list -> SINGLE .)
    OF              reduce using rule 143 (data_type_list -> SINGLE .)


state 237

    (144) data_type_list -> DOUBLE .

    EQUAL           reduce using rule 144 (data_type_list -> DOUBLE .)
    SEMICOLON       reduce using rule 144 (data_type_list -> DOUBLE .)
    ABSOLUTE        reduce using rule 144 (data_type_list -> DOUBLE .)
    RPAREN          reduce using rule 144 (data_type_list -> DOUBLE .)
    END             reduce using rule 144 (data_type_list -> DOUBLE .)
    CASE            reduce using rule 144 (data_type_list -> DOUBLE .)
    ID              reduce using rule 144 (data_type_list -> DOUBLE .)
    OF              reduce using rule 144 (data_type_list -> DOUBLE .)


state 238

    (145) data_type_list -> EXTENDED .

    EQUAL           reduce using rule 145 (data_type_list -> EXTENDED .)
    SEMICOLON       reduce using rule 145 (data_type_list -> EXTENDED .)
    ABSOLUTE        reduce using rule 145 (data_type_list -> EXTENDED .)
    RPAREN          reduce using rule 145 (data_type_list -> EXTENDED .)
    END             reduce using rule 145 (data_type_list -> EXTENDED .)
    CASE            reduce using rule 145 (data_type_list -> EXTENDED .)
    ID              reduce using rule 145 (data_type_list -> EXTENDED .)
    OF              reduce using rule 145 (data_type_list -> EXTENDED .)


state 239

    (146) data_type_list -> SHORT .

    EQUAL           reduce using rule 146 (data_type_list -> SHORT .)
    SEMICOLON       reduce using rule 146 (data_type_list -> SHORT .)
    ABSOLUTE        reduce using rule 146 (data_type_list -> SHORT .)
    RPAREN          reduce using rule 146 (data_type_list -> SHORT .)
    END             reduce using rule 146 (data_type_list -> SHORT .)
    CASE            reduce using rule 146 (data_type_list -> SHORT .)
    ID              reduce using rule 146 (data_type_list -> SHORT .)
    OF              reduce using rule 146 (data_type_list -> SHORT .)


state 240

    (147) data_type_list -> BOOLEAN .

    EQUAL           reduce using rule 147 (data_type_list -> BOOLEAN .)
    SEMICOLON       reduce using rule 147 (data_type_list -> BOOLEAN .)
    ABSOLUTE        reduce using rule 147 (data_type_list -> BOOLEAN .)
    RPAREN          reduce using rule 147 (data_type_list -> BOOLEAN .)
    END             reduce using rule 147 (data_type_list -> BOOLEAN .)
    CASE            reduce using rule 147 (data_type_list -> BOOLEAN .)
    ID              reduce using rule 147 (data_type_list -> BOOLEAN .)
    OF              reduce using rule 147 (data_type_list -> BOOLEAN .)


state 241

    (148) data_type_list -> CHAR .

    EQUAL           reduce using rule 148 (data_type_list -> CHAR .)
    SEMICOLON       reduce using rule 148 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> CHAR .)
    RPAREN          reduce using rule 148 (data_type_list -> CHAR .)
    END             reduce using rule 148 (data_type_list -> CHAR .)
    CASE            reduce using rule 148 (data_type_list -> CHAR .)
    ID              reduce using rule 148 (data_type_list -> CHAR .)
    OF              reduce using rule 148 (data_type_list -> CHAR .)


state 242

    (149) data_type_list -> STRING .
    (150) data_type_list -> STRING . LBRACKET NUMBER RBRACKET
    (54) string_type -> STRING .
    (55) string_type -> STRING . LBRACKET NUMBER RBRACKET

  ! reduce/reduce conflict for EQUAL resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for CASE resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 54 (string_type -> STRING .)
  ! reduce/reduce conflict for OF resolved using rule 54 (string_type -> STRING .)
    LBRACKET        shift and go to state 331
    EQUAL           reduce using rule 54 (string_type -> STRING .)
    SEMICOLON       reduce using rule 54 (string_type -> STRING .)
    ABSOLUTE        reduce using rule 54 (string_type -> STRING .)
    RPAREN          reduce using rule 54 (string_type -> STRING .)
    END             reduce using rule 54 (string_type -> STRING .)
    CASE            reduce using rule 54 (string_type -> STRING .)
    ID              reduce using rule 54 (string_type -> STRING .)
    OF              reduce using rule 54 (string_type -> STRING .)

  ! EQUAL           [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! ABSOLUTE        [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! RPAREN          [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! END             [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! CASE            [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! ID              [ reduce using rule 149 (data_type_list -> STRING .) ]
  ! OF              [ reduce using rule 149 (data_type_list -> STRING .) ]


state 243

    (152) data_type_list -> ABSOLUTE . ID

    ID              shift and go to state 332


state 244

    (153) data_type_list -> FILE .
    (76) file_type -> FILE . OF data_type_list
    (77) file_type -> FILE .

  ! shift/reduce conflict for OF resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for END resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for CASE resolved using rule 77 (file_type -> FILE .)
  ! reduce/reduce conflict for ID resolved using rule 77 (file_type -> FILE .)
  ! shift/reduce conflict for OF resolved as shift
    OF              shift and go to state 333
    EQUAL           reduce using rule 77 (file_type -> FILE .)
    SEMICOLON       reduce using rule 77 (file_type -> FILE .)
    ABSOLUTE        reduce using rule 77 (file_type -> FILE .)
    RPAREN          reduce using rule 77 (file_type -> FILE .)
    END             reduce using rule 77 (file_type -> FILE .)
    CASE            reduce using rule 77 (file_type -> FILE .)
    ID              reduce using rule 77 (file_type -> FILE .)

  ! EQUAL           [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! SEMICOLON       [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! ABSOLUTE        [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! RPAREN          [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! END             [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! CASE            [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! ID              [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 153 (data_type_list -> FILE .) ]
  ! OF              [ reduce using rule 77 (file_type -> FILE .) ]


state 245

    (154) data_type_list -> array_type .

    EQUAL           reduce using rule 154 (data_type_list -> array_type .)
    SEMICOLON       reduce using rule 154 (data_type_list -> array_type .)
    ABSOLUTE        reduce using rule 154 (data_type_list -> array_type .)
    RPAREN          reduce using rule 154 (data_type_list -> array_type .)
    END             reduce using rule 154 (data_type_list -> array_type .)
    CASE            reduce using rule 154 (data_type_list -> array_type .)
    ID              reduce using rule 154 (data_type_list -> array_type .)
    OF              reduce using rule 154 (data_type_list -> array_type .)


state 246

    (155) data_type_list -> pointer_type .

    EQUAL           reduce using rule 155 (data_type_list -> pointer_type .)
    SEMICOLON       reduce using rule 155 (data_type_list -> pointer_type .)
    ABSOLUTE        reduce using rule 155 (data_type_list -> pointer_type .)
    RPAREN          reduce using rule 155 (data_type_list -> pointer_type .)
    END             reduce using rule 155 (data_type_list -> pointer_type .)
    CASE            reduce using rule 155 (data_type_list -> pointer_type .)
    ID              reduce using rule 155 (data_type_list -> pointer_type .)
    OF              reduce using rule 155 (data_type_list -> pointer_type .)


state 247

    (156) data_type_list -> record_type .

    EQUAL           reduce using rule 156 (data_type_list -> record_type .)
    SEMICOLON       reduce using rule 156 (data_type_list -> record_type .)
    ABSOLUTE        reduce using rule 156 (data_type_list -> record_type .)
    RPAREN          reduce using rule 156 (data_type_list -> record_type .)
    END             reduce using rule 156 (data_type_list -> record_type .)
    CASE            reduce using rule 156 (data_type_list -> record_type .)
    ID              reduce using rule 156 (data_type_list -> record_type .)
    OF              reduce using rule 156 (data_type_list -> record_type .)


state 248

    (157) data_type_list -> set_type .

    EQUAL           reduce using rule 157 (data_type_list -> set_type .)
    SEMICOLON       reduce using rule 157 (data_type_list -> set_type .)
    ABSOLUTE        reduce using rule 157 (data_type_list -> set_type .)
    RPAREN          reduce using rule 157 (data_type_list -> set_type .)
    END             reduce using rule 157 (data_type_list -> set_type .)
    CASE            reduce using rule 157 (data_type_list -> set_type .)
    ID              reduce using rule 157 (data_type_list -> set_type .)
    OF              reduce using rule 157 (data_type_list -> set_type .)


state 249

    (158) data_type_list -> file_type .

    EQUAL           reduce using rule 158 (data_type_list -> file_type .)
    SEMICOLON       reduce using rule 158 (data_type_list -> file_type .)
    ABSOLUTE        reduce using rule 158 (data_type_list -> file_type .)
    RPAREN          reduce using rule 158 (data_type_list -> file_type .)
    END             reduce using rule 158 (data_type_list -> file_type .)
    CASE            reduce using rule 158 (data_type_list -> file_type .)
    ID              reduce using rule 158 (data_type_list -> file_type .)
    OF              reduce using rule 158 (data_type_list -> file_type .)


state 250

    (159) data_type_list -> object_type .

    EQUAL           reduce using rule 159 (data_type_list -> object_type .)
    SEMICOLON       reduce using rule 159 (data_type_list -> object_type .)
    ABSOLUTE        reduce using rule 159 (data_type_list -> object_type .)
    RPAREN          reduce using rule 159 (data_type_list -> object_type .)
    END             reduce using rule 159 (data_type_list -> object_type .)
    CASE            reduce using rule 159 (data_type_list -> object_type .)
    ID              reduce using rule 159 (data_type_list -> object_type .)
    OF              reduce using rule 159 (data_type_list -> object_type .)


state 251

    (160) data_type_list -> string_type .

    EQUAL           reduce using rule 160 (data_type_list -> string_type .)
    SEMICOLON       reduce using rule 160 (data_type_list -> string_type .)
    ABSOLUTE        reduce using rule 160 (data_type_list -> string_type .)
    RPAREN          reduce using rule 160 (data_type_list -> string_type .)
    END             reduce using rule 160 (data_type_list -> string_type .)
    CASE            reduce using rule 160 (data_type_list -> string_type .)
    ID              reduce using rule 160 (data_type_list -> string_type .)
    OF              reduce using rule 160 (data_type_list -> string_type .)


state 252

    (58) array_type -> ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> ARRAY . OF data_type_list

    LBRACKET        shift and go to state 334
    OF              shift and go to state 335


state 253

    (59) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (57) record_type -> PACKED . RECORD record_list END

    ARRAY           shift and go to state 336
    RECORD          shift and go to state 337


state 254

    (74) pointer_type -> CARET . ID
    (75) pointer_type -> CARET . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    ID              shift and go to state 338
    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 339
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 255

    (56) record_type -> RECORD . record_list END
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_list                    shift and go to state 340
    record_declaration             shift and go to state 341
    id_list                        shift and go to state 342

state 256

    (69) set_type -> SET . OF set_range

    OF              shift and go to state 344


state 257

    (78) object_type -> OBJECT . object_heritage object_fields object_methods END
    (79) object_heritage -> . LPAREN ID RPAREN
    (80) object_heritage -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 346
    ID              reduce using rule 217 (empty -> .)
    END             reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)

    object_heritage                shift and go to state 345
    empty                          shift and go to state 347

state 258

    (46) type_definition -> ID . DOBLEDOT ID
    (151) data_type_list -> ID .

    DOBLEDOT        shift and go to state 348
    SEMICOLON       reduce using rule 151 (data_type_list -> ID .)
    EQUAL           reduce using rule 151 (data_type_list -> ID .)
    ABSOLUTE        reduce using rule 151 (data_type_list -> ID .)


state 259

    (41) type_declaration -> ID EQUAL type_definition . SEMICOLON

    SEMICOLON       shift and go to state 349


state 260

    (42) type_definition -> data_type_list .

    SEMICOLON       reduce using rule 42 (type_definition -> data_type_list .)
    EQUAL           reduce using rule 42 (type_definition -> data_type_list .)
    ABSOLUTE        reduce using rule 42 (type_definition -> data_type_list .)


state 261

    (43) type_definition -> LPAREN . id_list RPAREN
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 350

state 262

    (44) type_definition -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 351


state 263

    (45) type_definition -> CHAR . DOBLEDOT CHAR
    (148) data_type_list -> CHAR .

    DOBLEDOT        shift and go to state 352
    SEMICOLON       reduce using rule 148 (data_type_list -> CHAR .)
    EQUAL           reduce using rule 148 (data_type_list -> CHAR .)
    ABSOLUTE        reduce using rule 148 (data_type_list -> CHAR .)


state 264

    (47) type_definition -> record_type .
    (156) data_type_list -> record_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (type_definition -> record_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 47 (type_definition -> record_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 47 (type_definition -> record_type .)
    SEMICOLON       reduce using rule 47 (type_definition -> record_type .)
    EQUAL           reduce using rule 47 (type_definition -> record_type .)
    ABSOLUTE        reduce using rule 47 (type_definition -> record_type .)

  ! SEMICOLON       [ reduce using rule 156 (data_type_list -> record_type .) ]
  ! EQUAL           [ reduce using rule 156 (data_type_list -> record_type .) ]
  ! ABSOLUTE        [ reduce using rule 156 (data_type_list -> record_type .) ]


state 265

    (48) type_definition -> array_type .
    (154) data_type_list -> array_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (type_definition -> array_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 48 (type_definition -> array_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 48 (type_definition -> array_type .)
    SEMICOLON       reduce using rule 48 (type_definition -> array_type .)
    EQUAL           reduce using rule 48 (type_definition -> array_type .)
    ABSOLUTE        reduce using rule 48 (type_definition -> array_type .)

  ! SEMICOLON       [ reduce using rule 154 (data_type_list -> array_type .) ]
  ! EQUAL           [ reduce using rule 154 (data_type_list -> array_type .) ]
  ! ABSOLUTE        [ reduce using rule 154 (data_type_list -> array_type .) ]


state 266

    (49) type_definition -> set_type .
    (157) data_type_list -> set_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (type_definition -> set_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 49 (type_definition -> set_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 49 (type_definition -> set_type .)
    SEMICOLON       reduce using rule 49 (type_definition -> set_type .)
    EQUAL           reduce using rule 49 (type_definition -> set_type .)
    ABSOLUTE        reduce using rule 49 (type_definition -> set_type .)

  ! SEMICOLON       [ reduce using rule 157 (data_type_list -> set_type .) ]
  ! EQUAL           [ reduce using rule 157 (data_type_list -> set_type .) ]
  ! ABSOLUTE        [ reduce using rule 157 (data_type_list -> set_type .) ]


state 267

    (50) type_definition -> pointer_type .
    (155) data_type_list -> pointer_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 50 (type_definition -> pointer_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 50 (type_definition -> pointer_type .)
    SEMICOLON       reduce using rule 50 (type_definition -> pointer_type .)
    EQUAL           reduce using rule 50 (type_definition -> pointer_type .)
    ABSOLUTE        reduce using rule 50 (type_definition -> pointer_type .)

  ! SEMICOLON       [ reduce using rule 155 (data_type_list -> pointer_type .) ]
  ! EQUAL           [ reduce using rule 155 (data_type_list -> pointer_type .) ]
  ! ABSOLUTE        [ reduce using rule 155 (data_type_list -> pointer_type .) ]


state 268

    (51) type_definition -> file_type .
    (158) data_type_list -> file_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (type_definition -> file_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 51 (type_definition -> file_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 51 (type_definition -> file_type .)
    SEMICOLON       reduce using rule 51 (type_definition -> file_type .)
    EQUAL           reduce using rule 51 (type_definition -> file_type .)
    ABSOLUTE        reduce using rule 51 (type_definition -> file_type .)

  ! SEMICOLON       [ reduce using rule 158 (data_type_list -> file_type .) ]
  ! EQUAL           [ reduce using rule 158 (data_type_list -> file_type .) ]
  ! ABSOLUTE        [ reduce using rule 158 (data_type_list -> file_type .) ]


state 269

    (52) type_definition -> object_type .
    (159) data_type_list -> object_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (type_definition -> object_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 52 (type_definition -> object_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 52 (type_definition -> object_type .)
    SEMICOLON       reduce using rule 52 (type_definition -> object_type .)
    EQUAL           reduce using rule 52 (type_definition -> object_type .)
    ABSOLUTE        reduce using rule 52 (type_definition -> object_type .)

  ! SEMICOLON       [ reduce using rule 159 (data_type_list -> object_type .) ]
  ! EQUAL           [ reduce using rule 159 (data_type_list -> object_type .) ]
  ! ABSOLUTE        [ reduce using rule 159 (data_type_list -> object_type .) ]


state 270

    (53) type_definition -> string_type .
    (160) data_type_list -> string_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (type_definition -> string_type .)
  ! reduce/reduce conflict for EQUAL resolved using rule 53 (type_definition -> string_type .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 53 (type_definition -> string_type .)
    SEMICOLON       reduce using rule 53 (type_definition -> string_type .)
    EQUAL           reduce using rule 53 (type_definition -> string_type .)
    ABSOLUTE        reduce using rule 53 (type_definition -> string_type .)

  ! SEMICOLON       [ reduce using rule 160 (data_type_list -> string_type .) ]
  ! EQUAL           [ reduce using rule 160 (data_type_list -> string_type .) ]
  ! ABSOLUTE        [ reduce using rule 160 (data_type_list -> string_type .) ]


state 271

    (57) record_type -> PACKED . RECORD record_list END
    (59) array_type -> PACKED . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list

    RECORD          shift and go to state 337
    ARRAY           shift and go to state 336


state 272

    (113) var_declaration -> id_list COLON type_definition . SEMICOLON
    (114) var_declaration -> id_list COLON type_definition . EQUAL expression SEMICOLON
    (115) var_declaration -> id_list COLON type_definition . ABSOLUTE ID SEMICOLON

    SEMICOLON       shift and go to state 353
    EQUAL           shift and go to state 354
    ABSOLUTE        shift and go to state 355


state 273

    (116) procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .

    BEGIN           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    LABEL           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONST           reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    TYPE            reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    VAR             reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    CONSTRUCTOR     reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    DESTRUCTOR      reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    PROCEDURE       reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    FUNCTION        reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    IMPLEMENTATION  reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)
    INTERFACE       reduce using rule 116 (procedure_declaration -> procedure_header SEMICOLON directive SEMICOLON .)


state 274

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 356


state 275

    (121) directive -> EXTERNAL STRING .

    SEMICOLON       reduce using rule 121 (directive -> EXTERNAL STRING .)
    BEGIN           reduce using rule 121 (directive -> EXTERNAL STRING .)
    LABEL           reduce using rule 121 (directive -> EXTERNAL STRING .)
    CONST           reduce using rule 121 (directive -> EXTERNAL STRING .)
    TYPE            reduce using rule 121 (directive -> EXTERNAL STRING .)
    VAR             reduce using rule 121 (directive -> EXTERNAL STRING .)
    CONSTRUCTOR     reduce using rule 121 (directive -> EXTERNAL STRING .)
    DESTRUCTOR      reduce using rule 121 (directive -> EXTERNAL STRING .)
    PROCEDURE       reduce using rule 121 (directive -> EXTERNAL STRING .)
    FUNCTION        reduce using rule 121 (directive -> EXTERNAL STRING .)
    IMPLEMENTATION  reduce using rule 121 (directive -> EXTERNAL STRING .)
    INTERFACE       reduce using rule 121 (directive -> EXTERNAL STRING .)
    END             reduce using rule 121 (directive -> EXTERNAL STRING .)


state 276

    (126) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 357


state 277

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 358
    empty                          shift and go to state 162

state 278

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 359
    empty                          shift and go to state 162

state 279

    (93) method_implementation -> PROCEDURE ID DOT ID . parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 360
    empty                          shift and go to state 162

state 280

    (128) parameters -> LPAREN parameter_list . RPAREN
    (130) parameter_list -> parameter_list . SEMICOLON parameter_group

    RPAREN          shift and go to state 361
    SEMICOLON       shift and go to state 362


state 281

    (131) parameter_list -> parameter_group .

    RPAREN          reduce using rule 131 (parameter_list -> parameter_group .)
    SEMICOLON       reduce using rule 131 (parameter_list -> parameter_group .)


state 282

    (132) parameter_group -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 363
    COMMA           shift and go to state 44


state 283

    (133) parameter_group -> VAR . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 364

state 284

    (134) parameter_group -> CONST . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    ID              shift and go to state 13

    id_list                        shift and go to state 365

state 285

    (135) parameter_group -> procedure_header .

    RPAREN          reduce using rule 135 (parameter_group -> procedure_header .)
    SEMICOLON       reduce using rule 135 (parameter_group -> procedure_header .)


state 286

    (136) parameter_group -> function_header .

    RPAREN          reduce using rule 136 (parameter_group -> function_header .)
    SEMICOLON       reduce using rule 136 (parameter_group -> function_header .)


state 287

    (118) procedure_header -> PROCEDURE . ID parameters

    ID              shift and go to state 366


state 288

    (127) function_header -> FUNCTION . ID parameters COLON data_type_list

    ID              shift and go to state 367


state 289

    (94) method_implementation -> FUNCTION ID DOT ID . parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    COLON           reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 368
    empty                          shift and go to state 162

state 290

    (127) function_header -> FUNCTION ID parameters COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 369
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 291

    (190) procedure_call -> variable DOT ID LPAREN . expression_list RPAREN
    (191) procedure_call -> variable DOT ID LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 371
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    variable                       shift and go to state 120
    expression_list                shift and go to state 370
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 292

    (264) variable -> variable LBRACKET expression_list RBRACKET .

    ASIGNATION      reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOT             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    CARET           reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DIV             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHL             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    SHR             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DISTINT         reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    LESSEQUAL       reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    GREATEREQUAL    reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    XOR             reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    OF              reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    SEMICOLON       reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOBLEDOT        reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)
    DOWNTO          reduce using rule 264 (variable -> variable LBRACKET expression_list RBRACKET .)


state 293

    (272) expression_list -> expression_list COMMA . expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 372
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 294

    (188) procedure_call -> ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 188 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 188 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 295

    (266) variable -> LPAREN variable RPAREN CARET .

    ASIGNATION      reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DOT             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    LBRACKET        reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    CARET           reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    RPAREN          reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    TIMES           reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DIVIDE          reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DIV             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    MOD             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    SHL             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    SHR             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    PLUS            reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    MINUS           reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    EQUAL           reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DISTINT         reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    LESS            reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    LESSEQUAL       reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    GREATER         reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    GREATEREQUAL    reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    IN              reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    AND             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    THEN            reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    OR              reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    XOR             reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    OF              reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DO              reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    COMMA           reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    SEMICOLON       reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    ELSE            reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    RBRACKET        reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DOBLEDOT        reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    TO              reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)
    DOWNTO          reduce using rule 266 (variable -> LPAREN variable RPAREN CARET .)


state 296

    (263) variable -> variable DOT ID .

    RPAREN          reduce using rule 263 (variable -> variable DOT ID .)
    DOT             reduce using rule 263 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 263 (variable -> variable DOT ID .)
    CARET           reduce using rule 263 (variable -> variable DOT ID .)
    DO              reduce using rule 263 (variable -> variable DOT ID .)
    COMMA           reduce using rule 263 (variable -> variable DOT ID .)


state 297

    (192) procedure_call -> NEW LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 192 (procedure_call -> NEW LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 192 (procedure_call -> NEW LPAREN expression_list RPAREN .)


state 298

    (194) procedure_call -> DISPOSE LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 194 (procedure_call -> DISPOSE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 194 (procedure_call -> DISPOSE LPAREN expression_list RPAREN .)


state 299

    (196) if_statement -> IF expression THEN sentence .
    (197) if_statement -> IF expression THEN sentence . ELSE sentence

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 196 (if_statement -> IF expression THEN sentence .)
    ELSE            shift and go to state 373

  ! ELSE            [ reduce using rule 196 (if_statement -> IF expression THEN sentence .) ]


state 300

    (218) expression -> expression OR simple_expression .
    (221) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 218 (expression -> expression OR simple_expression .)
    OR              reduce using rule 218 (expression -> expression OR simple_expression .)
    XOR             reduce using rule 218 (expression -> expression OR simple_expression .)
    OF              reduce using rule 218 (expression -> expression OR simple_expression .)
    DO              reduce using rule 218 (expression -> expression OR simple_expression .)
    SEMICOLON       reduce using rule 218 (expression -> expression OR simple_expression .)
    ELSE            reduce using rule 218 (expression -> expression OR simple_expression .)
    RBRACKET        reduce using rule 218 (expression -> expression OR simple_expression .)
    COMMA           reduce using rule 218 (expression -> expression OR simple_expression .)
    RPAREN          reduce using rule 218 (expression -> expression OR simple_expression .)
    DOBLEDOT        reduce using rule 218 (expression -> expression OR simple_expression .)
    TO              reduce using rule 218 (expression -> expression OR simple_expression .)
    DOWNTO          reduce using rule 218 (expression -> expression OR simple_expression .)
    AND             shift and go to state 182


state 301

    (219) expression -> expression XOR simple_expression .
    (221) simple_expression -> simple_expression . AND relational_expression

    THEN            reduce using rule 219 (expression -> expression XOR simple_expression .)
    OR              reduce using rule 219 (expression -> expression XOR simple_expression .)
    XOR             reduce using rule 219 (expression -> expression XOR simple_expression .)
    OF              reduce using rule 219 (expression -> expression XOR simple_expression .)
    DO              reduce using rule 219 (expression -> expression XOR simple_expression .)
    SEMICOLON       reduce using rule 219 (expression -> expression XOR simple_expression .)
    ELSE            reduce using rule 219 (expression -> expression XOR simple_expression .)
    RBRACKET        reduce using rule 219 (expression -> expression XOR simple_expression .)
    COMMA           reduce using rule 219 (expression -> expression XOR simple_expression .)
    RPAREN          reduce using rule 219 (expression -> expression XOR simple_expression .)
    DOBLEDOT        reduce using rule 219 (expression -> expression XOR simple_expression .)
    TO              reduce using rule 219 (expression -> expression XOR simple_expression .)
    DOWNTO          reduce using rule 219 (expression -> expression XOR simple_expression .)
    AND             shift and go to state 182


state 302

    (221) simple_expression -> simple_expression AND relational_expression .
    (223) relational_expression -> relational_expression . relational_operator additive_expression
    (225) relational_operator -> . EQUAL
    (226) relational_operator -> . DISTINT
    (227) relational_operator -> . LESS
    (228) relational_operator -> . LESSEQUAL
    (229) relational_operator -> . GREATER
    (230) relational_operator -> . GREATEREQUAL
    (231) relational_operator -> . IN

    AND             reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    THEN            reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    OR              reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    XOR             reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    OF              reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    DO              reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    SEMICOLON       reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    ELSE            reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    RBRACKET        reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    COMMA           reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    RPAREN          reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    DOBLEDOT        reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    TO              reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    DOWNTO          reduce using rule 221 (simple_expression -> simple_expression AND relational_expression .)
    EQUAL           shift and go to state 184
    DISTINT         shift and go to state 185
    LESS            shift and go to state 186
    LESSEQUAL       shift and go to state 187
    GREATER         shift and go to state 188
    GREATEREQUAL    shift and go to state 189
    IN              shift and go to state 190

    relational_operator            shift and go to state 183

state 303

    (223) relational_expression -> relational_expression relational_operator additive_expression .
    (232) additive_expression -> additive_expression . PLUS multiplicative_expression
    (233) additive_expression -> additive_expression . MINUS multiplicative_expression

    EQUAL           reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    DISTINT         reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESS            reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    LESSEQUAL       reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATER         reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    GREATEREQUAL    reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    IN              reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    AND             reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    THEN            reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    OR              reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    XOR             reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    OF              reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    DO              reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    SEMICOLON       reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    ELSE            reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    RBRACKET        reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    COMMA           reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    RPAREN          reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOBLEDOT        reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    TO              reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    DOWNTO          reduce using rule 223 (relational_expression -> relational_expression relational_operator additive_expression .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192


state 304

    (232) additive_expression -> additive_expression PLUS multiplicative_expression .
    (235) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (236) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (237) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (238) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (239) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (240) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DISTINT         reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OF              reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 232 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 194
    DIVIDE          shift and go to state 195
    DIV             shift and go to state 196
    MOD             shift and go to state 197
    SHL             shift and go to state 198
    SHR             shift and go to state 199


state 305

    (233) additive_expression -> additive_expression MINUS multiplicative_expression .
    (235) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (236) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (237) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (238) multiplicative_expression -> multiplicative_expression . MOD unary_expression
    (239) multiplicative_expression -> multiplicative_expression . SHL unary_expression
    (240) multiplicative_expression -> multiplicative_expression . SHR unary_expression

    PLUS            reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DISTINT         reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESSEQUAL       reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATEREQUAL    reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OF              reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOBLEDOT        reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 233 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 194
    DIVIDE          shift and go to state 195
    DIV             shift and go to state 196
    MOD             shift and go to state 197
    SHL             shift and go to state 198
    SHR             shift and go to state 199


state 306

    (235) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHL             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SHR             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQUAL           reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DISTINT         reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESS            reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LESSEQUAL       reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATER         reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GREATEREQUAL    reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    IN              reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    THEN            reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    XOR             reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OF              reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DO              reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    ELSE            reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOBLEDOT        reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TO              reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DOWNTO          reduce using rule 235 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 307

    (236) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIV             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MOD             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHL             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SHR             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DISTINT         reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESS            reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LESSEQUAL       reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATER         reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GREATEREQUAL    reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IN              reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THEN            reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    XOR             reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OF              reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DO              reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ELSE            reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOBLEDOT        reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TO              reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DOWNTO          reduce using rule 236 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 308

    (237) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIVIDE          reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHL             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SHR             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQUAL           reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DISTINT         reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESS            reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LESSEQUAL       reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATER         reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GREATEREQUAL    reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    IN              reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    THEN            reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    XOR             reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OF              reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DO              reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    ELSE            reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RBRACKET        reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOBLEDOT        reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    TO              reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DOWNTO          reduce using rule 237 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 309

    (238) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIVIDE          reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHL             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SHR             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQUAL           reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DISTINT         reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESS            reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LESSEQUAL       reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATER         reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GREATEREQUAL    reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    IN              reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    THEN            reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    XOR             reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OF              reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DO              reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    ELSE            reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RBRACKET        reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOBLEDOT        reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    TO              reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DOWNTO          reduce using rule 238 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 310

    (239) multiplicative_expression -> multiplicative_expression SHL unary_expression .

    TIMES           reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIVIDE          reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DIV             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MOD             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHL             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SHR             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    PLUS            reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    MINUS           reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    EQUAL           reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DISTINT         reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESS            reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    LESSEQUAL       reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATER         reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    GREATEREQUAL    reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    IN              reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    AND             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    THEN            reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OR              reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    XOR             reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    OF              reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DO              reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    SEMICOLON       reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    ELSE            reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RBRACKET        reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    COMMA           reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    RPAREN          reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOBLEDOT        reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    TO              reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)
    DOWNTO          reduce using rule 239 (multiplicative_expression -> multiplicative_expression SHL unary_expression .)


state 311

    (240) multiplicative_expression -> multiplicative_expression SHR unary_expression .

    TIMES           reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIVIDE          reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DIV             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MOD             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHL             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SHR             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    PLUS            reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    MINUS           reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    EQUAL           reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DISTINT         reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESS            reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    LESSEQUAL       reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATER         reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    GREATEREQUAL    reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    IN              reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    AND             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    THEN            reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OR              reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    XOR             reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    OF              reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DO              reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    SEMICOLON       reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    ELSE            reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RBRACKET        reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    COMMA           reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    RPAREN          reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOBLEDOT        reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    TO              reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)
    DOWNTO          reduce using rule 240 (multiplicative_expression -> multiplicative_expression SHR unary_expression .)


state 312

    (263) variable -> variable DOT ID .
    (269) function_call -> variable DOT ID . LPAREN expression_list RPAREN
    (270) function_call -> variable DOT ID . LPAREN RPAREN

    DOT             reduce using rule 263 (variable -> variable DOT ID .)
    LBRACKET        reduce using rule 263 (variable -> variable DOT ID .)
    CARET           reduce using rule 263 (variable -> variable DOT ID .)
    TIMES           reduce using rule 263 (variable -> variable DOT ID .)
    DIVIDE          reduce using rule 263 (variable -> variable DOT ID .)
    DIV             reduce using rule 263 (variable -> variable DOT ID .)
    MOD             reduce using rule 263 (variable -> variable DOT ID .)
    SHL             reduce using rule 263 (variable -> variable DOT ID .)
    SHR             reduce using rule 263 (variable -> variable DOT ID .)
    PLUS            reduce using rule 263 (variable -> variable DOT ID .)
    MINUS           reduce using rule 263 (variable -> variable DOT ID .)
    EQUAL           reduce using rule 263 (variable -> variable DOT ID .)
    DISTINT         reduce using rule 263 (variable -> variable DOT ID .)
    LESS            reduce using rule 263 (variable -> variable DOT ID .)
    LESSEQUAL       reduce using rule 263 (variable -> variable DOT ID .)
    GREATER         reduce using rule 263 (variable -> variable DOT ID .)
    GREATEREQUAL    reduce using rule 263 (variable -> variable DOT ID .)
    IN              reduce using rule 263 (variable -> variable DOT ID .)
    AND             reduce using rule 263 (variable -> variable DOT ID .)
    THEN            reduce using rule 263 (variable -> variable DOT ID .)
    OR              reduce using rule 263 (variable -> variable DOT ID .)
    XOR             reduce using rule 263 (variable -> variable DOT ID .)
    OF              reduce using rule 263 (variable -> variable DOT ID .)
    DO              reduce using rule 263 (variable -> variable DOT ID .)
    SEMICOLON       reduce using rule 263 (variable -> variable DOT ID .)
    ELSE            reduce using rule 263 (variable -> variable DOT ID .)
    RBRACKET        reduce using rule 263 (variable -> variable DOT ID .)
    COMMA           reduce using rule 263 (variable -> variable DOT ID .)
    RPAREN          reduce using rule 263 (variable -> variable DOT ID .)
    DOBLEDOT        reduce using rule 263 (variable -> variable DOT ID .)
    TO              reduce using rule 263 (variable -> variable DOT ID .)
    DOWNTO          reduce using rule 263 (variable -> variable DOT ID .)
    LPAREN          shift and go to state 374


state 313

    (253) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    SHL             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    SHR             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DOBLEDOT        reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 253 (primary_expression -> LPAREN expression RPAREN .)


state 314

    (267) function_call -> ID LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 375
    COMMA           shift and go to state 293


state 315

    (268) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    SHL             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    SHR             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DISTINT         reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    XOR             reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    OF              reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 268 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 268 (function_call -> ID LPAREN RPAREN .)


state 316

    (260) set_constructor -> LBRACKET set_item_list RBRACKET .

    TIMES           reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIVIDE          reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DIV             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MOD             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHL             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SHR             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    PLUS            reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    MINUS           reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    EQUAL           reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DISTINT         reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESS            reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    LESSEQUAL       reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATER         reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    GREATEREQUAL    reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    IN              reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    AND             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    THEN            reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OR              reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    XOR             reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    OF              reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DO              reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    SEMICOLON       reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    ELSE            reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RBRACKET        reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    COMMA           reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    RPAREN          reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOBLEDOT        reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    TO              reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)
    DOWNTO          reduce using rule 260 (set_constructor -> LBRACKET set_item_list RBRACKET .)


state 317

    (259) set_item_list -> set_item_list COMMA . set_item
    (256) set_item -> . expression
    (257) set_item -> . expression DOBLEDOT expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    set_item                       shift and go to state 376
    expression                     shift and go to state 211
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 318

    (257) set_item -> expression DOBLEDOT . expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 377
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 319

    (198) case_statement -> CASE expression OF case_list . END
    (199) case_statement -> CASE expression OF case_list . ELSE sentences_list SEMICOLON END
    (200) case_statement -> CASE expression OF case_list . ELSE sentences_list END
    (201) case_list -> case_list . case_label COLON sentence SEMICOLON
    (204) case_label -> . constant
    (205) case_label -> . constant DOBLEDOT constant
    (206) case_label -> . case_label COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             shift and go to state 378
    ELSE            shift and go to state 379
    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    case_label                     shift and go to state 380
    constant                       shift and go to state 322

state 320

    (202) case_list -> case_label . COLON sentence SEMICOLON
    (206) case_label -> case_label . COMMA constant

    COLON           shift and go to state 381
    COMMA           shift and go to state 382


state 321

    (203) case_list -> empty .

    END             reduce using rule 203 (case_list -> empty .)
    ELSE            reduce using rule 203 (case_list -> empty .)
    NUMBER          reduce using rule 203 (case_list -> empty .)
    STRING          reduce using rule 203 (case_list -> empty .)
    TRUE            reduce using rule 203 (case_list -> empty .)
    FALSE           reduce using rule 203 (case_list -> empty .)
    NIL             reduce using rule 203 (case_list -> empty .)
    ORDINAL_CONSTANT reduce using rule 203 (case_list -> empty .)


state 322

    (204) case_label -> constant .
    (205) case_label -> constant . DOBLEDOT constant

    COLON           reduce using rule 204 (case_label -> constant .)
    COMMA           reduce using rule 204 (case_label -> constant .)
    DOBLEDOT        shift and go to state 383


state 323

    (207) for_statement -> FOR ID ASIGNATION expression . TO expression DO sentence
    (208) for_statement -> FOR ID ASIGNATION expression . DOWNTO expression DO sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    TO              shift and go to state 384
    DOWNTO          shift and go to state 385
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 324

    (209) for_statement -> FOR ID IN expression . DO sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    DO              shift and go to state 386
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 325

    (210) while_statement -> WHILE expression DO sentence .

    SEMICOLON       reduce using rule 210 (while_statement -> WHILE expression DO sentence .)
    ELSE            reduce using rule 210 (while_statement -> WHILE expression DO sentence .)


state 326

    (211) repeat_statement -> REPEAT sentences_list UNTIL expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    SEMICOLON       reduce using rule 211 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    ELSE            reduce using rule 211 (repeat_statement -> REPEAT sentences_list UNTIL expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 327

    (212) with_statement -> WITH variable_list DO sentence .

    SEMICOLON       reduce using rule 212 (with_statement -> WITH variable_list DO sentence .)
    ELSE            reduce using rule 212 (with_statement -> WITH variable_list DO sentence .)


state 328

    (214) variable_list -> variable_list COMMA variable .
    (263) variable -> variable . DOT ID
    (264) variable -> variable . LBRACKET expression_list RBRACKET
    (265) variable -> variable . CARET

    DO              reduce using rule 214 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 214 (variable_list -> variable_list COMMA variable .)
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 101
    CARET           shift and go to state 102


state 329

    (30) const_declaration -> ID EQUAL constant SEMICOLON .

    ID              reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONST           reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    VAR             reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 30 (const_declaration -> ID EQUAL constant SEMICOLON .)


state 330

    (31) const_declaration -> ID COLON data_type_list EQUAL . constant SEMICOLON
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    constant                       shift and go to state 387

state 331

    (150) data_type_list -> STRING LBRACKET . NUMBER RBRACKET
    (55) string_type -> STRING LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 388


state 332

    (152) data_type_list -> ABSOLUTE ID .

    EQUAL           reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    SEMICOLON       reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    ABSOLUTE        reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    RPAREN          reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    END             reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    CASE            reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    ID              reduce using rule 152 (data_type_list -> ABSOLUTE ID .)
    OF              reduce using rule 152 (data_type_list -> ABSOLUTE ID .)


state 333

    (76) file_type -> FILE OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 389
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 334

    (58) array_type -> ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (61) type_range_list -> . type_range
    (62) type_range_list -> . type_range_list COMMA type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 392
    ID              shift and go to state 393
    CHAR            shift and go to state 394

    type_range_list                shift and go to state 390
    type_range                     shift and go to state 391

state 335

    (60) array_type -> ARRAY OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 395
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 336

    (59) array_type -> PACKED ARRAY . LBRACKET type_range_list RBRACKET OF data_type_list

    LBRACKET        shift and go to state 396


state 337

    (57) record_type -> PACKED RECORD . record_list END
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_list                    shift and go to state 397
    record_declaration             shift and go to state 341
    id_list                        shift and go to state 342

state 338

    (74) pointer_type -> CARET ID .
    (151) data_type_list -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for END resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for ID resolved using rule 74 (pointer_type -> CARET ID .)
  ! reduce/reduce conflict for OF resolved using rule 74 (pointer_type -> CARET ID .)
    EQUAL           reduce using rule 74 (pointer_type -> CARET ID .)
    SEMICOLON       reduce using rule 74 (pointer_type -> CARET ID .)
    ABSOLUTE        reduce using rule 74 (pointer_type -> CARET ID .)
    RPAREN          reduce using rule 74 (pointer_type -> CARET ID .)
    END             reduce using rule 74 (pointer_type -> CARET ID .)
    CASE            reduce using rule 74 (pointer_type -> CARET ID .)
    ID              reduce using rule 74 (pointer_type -> CARET ID .)
    OF              reduce using rule 74 (pointer_type -> CARET ID .)

  ! EQUAL           [ reduce using rule 151 (data_type_list -> ID .) ]
  ! SEMICOLON       [ reduce using rule 151 (data_type_list -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 151 (data_type_list -> ID .) ]
  ! RPAREN          [ reduce using rule 151 (data_type_list -> ID .) ]
  ! END             [ reduce using rule 151 (data_type_list -> ID .) ]
  ! CASE            [ reduce using rule 151 (data_type_list -> ID .) ]
  ! ID              [ reduce using rule 151 (data_type_list -> ID .) ]
  ! OF              [ reduce using rule 151 (data_type_list -> ID .) ]


state 339

    (75) pointer_type -> CARET data_type_list .

    EQUAL           reduce using rule 75 (pointer_type -> CARET data_type_list .)
    SEMICOLON       reduce using rule 75 (pointer_type -> CARET data_type_list .)
    ABSOLUTE        reduce using rule 75 (pointer_type -> CARET data_type_list .)
    RPAREN          reduce using rule 75 (pointer_type -> CARET data_type_list .)
    END             reduce using rule 75 (pointer_type -> CARET data_type_list .)
    CASE            reduce using rule 75 (pointer_type -> CARET data_type_list .)
    ID              reduce using rule 75 (pointer_type -> CARET data_type_list .)
    OF              reduce using rule 75 (pointer_type -> CARET data_type_list .)


state 340

    (56) record_type -> RECORD record_list . END
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 398
    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_declaration             shift and go to state 399
    id_list                        shift and go to state 342

state 341

    (100) record_list -> record_declaration .

    END             reduce using rule 100 (record_list -> record_declaration .)
    CASE            reduce using rule 100 (record_list -> record_declaration .)
    ID              reduce using rule 100 (record_list -> record_declaration .)
    RPAREN          reduce using rule 100 (record_list -> record_declaration .)


state 342

    (101) record_declaration -> id_list . COLON data_type_list SEMICOLON
    (103) record_declaration -> id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 400
    COMMA           shift and go to state 44


state 343

    (102) record_declaration -> CASE . ID COLON data_type_list OF variant_list

    ID              shift and go to state 401


state 344

    (69) set_type -> SET OF . set_range
    (70) set_range -> . data_type_set
    (71) set_range -> . NUMBER DOBLEDOT NUMBER
    (72) set_range -> . CHAR DOBLEDOT CHAR
    (73) set_range -> . ID
    (161) data_type_set -> . BYTE
    (162) data_type_set -> . SHORTINT
    (163) data_type_set -> . WORD
    (164) data_type_set -> . BOOLEAN
    (165) data_type_set -> . CHAR
    (166) data_type_set -> . ID

    NUMBER          shift and go to state 404
    CHAR            shift and go to state 405
    ID              shift and go to state 406
    BYTE            shift and go to state 407
    SHORTINT        shift and go to state 408
    WORD            shift and go to state 409
    BOOLEAN         shift and go to state 410

    set_range                      shift and go to state 402
    data_type_set                  shift and go to state 403

state 345

    (78) object_type -> OBJECT object_heritage . object_fields object_methods END
    (81) object_fields -> . object_fields var_declaration
    (82) object_fields -> . empty
    (217) empty -> .

    ID              reduce using rule 217 (empty -> .)
    END             reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)

    object_fields                  shift and go to state 411
    empty                          shift and go to state 412

state 346

    (79) object_heritage -> LPAREN . ID RPAREN

    ID              shift and go to state 413


state 347

    (80) object_heritage -> empty .

    ID              reduce using rule 80 (object_heritage -> empty .)
    END             reduce using rule 80 (object_heritage -> empty .)
    PROCEDURE       reduce using rule 80 (object_heritage -> empty .)
    FUNCTION        reduce using rule 80 (object_heritage -> empty .)
    CONSTRUCTOR     reduce using rule 80 (object_heritage -> empty .)
    DESTRUCTOR      reduce using rule 80 (object_heritage -> empty .)


state 348

    (46) type_definition -> ID DOBLEDOT . ID

    ID              shift and go to state 414


state 349

    (41) type_declaration -> ID EQUAL type_definition SEMICOLON .

    ID              reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    BEGIN           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    LABEL           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONST           reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    TYPE            reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    VAR             reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    FUNCTION        reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)
    INTERFACE       reduce using rule 41 (type_declaration -> ID EQUAL type_definition SEMICOLON .)


state 350

    (43) type_definition -> LPAREN id_list . RPAREN
    (7) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 415
    COMMA           shift and go to state 44


state 351

    (44) type_definition -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 416


state 352

    (45) type_definition -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 417


state 353

    (113) var_declaration -> id_list COLON type_definition SEMICOLON .

    ID              reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    BEGIN           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    LABEL           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONST           reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    TYPE            reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    VAR             reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    CONSTRUCTOR     reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    DESTRUCTOR      reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    PROCEDURE       reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    FUNCTION        reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    IMPLEMENTATION  reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    INTERFACE       reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)
    END             reduce using rule 113 (var_declaration -> id_list COLON type_definition SEMICOLON .)


state 354

    (114) var_declaration -> id_list COLON type_definition EQUAL . expression SEMICOLON
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 418
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 355

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE . ID SEMICOLON

    ID              shift and go to state 419


state 356

    (117) procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 117 (procedure_declaration -> procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 357

    (126) function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 126 (function_declaration -> function_header SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 358

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 420


state 359

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 421


state 360

    (93) method_implementation -> PROCEDURE ID DOT ID parameters . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 422


state 361

    (128) parameters -> LPAREN parameter_list RPAREN .

    SEMICOLON       reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 128 (parameters -> LPAREN parameter_list RPAREN .)


state 362

    (130) parameter_list -> parameter_list SEMICOLON . parameter_group
    (132) parameter_group -> . id_list COLON data_type_list
    (133) parameter_group -> . VAR id_list COLON data_type_list
    (134) parameter_group -> . CONST id_list COLON data_type_list
    (135) parameter_group -> . procedure_header
    (136) parameter_group -> . function_header
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    VAR             shift and go to state 283
    CONST           shift and go to state 284
    ID              shift and go to state 13
    PROCEDURE       shift and go to state 287
    FUNCTION        shift and go to state 288

    parameter_group                shift and go to state 423
    id_list                        shift and go to state 282
    procedure_header               shift and go to state 285
    function_header                shift and go to state 286

state 363

    (132) parameter_group -> id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 424
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 364

    (133) parameter_group -> VAR id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 425
    COMMA           shift and go to state 44


state 365

    (134) parameter_group -> CONST id_list . COLON data_type_list
    (7) id_list -> id_list . COMMA ID

    COLON           shift and go to state 426
    COMMA           shift and go to state 44


state 366

    (118) procedure_header -> PROCEDURE ID . parameters
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    RPAREN          reduce using rule 217 (empty -> .)
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 160
    empty                          shift and go to state 162

state 367

    (127) function_header -> FUNCTION ID . parameters COLON data_type_list
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    COLON           reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 164
    empty                          shift and go to state 162

state 368

    (94) method_implementation -> FUNCTION ID DOT ID parameters . COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON

    COLON           shift and go to state 427


state 369

    (127) function_header -> FUNCTION ID parameters COLON data_type_list .

    SEMICOLON       reduce using rule 127 (function_header -> FUNCTION ID parameters COLON data_type_list .)
    RPAREN          reduce using rule 127 (function_header -> FUNCTION ID parameters COLON data_type_list .)


state 370

    (190) procedure_call -> variable DOT ID LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 428
    COMMA           shift and go to state 293


state 371

    (191) procedure_call -> variable DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 191 (procedure_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 191 (procedure_call -> variable DOT ID LPAREN RPAREN .)


state 372

    (272) expression_list -> expression_list COMMA expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 272 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 272 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 272 (expression_list -> expression_list COMMA expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 373

    (197) if_statement -> IF expression THEN sentence ELSE . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 429
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 374

    (269) function_call -> variable DOT ID LPAREN . expression_list RPAREN
    (270) function_call -> variable DOT ID LPAREN . RPAREN
    (271) expression_list -> . expression
    (272) expression_list -> . expression_list COMMA expression
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 431
    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    variable                       shift and go to state 120
    expression_list                shift and go to state 430
    expression                     shift and go to state 169
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 375

    (267) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 267 (function_call -> ID LPAREN expression_list RPAREN .)


state 376

    (259) set_item_list -> set_item_list COMMA set_item .

    RBRACKET        reduce using rule 259 (set_item_list -> set_item_list COMMA set_item .)
    COMMA           reduce using rule 259 (set_item_list -> set_item_list COMMA set_item .)


state 377

    (257) set_item -> expression DOBLEDOT expression .
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    RBRACKET        reduce using rule 257 (set_item -> expression DOBLEDOT expression .)
    COMMA           reduce using rule 257 (set_item -> expression DOBLEDOT expression .)
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 378

    (198) case_statement -> CASE expression OF case_list END .

    SEMICOLON       reduce using rule 198 (case_statement -> CASE expression OF case_list END .)
    ELSE            reduce using rule 198 (case_statement -> CASE expression OF case_list END .)


state 379

    (199) case_statement -> CASE expression OF case_list ELSE . sentences_list SEMICOLON END
    (200) case_statement -> CASE expression OF case_list ELSE . sentences_list END
    (168) sentences_list -> . sentences_list sentence SEMICOLON
    (169) sentences_list -> . sentence SEMICOLON
    (170) sentences_list -> . empty
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (217) empty -> .
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DISPOSE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ASM resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMICOLON       reduce using rule 217 (empty -> .)
    END             reduce using rule 217 (empty -> .)
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! ID              [ reduce using rule 217 (empty -> .) ]
  ! NEW             [ reduce using rule 217 (empty -> .) ]
  ! DISPOSE         [ reduce using rule 217 (empty -> .) ]
  ! BEGIN           [ reduce using rule 217 (empty -> .) ]
  ! IF              [ reduce using rule 217 (empty -> .) ]
  ! CASE            [ reduce using rule 217 (empty -> .) ]
  ! FOR             [ reduce using rule 217 (empty -> .) ]
  ! WHILE           [ reduce using rule 217 (empty -> .) ]
  ! REPEAT          [ reduce using rule 217 (empty -> .) ]
  ! WITH            [ reduce using rule 217 (empty -> .) ]
  ! GOTO            [ reduce using rule 217 (empty -> .) ]
  ! NUMBER          [ reduce using rule 217 (empty -> .) ]
  ! ASM             [ reduce using rule 217 (empty -> .) ]
  ! LPAREN          [ reduce using rule 217 (empty -> .) ]

    sentences_list                 shift and go to state 432
    sentence                       shift and go to state 47
    empty                          shift and go to state 48
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    variable                       shift and go to state 61

state 380

    (201) case_list -> case_list case_label . COLON sentence SEMICOLON
    (206) case_label -> case_label . COMMA constant

    COLON           shift and go to state 433
    COMMA           shift and go to state 382


state 381

    (202) case_list -> case_label COLON . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 434
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 382

    (206) case_label -> case_label COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    constant                       shift and go to state 435

state 383

    (205) case_label -> constant DOBLEDOT . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    constant                       shift and go to state 436

state 384

    (207) for_statement -> FOR ID ASIGNATION expression TO . expression DO sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 437
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 385

    (208) for_statement -> FOR ID ASIGNATION expression DOWNTO . expression DO sentence
    (218) expression -> . expression OR simple_expression
    (219) expression -> . expression XOR simple_expression
    (220) expression -> . simple_expression
    (221) simple_expression -> . simple_expression AND relational_expression
    (222) simple_expression -> . relational_expression
    (223) relational_expression -> . relational_expression relational_operator additive_expression
    (224) relational_expression -> . additive_expression
    (232) additive_expression -> . additive_expression PLUS multiplicative_expression
    (233) additive_expression -> . additive_expression MINUS multiplicative_expression
    (234) additive_expression -> . multiplicative_expression
    (235) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (236) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (237) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (238) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (239) multiplicative_expression -> . multiplicative_expression SHL unary_expression
    (240) multiplicative_expression -> . multiplicative_expression SHR unary_expression
    (241) multiplicative_expression -> . unary_expression
    (242) unary_expression -> . NOT unary_expression
    (243) unary_expression -> . MINUS unary_expression
    (244) unary_expression -> . PLUS unary_expression
    (245) unary_expression -> . ADDRESS_OF unary_expression
    (246) unary_expression -> . primary_expression
    (247) primary_expression -> . variable
    (248) primary_expression -> . NUMBER
    (249) primary_expression -> . STRING
    (250) primary_expression -> . TRUE
    (251) primary_expression -> . FALSE
    (252) primary_expression -> . NIL
    (253) primary_expression -> . LPAREN expression RPAREN
    (254) primary_expression -> . function_call
    (255) primary_expression -> . set_constructor
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET
    (267) function_call -> . ID LPAREN expression_list RPAREN
    (268) function_call -> . ID LPAREN RPAREN
    (269) function_call -> . variable DOT ID LPAREN expression_list RPAREN
    (270) function_call -> . variable DOT ID LPAREN RPAREN
    (260) set_constructor -> . LBRACKET set_item_list RBRACKET
    (261) set_constructor -> . LBRACKET RBRACKET

    NOT             shift and go to state 117
    MINUS           shift and go to state 115
    PLUS            shift and go to state 113
    ADDRESS_OF      shift and go to state 118
    NUMBER          shift and go to state 121
    STRING          shift and go to state 122
    TRUE            shift and go to state 123
    FALSE           shift and go to state 124
    NIL             shift and go to state 125
    LPAREN          shift and go to state 126
    ID              shift and go to state 129
    LBRACKET        shift and go to state 130

    expression                     shift and go to state 438
    simple_expression              shift and go to state 110
    relational_expression          shift and go to state 111
    additive_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 114
    unary_expression               shift and go to state 116
    primary_expression             shift and go to state 119
    variable                       shift and go to state 120
    function_call                  shift and go to state 127
    set_constructor                shift and go to state 128

state 386

    (209) for_statement -> FOR ID IN expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 439
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 387

    (31) const_declaration -> ID COLON data_type_list EQUAL constant . SEMICOLON

    SEMICOLON       shift and go to state 440


state 388

    (150) data_type_list -> STRING LBRACKET NUMBER . RBRACKET
    (55) string_type -> STRING LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 441


state 389

    (76) file_type -> FILE OF data_type_list .

    EQUAL           reduce using rule 76 (file_type -> FILE OF data_type_list .)
    SEMICOLON       reduce using rule 76 (file_type -> FILE OF data_type_list .)
    ABSOLUTE        reduce using rule 76 (file_type -> FILE OF data_type_list .)
    RPAREN          reduce using rule 76 (file_type -> FILE OF data_type_list .)
    END             reduce using rule 76 (file_type -> FILE OF data_type_list .)
    CASE            reduce using rule 76 (file_type -> FILE OF data_type_list .)
    ID              reduce using rule 76 (file_type -> FILE OF data_type_list .)
    OF              reduce using rule 76 (file_type -> FILE OF data_type_list .)


state 390

    (58) array_type -> ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (62) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 442
    COMMA           shift and go to state 443


state 391

    (61) type_range_list -> type_range .

    RBRACKET        reduce using rule 61 (type_range_list -> type_range .)
    COMMA           reduce using rule 61 (type_range_list -> type_range .)


state 392

    (63) type_range -> NUMBER . DOBLEDOT NUMBER
    (64) type_range -> NUMBER . DOBLEDOT ID

    DOBLEDOT        shift and go to state 444


state 393

    (65) type_range -> ID . DOBLEDOT NUMBER
    (67) type_range -> ID . DOBLEDOT ID
    (68) type_range -> ID .

    DOBLEDOT        shift and go to state 445
    RBRACKET        reduce using rule 68 (type_range -> ID .)
    COMMA           reduce using rule 68 (type_range -> ID .)


state 394

    (66) type_range -> CHAR . DOBLEDOT CHAR

    DOBLEDOT        shift and go to state 446


state 395

    (60) array_type -> ARRAY OF data_type_list .

    EQUAL           reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    SEMICOLON       reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    ABSOLUTE        reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    RPAREN          reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    END             reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    CASE            reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    ID              reduce using rule 60 (array_type -> ARRAY OF data_type_list .)
    OF              reduce using rule 60 (array_type -> ARRAY OF data_type_list .)


state 396

    (59) array_type -> PACKED ARRAY LBRACKET . type_range_list RBRACKET OF data_type_list
    (61) type_range_list -> . type_range
    (62) type_range_list -> . type_range_list COMMA type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 392
    ID              shift and go to state 393
    CHAR            shift and go to state 394

    type_range_list                shift and go to state 447
    type_range                     shift and go to state 391

state 397

    (57) record_type -> PACKED RECORD record_list . END
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             shift and go to state 448
    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_declaration             shift and go to state 399
    id_list                        shift and go to state 342

state 398

    (56) record_type -> RECORD record_list END .

    EQUAL           reduce using rule 56 (record_type -> RECORD record_list END .)
    SEMICOLON       reduce using rule 56 (record_type -> RECORD record_list END .)
    ABSOLUTE        reduce using rule 56 (record_type -> RECORD record_list END .)
    RPAREN          reduce using rule 56 (record_type -> RECORD record_list END .)
    END             reduce using rule 56 (record_type -> RECORD record_list END .)
    CASE            reduce using rule 56 (record_type -> RECORD record_list END .)
    ID              reduce using rule 56 (record_type -> RECORD record_list END .)
    OF              reduce using rule 56 (record_type -> RECORD record_list END .)


state 399

    (99) record_list -> record_list record_declaration .

    END             reduce using rule 99 (record_list -> record_list record_declaration .)
    CASE            reduce using rule 99 (record_list -> record_list record_declaration .)
    ID              reduce using rule 99 (record_list -> record_list record_declaration .)
    RPAREN          reduce using rule 99 (record_list -> record_list record_declaration .)


state 400

    (101) record_declaration -> id_list COLON . data_type_list SEMICOLON
    (103) record_declaration -> id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 449
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 401

    (102) record_declaration -> CASE ID . COLON data_type_list OF variant_list

    COLON           shift and go to state 450


state 402

    (69) set_type -> SET OF set_range .

    EQUAL           reduce using rule 69 (set_type -> SET OF set_range .)
    SEMICOLON       reduce using rule 69 (set_type -> SET OF set_range .)
    ABSOLUTE        reduce using rule 69 (set_type -> SET OF set_range .)
    RPAREN          reduce using rule 69 (set_type -> SET OF set_range .)
    END             reduce using rule 69 (set_type -> SET OF set_range .)
    CASE            reduce using rule 69 (set_type -> SET OF set_range .)
    ID              reduce using rule 69 (set_type -> SET OF set_range .)
    OF              reduce using rule 69 (set_type -> SET OF set_range .)


state 403

    (70) set_range -> data_type_set .

    EQUAL           reduce using rule 70 (set_range -> data_type_set .)
    SEMICOLON       reduce using rule 70 (set_range -> data_type_set .)
    ABSOLUTE        reduce using rule 70 (set_range -> data_type_set .)
    RPAREN          reduce using rule 70 (set_range -> data_type_set .)
    END             reduce using rule 70 (set_range -> data_type_set .)
    CASE            reduce using rule 70 (set_range -> data_type_set .)
    ID              reduce using rule 70 (set_range -> data_type_set .)
    OF              reduce using rule 70 (set_range -> data_type_set .)


state 404

    (71) set_range -> NUMBER . DOBLEDOT NUMBER

    DOBLEDOT        shift and go to state 451


state 405

    (72) set_range -> CHAR . DOBLEDOT CHAR
    (165) data_type_set -> CHAR .

    DOBLEDOT        shift and go to state 452
    EQUAL           reduce using rule 165 (data_type_set -> CHAR .)
    SEMICOLON       reduce using rule 165 (data_type_set -> CHAR .)
    ABSOLUTE        reduce using rule 165 (data_type_set -> CHAR .)
    RPAREN          reduce using rule 165 (data_type_set -> CHAR .)
    END             reduce using rule 165 (data_type_set -> CHAR .)
    CASE            reduce using rule 165 (data_type_set -> CHAR .)
    ID              reduce using rule 165 (data_type_set -> CHAR .)
    OF              reduce using rule 165 (data_type_set -> CHAR .)


state 406

    (73) set_range -> ID .
    (166) data_type_set -> ID .

  ! reduce/reduce conflict for EQUAL resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for END resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 73 (set_range -> ID .)
  ! reduce/reduce conflict for OF resolved using rule 73 (set_range -> ID .)
    EQUAL           reduce using rule 73 (set_range -> ID .)
    SEMICOLON       reduce using rule 73 (set_range -> ID .)
    ABSOLUTE        reduce using rule 73 (set_range -> ID .)
    RPAREN          reduce using rule 73 (set_range -> ID .)
    END             reduce using rule 73 (set_range -> ID .)
    CASE            reduce using rule 73 (set_range -> ID .)
    ID              reduce using rule 73 (set_range -> ID .)
    OF              reduce using rule 73 (set_range -> ID .)

  ! EQUAL           [ reduce using rule 166 (data_type_set -> ID .) ]
  ! SEMICOLON       [ reduce using rule 166 (data_type_set -> ID .) ]
  ! ABSOLUTE        [ reduce using rule 166 (data_type_set -> ID .) ]
  ! RPAREN          [ reduce using rule 166 (data_type_set -> ID .) ]
  ! END             [ reduce using rule 166 (data_type_set -> ID .) ]
  ! CASE            [ reduce using rule 166 (data_type_set -> ID .) ]
  ! ID              [ reduce using rule 166 (data_type_set -> ID .) ]
  ! OF              [ reduce using rule 166 (data_type_set -> ID .) ]


state 407

    (161) data_type_set -> BYTE .

    EQUAL           reduce using rule 161 (data_type_set -> BYTE .)
    SEMICOLON       reduce using rule 161 (data_type_set -> BYTE .)
    ABSOLUTE        reduce using rule 161 (data_type_set -> BYTE .)
    RPAREN          reduce using rule 161 (data_type_set -> BYTE .)
    END             reduce using rule 161 (data_type_set -> BYTE .)
    CASE            reduce using rule 161 (data_type_set -> BYTE .)
    ID              reduce using rule 161 (data_type_set -> BYTE .)
    OF              reduce using rule 161 (data_type_set -> BYTE .)


state 408

    (162) data_type_set -> SHORTINT .

    EQUAL           reduce using rule 162 (data_type_set -> SHORTINT .)
    SEMICOLON       reduce using rule 162 (data_type_set -> SHORTINT .)
    ABSOLUTE        reduce using rule 162 (data_type_set -> SHORTINT .)
    RPAREN          reduce using rule 162 (data_type_set -> SHORTINT .)
    END             reduce using rule 162 (data_type_set -> SHORTINT .)
    CASE            reduce using rule 162 (data_type_set -> SHORTINT .)
    ID              reduce using rule 162 (data_type_set -> SHORTINT .)
    OF              reduce using rule 162 (data_type_set -> SHORTINT .)


state 409

    (163) data_type_set -> WORD .

    EQUAL           reduce using rule 163 (data_type_set -> WORD .)
    SEMICOLON       reduce using rule 163 (data_type_set -> WORD .)
    ABSOLUTE        reduce using rule 163 (data_type_set -> WORD .)
    RPAREN          reduce using rule 163 (data_type_set -> WORD .)
    END             reduce using rule 163 (data_type_set -> WORD .)
    CASE            reduce using rule 163 (data_type_set -> WORD .)
    ID              reduce using rule 163 (data_type_set -> WORD .)
    OF              reduce using rule 163 (data_type_set -> WORD .)


state 410

    (164) data_type_set -> BOOLEAN .

    EQUAL           reduce using rule 164 (data_type_set -> BOOLEAN .)
    SEMICOLON       reduce using rule 164 (data_type_set -> BOOLEAN .)
    ABSOLUTE        reduce using rule 164 (data_type_set -> BOOLEAN .)
    RPAREN          reduce using rule 164 (data_type_set -> BOOLEAN .)
    END             reduce using rule 164 (data_type_set -> BOOLEAN .)
    CASE            reduce using rule 164 (data_type_set -> BOOLEAN .)
    ID              reduce using rule 164 (data_type_set -> BOOLEAN .)
    OF              reduce using rule 164 (data_type_set -> BOOLEAN .)


state 411

    (78) object_type -> OBJECT object_heritage object_fields . object_methods END
    (81) object_fields -> object_fields . var_declaration
    (83) object_methods -> . object_methods method_declaration
    (84) object_methods -> . empty
    (113) var_declaration -> . id_list COLON type_definition SEMICOLON
    (114) var_declaration -> . id_list COLON type_definition EQUAL expression SEMICOLON
    (115) var_declaration -> . id_list COLON type_definition ABSOLUTE ID SEMICOLON
    (217) empty -> .
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    END             reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    ID              shift and go to state 13

    object_methods                 shift and go to state 453
    var_declaration                shift and go to state 454
    empty                          shift and go to state 455
    id_list                        shift and go to state 85

state 412

    (82) object_fields -> empty .

    ID              reduce using rule 82 (object_fields -> empty .)
    END             reduce using rule 82 (object_fields -> empty .)
    PROCEDURE       reduce using rule 82 (object_fields -> empty .)
    FUNCTION        reduce using rule 82 (object_fields -> empty .)
    CONSTRUCTOR     reduce using rule 82 (object_fields -> empty .)
    DESTRUCTOR      reduce using rule 82 (object_fields -> empty .)


state 413

    (79) object_heritage -> LPAREN ID . RPAREN

    RPAREN          shift and go to state 456


state 414

    (46) type_definition -> ID DOBLEDOT ID .

    SEMICOLON       reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)
    EQUAL           reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)
    ABSOLUTE        reduce using rule 46 (type_definition -> ID DOBLEDOT ID .)


state 415

    (43) type_definition -> LPAREN id_list RPAREN .

    SEMICOLON       reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)
    EQUAL           reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)
    ABSOLUTE        reduce using rule 43 (type_definition -> LPAREN id_list RPAREN .)


state 416

    (44) type_definition -> NUMBER DOBLEDOT NUMBER .

    SEMICOLON       reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    EQUAL           reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 44 (type_definition -> NUMBER DOBLEDOT NUMBER .)


state 417

    (45) type_definition -> CHAR DOBLEDOT CHAR .

    SEMICOLON       reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)
    EQUAL           reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 45 (type_definition -> CHAR DOBLEDOT CHAR .)


state 418

    (114) var_declaration -> id_list COLON type_definition EQUAL expression . SEMICOLON
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    SEMICOLON       shift and go to state 457
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 419

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE ID . SEMICOLON

    SEMICOLON       shift and go to state 458


state 420

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 459
    empty                          shift and go to state 11

state 421

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 460
    empty                          shift and go to state 11

state 422

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 461
    empty                          shift and go to state 11

state 423

    (130) parameter_list -> parameter_list SEMICOLON parameter_group .

    RPAREN          reduce using rule 130 (parameter_list -> parameter_list SEMICOLON parameter_group .)
    SEMICOLON       reduce using rule 130 (parameter_list -> parameter_list SEMICOLON parameter_group .)


state 424

    (132) parameter_group -> id_list COLON data_type_list .

    RPAREN          reduce using rule 132 (parameter_group -> id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 132 (parameter_group -> id_list COLON data_type_list .)


state 425

    (133) parameter_group -> VAR id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 462
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 426

    (134) parameter_group -> CONST id_list COLON . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 463
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 427

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON . data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 464
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 428

    (190) procedure_call -> variable DOT ID LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 190 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 190 (procedure_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 429

    (197) if_statement -> IF expression THEN sentence ELSE sentence .

    SEMICOLON       reduce using rule 197 (if_statement -> IF expression THEN sentence ELSE sentence .)
    ELSE            reduce using rule 197 (if_statement -> IF expression THEN sentence ELSE sentence .)


state 430

    (269) function_call -> variable DOT ID LPAREN expression_list . RPAREN
    (272) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 465
    COMMA           shift and go to state 293


state 431

    (270) function_call -> variable DOT ID LPAREN RPAREN .

    TIMES           reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DIV             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    MOD             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHL             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    SHR             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    PLUS            reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    MINUS           reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    EQUAL           reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DISTINT         reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESS            reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    LESSEQUAL       reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATER         reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    GREATEREQUAL    reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    IN              reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    AND             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    THEN            reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    OR              reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    XOR             reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    OF              reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DO              reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    ELSE            reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    COMMA           reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOBLEDOT        reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    TO              reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 270 (function_call -> variable DOT ID LPAREN RPAREN .)


state 432

    (199) case_statement -> CASE expression OF case_list ELSE sentences_list . SEMICOLON END
    (200) case_statement -> CASE expression OF case_list ELSE sentences_list . END
    (168) sentences_list -> sentences_list . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 466
    END             shift and go to state 467
    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    LPAREN          shift and go to state 63

  ! SEMICOLON       [ reduce using rule 217 (empty -> .) ]

    sentence                       shift and go to state 96
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 433

    (201) case_list -> case_list case_label COLON . sentence SEMICOLON
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 468
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 434

    (202) case_list -> case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 469


state 435

    (206) case_label -> case_label COMMA constant .

    COLON           reduce using rule 206 (case_label -> case_label COMMA constant .)
    COMMA           reduce using rule 206 (case_label -> case_label COMMA constant .)


state 436

    (205) case_label -> constant DOBLEDOT constant .

    COLON           reduce using rule 205 (case_label -> constant DOBLEDOT constant .)
    COMMA           reduce using rule 205 (case_label -> constant DOBLEDOT constant .)


state 437

    (207) for_statement -> FOR ID ASIGNATION expression TO expression . DO sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    DO              shift and go to state 470
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 438

    (208) for_statement -> FOR ID ASIGNATION expression DOWNTO expression . DO sentence
    (218) expression -> expression . OR simple_expression
    (219) expression -> expression . XOR simple_expression

    DO              shift and go to state 471
    OR              shift and go to state 180
    XOR             shift and go to state 181


state 439

    (209) for_statement -> FOR ID IN expression DO sentence .

    SEMICOLON       reduce using rule 209 (for_statement -> FOR ID IN expression DO sentence .)
    ELSE            reduce using rule 209 (for_statement -> FOR ID IN expression DO sentence .)


state 440

    (31) const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .

    ID              reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    BEGIN           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    LABEL           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONST           reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    TYPE            reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    VAR             reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    CONSTRUCTOR     reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    DESTRUCTOR      reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    PROCEDURE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    FUNCTION        reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    IMPLEMENTATION  reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)
    INTERFACE       reduce using rule 31 (const_declaration -> ID COLON data_type_list EQUAL constant SEMICOLON .)


state 441

    (150) data_type_list -> STRING LBRACKET NUMBER RBRACKET .
    (55) string_type -> STRING LBRACKET NUMBER RBRACKET .

  ! reduce/reduce conflict for EQUAL resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ABSOLUTE resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for OF resolved using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ABSOLUTE        reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    END             reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)
    OF              reduce using rule 55 (string_type -> STRING LBRACKET NUMBER RBRACKET .)

  ! EQUAL           [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ABSOLUTE        [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! END             [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! ID              [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]
  ! OF              [ reduce using rule 150 (data_type_list -> STRING LBRACKET NUMBER RBRACKET .) ]


state 442

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 472


state 443

    (62) type_range_list -> type_range_list COMMA . type_range
    (63) type_range -> . NUMBER DOBLEDOT NUMBER
    (64) type_range -> . NUMBER DOBLEDOT ID
    (65) type_range -> . ID DOBLEDOT NUMBER
    (66) type_range -> . CHAR DOBLEDOT CHAR
    (67) type_range -> . ID DOBLEDOT ID
    (68) type_range -> . ID

    NUMBER          shift and go to state 392
    ID              shift and go to state 393
    CHAR            shift and go to state 394

    type_range                     shift and go to state 473

state 444

    (63) type_range -> NUMBER DOBLEDOT . NUMBER
    (64) type_range -> NUMBER DOBLEDOT . ID

    NUMBER          shift and go to state 474
    ID              shift and go to state 475


state 445

    (65) type_range -> ID DOBLEDOT . NUMBER
    (67) type_range -> ID DOBLEDOT . ID

    NUMBER          shift and go to state 477
    ID              shift and go to state 476


state 446

    (66) type_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 478


state 447

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list . RBRACKET OF data_type_list
    (62) type_range_list -> type_range_list . COMMA type_range

    RBRACKET        shift and go to state 479
    COMMA           shift and go to state 443


state 448

    (57) record_type -> PACKED RECORD record_list END .

    EQUAL           reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    SEMICOLON       reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    ABSOLUTE        reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    RPAREN          reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    END             reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    CASE            reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    ID              reduce using rule 57 (record_type -> PACKED RECORD record_list END .)
    OF              reduce using rule 57 (record_type -> PACKED RECORD record_list END .)


state 449

    (101) record_declaration -> id_list COLON data_type_list . SEMICOLON
    (103) record_declaration -> id_list COLON data_type_list .

    SEMICOLON       shift and go to state 480
    END             reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    CASE            reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    ID              reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)
    RPAREN          reduce using rule 103 (record_declaration -> id_list COLON data_type_list .)


state 450

    (102) record_declaration -> CASE ID COLON . data_type_list OF variant_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 481
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 451

    (71) set_range -> NUMBER DOBLEDOT . NUMBER

    NUMBER          shift and go to state 482


state 452

    (72) set_range -> CHAR DOBLEDOT . CHAR

    CHAR            shift and go to state 483


state 453

    (78) object_type -> OBJECT object_heritage object_fields object_methods . END
    (83) object_methods -> object_methods . method_declaration
    (85) method_declaration -> . procedure_header SEMICOLON
    (86) method_declaration -> . function_header SEMICOLON
    (87) method_declaration -> . constructor_declaration
    (88) method_declaration -> . destructor_declaration
    (89) method_declaration -> . procedure_header SEMICOLON directive
    (90) method_declaration -> . function_header SEMICOLON directive
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list
    (95) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON
    (96) constructor_declaration -> . CONSTRUCTOR ID parameters SEMICOLON directive
    (97) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON
    (98) destructor_declaration -> . DESTRUCTOR ID parameters SEMICOLON directive

    END             shift and go to state 484
    PROCEDURE       shift and go to state 287
    FUNCTION        shift and go to state 288
    CONSTRUCTOR     shift and go to state 490
    DESTRUCTOR      shift and go to state 491

    method_declaration             shift and go to state 485
    procedure_header               shift and go to state 486
    function_header                shift and go to state 487
    constructor_declaration        shift and go to state 488
    destructor_declaration         shift and go to state 489

state 454

    (81) object_fields -> object_fields var_declaration .

    ID              reduce using rule 81 (object_fields -> object_fields var_declaration .)
    END             reduce using rule 81 (object_fields -> object_fields var_declaration .)
    PROCEDURE       reduce using rule 81 (object_fields -> object_fields var_declaration .)
    FUNCTION        reduce using rule 81 (object_fields -> object_fields var_declaration .)
    CONSTRUCTOR     reduce using rule 81 (object_fields -> object_fields var_declaration .)
    DESTRUCTOR      reduce using rule 81 (object_fields -> object_fields var_declaration .)


state 455

    (84) object_methods -> empty .

    END             reduce using rule 84 (object_methods -> empty .)
    PROCEDURE       reduce using rule 84 (object_methods -> empty .)
    FUNCTION        reduce using rule 84 (object_methods -> empty .)
    CONSTRUCTOR     reduce using rule 84 (object_methods -> empty .)
    DESTRUCTOR      reduce using rule 84 (object_methods -> empty .)


state 456

    (79) object_heritage -> LPAREN ID RPAREN .

    ID              reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    END             reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    PROCEDURE       reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    FUNCTION        reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    CONSTRUCTOR     reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)
    DESTRUCTOR      reduce using rule 79 (object_heritage -> LPAREN ID RPAREN .)


state 457

    (114) var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .

    ID              reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    LABEL           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONST           reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    TYPE            reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    VAR             reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    CONSTRUCTOR     reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    DESTRUCTOR      reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    PROCEDURE       reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    IMPLEMENTATION  reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    INTERFACE       reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)
    END             reduce using rule 114 (var_declaration -> id_list COLON type_definition EQUAL expression SEMICOLON .)


state 458

    (115) var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .

    ID              reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    BEGIN           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    LABEL           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONST           reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    TYPE            reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    VAR             reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    CONSTRUCTOR     reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    DESTRUCTOR      reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    PROCEDURE       reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    FUNCTION        reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    IMPLEMENTATION  reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    INTERFACE       reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)
    END             reduce using rule 115 (var_declaration -> id_list COLON type_definition ABSOLUTE ID SEMICOLON .)


state 459

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 492
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 460

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 493
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 461

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 494
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 462

    (133) parameter_group -> VAR id_list COLON data_type_list .

    RPAREN          reduce using rule 133 (parameter_group -> VAR id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 133 (parameter_group -> VAR id_list COLON data_type_list .)


state 463

    (134) parameter_group -> CONST id_list COLON data_type_list .

    RPAREN          reduce using rule 134 (parameter_group -> CONST id_list COLON data_type_list .)
    SEMICOLON       reduce using rule 134 (parameter_group -> CONST id_list COLON data_type_list .)


state 464

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list . SEMICOLON declaration_blocks compound_statement SEMICOLON

    SEMICOLON       shift and go to state 495


state 465

    (269) function_call -> variable DOT ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHL             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SHR             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DISTINT         reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESS            reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    LESSEQUAL       reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    GREATEREQUAL    reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    XOR             reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    OF              reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOBLEDOT        reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 269 (function_call -> variable DOT ID LPAREN expression_list RPAREN .)


state 466

    (199) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON . END

    END             shift and go to state 496


state 467

    (200) case_statement -> CASE expression OF case_list ELSE sentences_list END .

    SEMICOLON       reduce using rule 200 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)
    ELSE            reduce using rule 200 (case_statement -> CASE expression OF case_list ELSE sentences_list END .)


state 468

    (201) case_list -> case_list case_label COLON sentence . SEMICOLON

    SEMICOLON       shift and go to state 497


state 469

    (202) case_list -> case_label COLON sentence SEMICOLON .

    END             reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 202 (case_list -> case_label COLON sentence SEMICOLON .)


state 470

    (207) for_statement -> FOR ID ASIGNATION expression TO expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 498
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 471

    (208) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO . sentence
    (171) sentence -> . assignment
    (172) sentence -> . procedure_call
    (173) sentence -> . compound_statement
    (174) sentence -> . if_statement
    (175) sentence -> . case_statement
    (176) sentence -> . for_statement
    (177) sentence -> . while_statement
    (178) sentence -> . repeat_statement
    (179) sentence -> . with_statement
    (180) sentence -> . goto_statement
    (181) sentence -> . labeled_sentence
    (182) sentence -> . asm_statement
    (183) sentence -> . empty
    (185) assignment -> . variable ASIGNATION expression
    (186) assignment -> . ID ASIGNATION expression
    (187) procedure_call -> . ID
    (188) procedure_call -> . ID LPAREN expression_list RPAREN
    (189) procedure_call -> . ID LPAREN RPAREN
    (190) procedure_call -> . variable DOT ID LPAREN expression_list RPAREN
    (191) procedure_call -> . variable DOT ID LPAREN RPAREN
    (192) procedure_call -> . NEW LPAREN expression_list RPAREN
    (193) procedure_call -> . NEW LPAREN RPAREN
    (194) procedure_call -> . DISPOSE LPAREN expression_list RPAREN
    (195) procedure_call -> . DISPOSE LPAREN RPAREN
    (167) compound_statement -> . BEGIN sentences_list END
    (196) if_statement -> . IF expression THEN sentence
    (197) if_statement -> . IF expression THEN sentence ELSE sentence
    (198) case_statement -> . CASE expression OF case_list END
    (199) case_statement -> . CASE expression OF case_list ELSE sentences_list SEMICOLON END
    (200) case_statement -> . CASE expression OF case_list ELSE sentences_list END
    (207) for_statement -> . FOR ID ASIGNATION expression TO expression DO sentence
    (208) for_statement -> . FOR ID ASIGNATION expression DOWNTO expression DO sentence
    (209) for_statement -> . FOR ID IN expression DO sentence
    (210) while_statement -> . WHILE expression DO sentence
    (211) repeat_statement -> . REPEAT sentences_list UNTIL expression
    (212) with_statement -> . WITH variable_list DO sentence
    (215) goto_statement -> . GOTO NUMBER
    (216) labeled_sentence -> . NUMBER COLON sentence
    (184) asm_statement -> . ASM
    (217) empty -> .
    (262) variable -> . ID
    (263) variable -> . variable DOT ID
    (264) variable -> . variable LBRACKET expression_list RBRACKET
    (265) variable -> . variable CARET
    (266) variable -> . LPAREN variable RPAREN CARET

    ID              shift and go to state 62
    NEW             shift and go to state 64
    DISPOSE         shift and go to state 65
    BEGIN           shift and go to state 30
    IF              shift and go to state 66
    CASE            shift and go to state 67
    FOR             shift and go to state 68
    WHILE           shift and go to state 69
    REPEAT          shift and go to state 70
    WITH            shift and go to state 71
    GOTO            shift and go to state 72
    NUMBER          shift and go to state 73
    ASM             shift and go to state 74
    SEMICOLON       reduce using rule 217 (empty -> .)
    ELSE            reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 63

    sentence                       shift and go to state 499
    assignment                     shift and go to state 49
    procedure_call                 shift and go to state 50
    compound_statement             shift and go to state 51
    if_statement                   shift and go to state 52
    case_statement                 shift and go to state 53
    for_statement                  shift and go to state 54
    while_statement                shift and go to state 55
    repeat_statement               shift and go to state 56
    with_statement                 shift and go to state 57
    goto_statement                 shift and go to state 58
    labeled_sentence               shift and go to state 59
    asm_statement                  shift and go to state 60
    empty                          shift and go to state 97
    variable                       shift and go to state 61

state 472

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 500
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 473

    (62) type_range_list -> type_range_list COMMA type_range .

    RBRACKET        reduce using rule 62 (type_range_list -> type_range_list COMMA type_range .)
    COMMA           reduce using rule 62 (type_range_list -> type_range_list COMMA type_range .)


state 474

    (63) type_range -> NUMBER DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 63 (type_range -> NUMBER DOBLEDOT NUMBER .)
    COMMA           reduce using rule 63 (type_range -> NUMBER DOBLEDOT NUMBER .)


state 475

    (64) type_range -> NUMBER DOBLEDOT ID .

    RBRACKET        reduce using rule 64 (type_range -> NUMBER DOBLEDOT ID .)
    COMMA           reduce using rule 64 (type_range -> NUMBER DOBLEDOT ID .)


state 476

    (67) type_range -> ID DOBLEDOT ID .

    RBRACKET        reduce using rule 67 (type_range -> ID DOBLEDOT ID .)
    COMMA           reduce using rule 67 (type_range -> ID DOBLEDOT ID .)


state 477

    (65) type_range -> ID DOBLEDOT NUMBER .

    RBRACKET        reduce using rule 65 (type_range -> ID DOBLEDOT NUMBER .)
    COMMA           reduce using rule 65 (type_range -> ID DOBLEDOT NUMBER .)


state 478

    (66) type_range -> CHAR DOBLEDOT CHAR .

    RBRACKET        reduce using rule 66 (type_range -> CHAR DOBLEDOT CHAR .)
    COMMA           reduce using rule 66 (type_range -> CHAR DOBLEDOT CHAR .)


state 479

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET . OF data_type_list

    OF              shift and go to state 501


state 480

    (101) record_declaration -> id_list COLON data_type_list SEMICOLON .

    END             reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    CASE            reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    ID              reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)
    RPAREN          reduce using rule 101 (record_declaration -> id_list COLON data_type_list SEMICOLON .)


state 481

    (102) record_declaration -> CASE ID COLON data_type_list . OF variant_list

    OF              shift and go to state 502


state 482

    (71) set_range -> NUMBER DOBLEDOT NUMBER .

    EQUAL           reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    SEMICOLON       reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ABSOLUTE        reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    RPAREN          reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    END             reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    CASE            reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    ID              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)
    OF              reduce using rule 71 (set_range -> NUMBER DOBLEDOT NUMBER .)


state 483

    (72) set_range -> CHAR DOBLEDOT CHAR .

    EQUAL           reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    SEMICOLON       reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ABSOLUTE        reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    RPAREN          reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    END             reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    CASE            reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    ID              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)
    OF              reduce using rule 72 (set_range -> CHAR DOBLEDOT CHAR .)


state 484

    (78) object_type -> OBJECT object_heritage object_fields object_methods END .

    EQUAL           reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    SEMICOLON       reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ABSOLUTE        reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    RPAREN          reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    END             reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    CASE            reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    ID              reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)
    OF              reduce using rule 78 (object_type -> OBJECT object_heritage object_fields object_methods END .)


state 485

    (83) object_methods -> object_methods method_declaration .

    END             reduce using rule 83 (object_methods -> object_methods method_declaration .)
    PROCEDURE       reduce using rule 83 (object_methods -> object_methods method_declaration .)
    FUNCTION        reduce using rule 83 (object_methods -> object_methods method_declaration .)
    CONSTRUCTOR     reduce using rule 83 (object_methods -> object_methods method_declaration .)
    DESTRUCTOR      reduce using rule 83 (object_methods -> object_methods method_declaration .)


state 486

    (85) method_declaration -> procedure_header . SEMICOLON
    (89) method_declaration -> procedure_header . SEMICOLON directive

    SEMICOLON       shift and go to state 503


state 487

    (86) method_declaration -> function_header . SEMICOLON
    (90) method_declaration -> function_header . SEMICOLON directive

    SEMICOLON       shift and go to state 504


state 488

    (87) method_declaration -> constructor_declaration .

    END             reduce using rule 87 (method_declaration -> constructor_declaration .)
    PROCEDURE       reduce using rule 87 (method_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 87 (method_declaration -> constructor_declaration .)
    CONSTRUCTOR     reduce using rule 87 (method_declaration -> constructor_declaration .)
    DESTRUCTOR      reduce using rule 87 (method_declaration -> constructor_declaration .)


state 489

    (88) method_declaration -> destructor_declaration .

    END             reduce using rule 88 (method_declaration -> destructor_declaration .)
    PROCEDURE       reduce using rule 88 (method_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 88 (method_declaration -> destructor_declaration .)
    CONSTRUCTOR     reduce using rule 88 (method_declaration -> destructor_declaration .)
    DESTRUCTOR      reduce using rule 88 (method_declaration -> destructor_declaration .)


state 490

    (95) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 505


state 491

    (97) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR . ID parameters SEMICOLON directive

    ID              shift and go to state 506


state 492

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 507


state 493

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 508


state 494

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 509


state 495

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON . declaration_blocks compound_statement SEMICOLON
    (8) declaration_blocks -> . declaration_blocks declaration_block
    (9) declaration_blocks -> . empty
    (217) empty -> .

    BEGIN           reduce using rule 217 (empty -> .)
    LABEL           reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    TYPE            reduce using rule 217 (empty -> .)
    VAR             reduce using rule 217 (empty -> .)
    CONSTRUCTOR     reduce using rule 217 (empty -> .)
    DESTRUCTOR      reduce using rule 217 (empty -> .)
    PROCEDURE       reduce using rule 217 (empty -> .)
    FUNCTION        reduce using rule 217 (empty -> .)
    IMPLEMENTATION  reduce using rule 217 (empty -> .)
    INTERFACE       reduce using rule 217 (empty -> .)

    declaration_blocks             shift and go to state 510
    empty                          shift and go to state 11

state 496

    (199) case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .

    SEMICOLON       reduce using rule 199 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)
    ELSE            reduce using rule 199 (case_statement -> CASE expression OF case_list ELSE sentences_list SEMICOLON END .)


state 497

    (201) case_list -> case_list case_label COLON sentence SEMICOLON .

    END             reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ELSE            reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NUMBER          reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    STRING          reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    TRUE            reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    FALSE           reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    NIL             reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 201 (case_list -> case_list case_label COLON sentence SEMICOLON .)


state 498

    (207) for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .

    SEMICOLON       reduce using rule 207 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)
    ELSE            reduce using rule 207 (for_statement -> FOR ID ASIGNATION expression TO expression DO sentence .)


state 499

    (208) for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .

    SEMICOLON       reduce using rule 208 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)
    ELSE            reduce using rule 208 (for_statement -> FOR ID ASIGNATION expression DOWNTO expression DO sentence .)


state 500

    (58) array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 58 (array_type -> ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 501

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF . data_type_list
    (137) data_type_list -> . INTEGER
    (138) data_type_list -> . BYTE
    (139) data_type_list -> . LONGINT
    (140) data_type_list -> . SHORTINT
    (141) data_type_list -> . WORD
    (142) data_type_list -> . REAL
    (143) data_type_list -> . SINGLE
    (144) data_type_list -> . DOUBLE
    (145) data_type_list -> . EXTENDED
    (146) data_type_list -> . SHORT
    (147) data_type_list -> . BOOLEAN
    (148) data_type_list -> . CHAR
    (149) data_type_list -> . STRING
    (150) data_type_list -> . STRING LBRACKET NUMBER RBRACKET
    (151) data_type_list -> . ID
    (152) data_type_list -> . ABSOLUTE ID
    (153) data_type_list -> . FILE
    (154) data_type_list -> . array_type
    (155) data_type_list -> . pointer_type
    (156) data_type_list -> . record_type
    (157) data_type_list -> . set_type
    (158) data_type_list -> . file_type
    (159) data_type_list -> . object_type
    (160) data_type_list -> . string_type
    (58) array_type -> . ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (59) array_type -> . PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list
    (60) array_type -> . ARRAY OF data_type_list
    (74) pointer_type -> . CARET ID
    (75) pointer_type -> . CARET data_type_list
    (56) record_type -> . RECORD record_list END
    (57) record_type -> . PACKED RECORD record_list END
    (69) set_type -> . SET OF set_range
    (76) file_type -> . FILE OF data_type_list
    (77) file_type -> . FILE
    (78) object_type -> . OBJECT object_heritage object_fields object_methods END
    (54) string_type -> . STRING
    (55) string_type -> . STRING LBRACKET NUMBER RBRACKET

    INTEGER         shift and go to state 230
    BYTE            shift and go to state 231
    LONGINT         shift and go to state 232
    SHORTINT        shift and go to state 233
    WORD            shift and go to state 234
    REAL            shift and go to state 235
    SINGLE          shift and go to state 236
    DOUBLE          shift and go to state 237
    EXTENDED        shift and go to state 238
    SHORT           shift and go to state 239
    BOOLEAN         shift and go to state 240
    CHAR            shift and go to state 241
    STRING          shift and go to state 242
    ID              shift and go to state 228
    ABSOLUTE        shift and go to state 243
    FILE            shift and go to state 244
    ARRAY           shift and go to state 252
    PACKED          shift and go to state 253
    CARET           shift and go to state 254
    RECORD          shift and go to state 255
    SET             shift and go to state 256
    OBJECT          shift and go to state 257

    data_type_list                 shift and go to state 511
    array_type                     shift and go to state 245
    pointer_type                   shift and go to state 246
    record_type                    shift and go to state 247
    set_type                       shift and go to state 248
    file_type                      shift and go to state 249
    object_type                    shift and go to state 250
    string_type                    shift and go to state 251

state 502

    (102) record_declaration -> CASE ID COLON data_type_list OF . variant_list
    (104) variant_list -> . variant_list variant
    (105) variant_list -> . variant
    (106) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (108) constant_list -> . constant
    (109) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    variant_list                   shift and go to state 512
    variant                        shift and go to state 513
    constant_list                  shift and go to state 514
    constant                       shift and go to state 515

state 503

    (85) method_declaration -> procedure_header SEMICOLON .
    (89) method_declaration -> procedure_header SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    PROCEDURE       reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    FUNCTION        reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 85 (method_declaration -> procedure_header SEMICOLON .)
    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154

    directive                      shift and go to state 516

state 504

    (86) method_declaration -> function_header SEMICOLON .
    (90) method_declaration -> function_header SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    PROCEDURE       reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    FUNCTION        reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    CONSTRUCTOR     reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    DESTRUCTOR      reduce using rule 86 (method_declaration -> function_header SEMICOLON .)
    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154

    directive                      shift and go to state 517

state 505

    (95) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR ID . parameters SEMICOLON directive
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 518
    empty                          shift and go to state 162

state 506

    (97) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR ID . parameters SEMICOLON directive
    (128) parameters -> . LPAREN parameter_list RPAREN
    (129) parameters -> . empty
    (217) empty -> .

    LPAREN          shift and go to state 161
    SEMICOLON       reduce using rule 217 (empty -> .)

    parameters                     shift and go to state 519
    empty                          shift and go to state 162

state 507

    (91) constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 91 (constructor_implementation -> CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 508

    (92) destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 92 (destructor_implementation -> DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 509

    (93) method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 93 (method_implementation -> PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 510

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks . compound_statement SEMICOLON
    (8) declaration_blocks -> declaration_blocks . declaration_block
    (167) compound_statement -> . BEGIN sentences_list END
    (10) declaration_block -> . label_declaration
    (11) declaration_block -> . const_declaration_block
    (12) declaration_block -> . type_declaration_block
    (13) declaration_block -> . var_declaration_block
    (14) declaration_block -> . procedure_declaration
    (15) declaration_block -> . function_declaration
    (16) declaration_block -> . constructor_implementation
    (17) declaration_block -> . destructor_implementation
    (18) declaration_block -> . method_implementation
    (19) declaration_block -> . implementation_block
    (20) declaration_block -> . interface_block
    (24) label_declaration -> . LABEL number_list SEMICOLON
    (27) const_declaration_block -> . CONST const_list
    (38) type_declaration_block -> . TYPE type_list
    (110) var_declaration_block -> . VAR var_list
    (116) procedure_declaration -> . procedure_header SEMICOLON directive SEMICOLON
    (117) procedure_declaration -> . procedure_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (125) function_declaration -> . function_header SEMICOLON directive
    (126) function_declaration -> . function_header SEMICOLON declaration_blocks compound_statement SEMICOLON
    (91) constructor_implementation -> . CONSTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (92) destructor_implementation -> . DESTRUCTOR ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (93) method_implementation -> . PROCEDURE ID DOT ID parameters SEMICOLON declaration_blocks compound_statement SEMICOLON
    (94) method_implementation -> . FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON
    (23) implementation_block -> . IMPLEMENTATION declaration_blocks
    (22) interface_block -> . INTERFACE declaration_blocks
    (118) procedure_header -> . PROCEDURE ID parameters
    (127) function_header -> . FUNCTION ID parameters COLON data_type_list

    BEGIN           shift and go to state 30
    LABEL           shift and go to state 31
    CONST           shift and go to state 32
    TYPE            shift and go to state 33
    VAR             shift and go to state 34
    CONSTRUCTOR     shift and go to state 37
    DESTRUCTOR      shift and go to state 38
    PROCEDURE       shift and go to state 39
    FUNCTION        shift and go to state 40
    IMPLEMENTATION  shift and go to state 41
    INTERFACE       shift and go to state 42

    compound_statement             shift and go to state 520
    declaration_block              shift and go to state 17
    label_declaration              shift and go to state 19
    const_declaration_block        shift and go to state 20
    type_declaration_block         shift and go to state 21
    var_declaration_block          shift and go to state 22
    procedure_declaration          shift and go to state 23
    function_declaration           shift and go to state 24
    constructor_implementation     shift and go to state 25
    destructor_implementation      shift and go to state 26
    method_implementation          shift and go to state 27
    implementation_block           shift and go to state 28
    interface_block                shift and go to state 29
    procedure_header               shift and go to state 35
    function_header                shift and go to state 36

state 511

    (59) array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .

    EQUAL           reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    SEMICOLON       reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ABSOLUTE        reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    RPAREN          reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    END             reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    CASE            reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    ID              reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)
    OF              reduce using rule 59 (array_type -> PACKED ARRAY LBRACKET type_range_list RBRACKET OF data_type_list .)


state 512

    (102) record_declaration -> CASE ID COLON data_type_list OF variant_list .
    (104) variant_list -> variant_list . variant
    (106) variant -> . constant_list COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> . constant_list COLON LPAREN RPAREN SEMICOLON
    (108) constant_list -> . constant
    (109) constant_list -> . constant_list COMMA constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    END             reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    CASE            reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    ID              reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    RPAREN          reduce using rule 102 (record_declaration -> CASE ID COLON data_type_list OF variant_list .)
    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    variant                        shift and go to state 521
    constant_list                  shift and go to state 514
    constant                       shift and go to state 515

state 513

    (105) variant_list -> variant .

    NUMBER          reduce using rule 105 (variant_list -> variant .)
    STRING          reduce using rule 105 (variant_list -> variant .)
    TRUE            reduce using rule 105 (variant_list -> variant .)
    FALSE           reduce using rule 105 (variant_list -> variant .)
    NIL             reduce using rule 105 (variant_list -> variant .)
    ORDINAL_CONSTANT reduce using rule 105 (variant_list -> variant .)
    END             reduce using rule 105 (variant_list -> variant .)
    CASE            reduce using rule 105 (variant_list -> variant .)
    ID              reduce using rule 105 (variant_list -> variant .)
    RPAREN          reduce using rule 105 (variant_list -> variant .)


state 514

    (106) variant -> constant_list . COLON LPAREN record_list RPAREN SEMICOLON
    (107) variant -> constant_list . COLON LPAREN RPAREN SEMICOLON
    (109) constant_list -> constant_list . COMMA constant

    COLON           shift and go to state 522
    COMMA           shift and go to state 523


state 515

    (108) constant_list -> constant .

    COLON           reduce using rule 108 (constant_list -> constant .)
    COMMA           reduce using rule 108 (constant_list -> constant .)


state 516

    (89) method_declaration -> procedure_header SEMICOLON directive .

    END             reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    FUNCTION        reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 89 (method_declaration -> procedure_header SEMICOLON directive .)


state 517

    (90) method_declaration -> function_header SEMICOLON directive .

    END             reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    PROCEDURE       reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    FUNCTION        reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 90 (method_declaration -> function_header SEMICOLON directive .)


state 518

    (95) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON
    (96) constructor_declaration -> CONSTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 524


state 519

    (97) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON
    (98) destructor_declaration -> DESTRUCTOR ID parameters . SEMICOLON directive

    SEMICOLON       shift and go to state 525


state 520

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 526


state 521

    (104) variant_list -> variant_list variant .

    NUMBER          reduce using rule 104 (variant_list -> variant_list variant .)
    STRING          reduce using rule 104 (variant_list -> variant_list variant .)
    TRUE            reduce using rule 104 (variant_list -> variant_list variant .)
    FALSE           reduce using rule 104 (variant_list -> variant_list variant .)
    NIL             reduce using rule 104 (variant_list -> variant_list variant .)
    ORDINAL_CONSTANT reduce using rule 104 (variant_list -> variant_list variant .)
    END             reduce using rule 104 (variant_list -> variant_list variant .)
    CASE            reduce using rule 104 (variant_list -> variant_list variant .)
    ID              reduce using rule 104 (variant_list -> variant_list variant .)
    RPAREN          reduce using rule 104 (variant_list -> variant_list variant .)


state 522

    (106) variant -> constant_list COLON . LPAREN record_list RPAREN SEMICOLON
    (107) variant -> constant_list COLON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 527


state 523

    (109) constant_list -> constant_list COMMA . constant
    (32) constant -> . NUMBER
    (33) constant -> . STRING
    (34) constant -> . TRUE
    (35) constant -> . FALSE
    (36) constant -> . NIL
    (37) constant -> . ORDINAL_CONSTANT

    NUMBER          shift and go to state 222
    STRING          shift and go to state 223
    TRUE            shift and go to state 224
    FALSE           shift and go to state 225
    NIL             shift and go to state 226
    ORDINAL_CONSTANT shift and go to state 227

    constant                       shift and go to state 528

state 524

    (95) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .
    (96) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 95 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154

    directive                      shift and go to state 529

state 525

    (97) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .
    (98) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON . directive
    (119) directive -> . FORWARD
    (120) directive -> . EXTERNAL
    (121) directive -> . EXTERNAL STRING
    (122) directive -> . ASM
    (123) directive -> . INLINE
    (124) directive -> . VIRTUAL

    END             reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    PROCEDURE       reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FUNCTION        reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    CONSTRUCTOR     reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    DESTRUCTOR      reduce using rule 97 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON .)
    FORWARD         shift and go to state 150
    EXTERNAL        shift and go to state 151
    ASM             shift and go to state 152
    INLINE          shift and go to state 153
    VIRTUAL         shift and go to state 154

    directive                      shift and go to state 530

state 526

    (94) method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .

    BEGIN           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    LABEL           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONST           reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    TYPE            reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    VAR             reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    CONSTRUCTOR     reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    DESTRUCTOR      reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    PROCEDURE       reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    IMPLEMENTATION  reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)
    INTERFACE       reduce using rule 94 (method_implementation -> FUNCTION ID DOT ID parameters COLON data_type_list SEMICOLON declaration_blocks compound_statement SEMICOLON .)


state 527

    (106) variant -> constant_list COLON LPAREN . record_list RPAREN SEMICOLON
    (107) variant -> constant_list COLON LPAREN . RPAREN SEMICOLON
    (99) record_list -> . record_list record_declaration
    (100) record_list -> . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 532
    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_list                    shift and go to state 531
    record_declaration             shift and go to state 341
    id_list                        shift and go to state 342

state 528

    (109) constant_list -> constant_list COMMA constant .

    COLON           reduce using rule 109 (constant_list -> constant_list COMMA constant .)
    COMMA           reduce using rule 109 (constant_list -> constant_list COMMA constant .)


state 529

    (96) constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 96 (constructor_declaration -> CONSTRUCTOR ID parameters SEMICOLON directive .)


state 530

    (98) destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .

    END             reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    PROCEDURE       reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    FUNCTION        reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    CONSTRUCTOR     reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)
    DESTRUCTOR      reduce using rule 98 (destructor_declaration -> DESTRUCTOR ID parameters SEMICOLON directive .)


state 531

    (106) variant -> constant_list COLON LPAREN record_list . RPAREN SEMICOLON
    (99) record_list -> record_list . record_declaration
    (101) record_declaration -> . id_list COLON data_type_list SEMICOLON
    (102) record_declaration -> . CASE ID COLON data_type_list OF variant_list
    (103) record_declaration -> . id_list COLON data_type_list
    (6) id_list -> . ID
    (7) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 533
    CASE            shift and go to state 343
    ID              shift and go to state 13

    record_declaration             shift and go to state 399
    id_list                        shift and go to state 342

state 532

    (107) variant -> constant_list COLON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 534


state 533

    (106) variant -> constant_list COLON LPAREN record_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 535


state 534

    (107) variant -> constant_list COLON LPAREN RPAREN SEMICOLON .

    NUMBER          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    NIL             reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 107 (variant -> constant_list COLON LPAREN RPAREN SEMICOLON .)


state 535

    (106) variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .

    NUMBER          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    STRING          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    NIL             reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ORDINAL_CONSTANT reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    END             reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    CASE            reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    ID              reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 106 (variant -> constant_list COLON LPAREN record_list RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 30 resolved as shift
WARNING: shift/reduce conflict for NEW in state 30 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 30 resolved as shift
WARNING: shift/reduce conflict for IF in state 30 resolved as shift
WARNING: shift/reduce conflict for CASE in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for WITH in state 30 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 30 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 30 resolved as shift
WARNING: shift/reduce conflict for ASM in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for ASIGNATION in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for NEW in state 70 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 70 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for CASE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 70 resolved as shift
WARNING: shift/reduce conflict for WITH in state 70 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 70 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 70 resolved as shift
WARNING: shift/reduce conflict for ASM in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 92 resolved as shift
WARNING: shift/reduce conflict for CONST in state 92 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 92 resolved as shift
WARNING: shift/reduce conflict for VAR in state 92 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 92 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 92 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 92 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 92 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 92 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DESTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for PROCEDURE in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for IMPLEMENTATION in state 93 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 93 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 206 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING in state 212 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 212 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 212 resolved as shift
WARNING: shift/reduce conflict for NIL in state 212 resolved as shift
WARNING: shift/reduce conflict for ORDINAL_CONSTANT in state 212 resolved as shift
WARNING: shift/reduce conflict for OF in state 244 resolved as shift
WARNING: shift/reduce conflict for OF in state 244 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 299 resolved as shift
WARNING: shift/reduce conflict for ID in state 379 resolved as shift
WARNING: shift/reduce conflict for NEW in state 379 resolved as shift
WARNING: shift/reduce conflict for DISPOSE in state 379 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 379 resolved as shift
WARNING: shift/reduce conflict for IF in state 379 resolved as shift
WARNING: shift/reduce conflict for CASE in state 379 resolved as shift
WARNING: shift/reduce conflict for FOR in state 379 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 379 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 379 resolved as shift
WARNING: shift/reduce conflict for WITH in state 379 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 379 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 379 resolved as shift
WARNING: shift/reduce conflict for ASM in state 379 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 379 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 432 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (sentences_list -> empty)
WARNING: rejected rule (sentence -> empty) in state 48
WARNING: reduce/reduce conflict in state 242 resolved using rule (string_type -> STRING)
WARNING: rejected rule (data_type_list -> STRING) in state 242
WARNING: reduce/reduce conflict in state 244 resolved using rule (file_type -> FILE)
WARNING: rejected rule (data_type_list -> FILE) in state 244
WARNING: reduce/reduce conflict in state 264 resolved using rule (type_definition -> record_type)
WARNING: rejected rule (data_type_list -> record_type) in state 264
WARNING: reduce/reduce conflict in state 265 resolved using rule (type_definition -> array_type)
WARNING: rejected rule (data_type_list -> array_type) in state 265
WARNING: reduce/reduce conflict in state 266 resolved using rule (type_definition -> set_type)
WARNING: rejected rule (data_type_list -> set_type) in state 266
WARNING: reduce/reduce conflict in state 267 resolved using rule (type_definition -> pointer_type)
WARNING: rejected rule (data_type_list -> pointer_type) in state 267
WARNING: reduce/reduce conflict in state 268 resolved using rule (type_definition -> file_type)
WARNING: rejected rule (data_type_list -> file_type) in state 268
WARNING: reduce/reduce conflict in state 269 resolved using rule (type_definition -> object_type)
WARNING: rejected rule (data_type_list -> object_type) in state 269
WARNING: reduce/reduce conflict in state 270 resolved using rule (type_definition -> string_type)
WARNING: rejected rule (data_type_list -> string_type) in state 270
WARNING: reduce/reduce conflict in state 338 resolved using rule (pointer_type -> CARET ID)
WARNING: rejected rule (data_type_list -> ID) in state 338
WARNING: reduce/reduce conflict in state 406 resolved using rule (set_range -> ID)
WARNING: rejected rule (data_type_set -> ID) in state 406
WARNING: reduce/reduce conflict in state 441 resolved using rule (string_type -> STRING LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) in state 441
WARNING: Rule (data_type_list -> STRING) is never reduced
WARNING: Rule (data_type_list -> FILE) is never reduced
WARNING: Rule (data_type_set -> ID) is never reduced
WARNING: Rule (data_type_list -> STRING LBRACKET NUMBER RBRACKET) is never reduced
